{"version":3,"file":"index.min.js","sources":["../src/model/immutable/BlockMapBuilder.tsx","../src/model/immutable/CharacterMetadata.tsx","../src/model/immutable/findRangesImmutable.tsx","../src/model/immutable/ContentBlock.tsx","../src/model/immutable/ContentBlockNode.tsx","../src/model/transaction/ContentStateInlineStyle.tsx","../src/model/transaction/applyEntityToContentState.tsx","../src/model/transaction/applyEntityToContentBlock.tsx","../src/model/modifier/DraftEntitySegments.tsx","../src/model/modifier/getCharacterRemovalRange.tsx","../src/model/modifier/getRangesForDraftEntity.tsx","../src/model/keys/generateRandomKey.tsx","../src/model/transaction/randomizeBlockMapKeys.tsx","../src/model/transaction/removeEntitiesAtEdges.tsx","../src/model/transaction/getContentStateFragment.tsx","../src/model/transaction/insertIntoList.tsx","../src/model/transaction/insertFragmentIntoContentState.tsx","../src/model/transaction/modifyBlockForContentState.tsx","../src/model/transaction/exploration/getNextDelimiterBlockKey.tsx","../src/model/transaction/removeRangeFromContentState.tsx","../src/model/transaction/splitBlockInContentState.tsx","../src/model/modifier/DraftModifier.tsx","../src/model/transaction/insertTextIntoContentState.tsx","../src/model/immutable/BlockTree.tsx","../src/model/entity/DraftEntityInstance.tsx","../src/model/entity/DraftEntity.tsx","../src/model/immutable/SelectionState.tsx","../src/stubs/gkx.tsx","../src/model/encoding/sanitizeDraftText.tsx","../src/model/immutable/ContentState.tsx","../src/model/immutable/EditorBidiService.tsx","../src/model/immutable/EditorState.tsx","../src/model/transaction/moveBlockInContentState.tsx","../src/model/modifier/AtomicBlockUtils.tsx","../src/model/decorators/CompositeDraftDecorator.tsx","../src/model/immutable/DefaultDraftBlockRenderMap.tsx","../src/model/immutable/DefaultDraftInlineStyle.tsx","../src/component/utils/getCorrectDocumentFromNode.tsx","../src/component/utils/isElement.tsx","../src/component/selection/getSelectionOffsetKeyForNode.tsx","../src/component/selection/findAncestorOffsetKey.tsx","../src/component/utils/getWindowForNode.tsx","../src/component/handlers/composition/DOMObserver.tsx","../src/component/selection/DraftOffsetKey.tsx","../src/stubs/DraftJsDebugLogging.tsx","../src/component/utils/isHTMLElement.tsx","../src/component/utils/getContentEditableContainer.tsx","../src/component/selection/getUpdatedSelectionState.tsx","../src/component/selection/getDraftEditorSelectionWithNodes.tsx","../src/component/selection/getDraftEditorSelection.tsx","../src/component/handlers/edit/editOnSelect.tsx","../src/component/utils/draftKeyUtils.tsx","../src/model/entity/getEntityKeyForSelection.tsx","../src/component/handlers/composition/DraftEditorCompositionHandler.tsx","../src/component/contents/exploration/DraftEditorDecoratedLeaves.react.tsx","../src/component/contents/DraftEditorTextNode.react.tsx","../src/component/utils/isHTMLBRElement.tsx","../src/stubs/DraftEffects.tsx","../src/component/selection/setDraftEditorSelection.tsx","../src/component/contents/DraftEditorLeaf.react.tsx","../src/component/contents/exploration/DraftEditorNode.react.tsx","../src/component/contents/exploration/DraftEditorBlockNode.react.tsx","../src/component/contents/exploration/DraftEditorContentsExperimental.react.tsx","../src/component/contents/DraftEditorBlock.react.tsx","../src/component/contents/DraftEditorContents-core.react.tsx","../src/stubs/DraftEditorContents.react.tsx","../src/component/utils/getTextContentFromFiles.tsx","../src/component/utils/isEventHandled.tsx","../src/component/handlers/drag/DraftEditorDragHandler.tsx","../src/component/handlers/edit/editOnBeforeInput.tsx","../src/component/handlers/edit/getFragmentFromSelection.tsx","../src/component/handlers/edit/commands/moveSelectionBackward.tsx","../src/component/handlers/edit/commands/removeTextWithStrategy.tsx","../src/component/handlers/edit/commands/keyCommandPlainBackspace.tsx","../src/component/handlers/edit/editOnInput.tsx","../src/component/utils/KeyBindingUtil.tsx","../src/component/utils/isSoftNewlineEvent.tsx","../src/component/handlers/edit/commands/SecondaryClipboard.tsx","../src/component/selection/getRangeClientRects.tsx","../src/component/selection/expandRangeToStartOfLine.tsx","../src/model/modifier/DraftRemovableWord.tsx","../src/component/handlers/edit/commands/moveSelectionForward.tsx","../src/component/handlers/edit/editOnKeyDown.tsx","../src/component/handlers/edit/commands/keyCommandPlainDelete.tsx","../src/component/handlers/edit/commands/keyCommandDeleteWord.tsx","../src/component/handlers/edit/commands/keyCommandBackspaceWord.tsx","../src/component/handlers/edit/commands/keyCommandBackspaceToStartOfLine.tsx","../src/component/handlers/edit/commands/keyCommandInsertNewline.tsx","../src/component/handlers/edit/commands/keyCommandTransposeCharacters.tsx","../src/component/handlers/edit/commands/keyCommandMoveSelectionToStartOfBlock.tsx","../src/component/handlers/edit/commands/keyCommandMoveSelectionToEndOfBlock.tsx","../src/model/paste/getSafeBodyFromHTML.tsx","../src/component/utils/isHTMLAnchorElement.tsx","../src/component/utils/isHTMLImageElement.tsx","../src/model/encoding/convertFromHTMLToContentBlocks.tsx","../src/model/paste/DraftPasteProcessor.tsx","../src/model/modifier/RichTextEditorUtil.tsx","../src/model/transaction/adjustBlockDepthForContentState.tsx","../src/component/utils/splitTextIntoTextBlocks.tsx","../src/component/handlers/edit/editOnPaste.tsx","../src/component/handlers/edit/DraftEditorEditHandler.tsx","../src/component/selection/isSelectionAtLeafStart.tsx","../src/component/handlers/edit/editOnBlur.tsx","../src/component/handlers/edit/editOnCompositionStart.tsx","../src/component/handlers/edit/editOnCopy.tsx","../src/component/handlers/edit/editOnCut.tsx","../src/component/utils/isInstanceOfNode.tsx","../src/component/handlers/edit/editOnDragOver.tsx","../src/component/handlers/edit/editOnDragStart.tsx","../src/component/handlers/edit/editOnFocus.tsx","../src/component/handlers/edit/commands/keyCommandUndo.tsx","../src/component/base/DraftEditorPlaceholder.react.tsx","../src/component/utils/getDefaultKeyBinding.tsx","../src/component/base/DraftEditor.react.tsx","../src/model/encoding/DraftStringKey.tsx","../src/model/encoding/encodeEntityRanges.tsx","../src/model/encoding/encodeInlineStyleRanges.tsx","../src/model/encoding/convertFromDraftStateToRaw.tsx","../src/component/utils/exploration/DraftTreeAdapter.tsx","../src/component/utils/exploration/DraftTreeInvariants.tsx","../src/model/encoding/decodeEntityRanges.tsx","../src/model/encoding/decodeInlineStyleRanges.tsx","../src/model/encoding/convertFromRawToDraftState.tsx","../src/model/encoding/createCharacterList.tsx","../src/component/selection/getVisibleSelectionRect.tsx","../src/component/selection/getRangeBoundingClientRect.tsx"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { BlockMap } from \"./BlockMap\";\r\nimport { BlockNodeRecord } from \"./BlockNodeRecord\";\r\n\r\nimport { OrderedMap } from \"immutable\";\r\n\r\nconst BlockMapBuilder = {\r\n    createFromArray: function(blocks: Array<BlockNodeRecord>): BlockMap {\r\n        return OrderedMap(blocks.map(block => [block.getKey(), block]));\r\n    }\r\n};\r\n\r\nexport default BlockMapBuilder;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {DraftInlineStyle} from './DraftInlineStyle';\r\n\r\nimport {Map, OrderedSet, Record} from 'immutable';\r\n\r\n// Immutable.map is typed such that the value for every key in the map\r\n// must be the same type\r\ntype CharacterMetadataConfigValueType = DraftInlineStyle | string;\r\n\r\ntype CharacterMetadataConfig = {\r\n  style?: CharacterMetadataConfigValueType,\r\n  entity?: CharacterMetadataConfigValueType,\r\n};\r\n\r\nconst EMPTY_SET = OrderedSet<string>();\r\n\r\nconst defaultRecord: CharacterMetadataConfig = {\r\n  style: EMPTY_SET,\r\n  entity: null,\r\n};\r\n\r\nconst CharacterMetadataRecord = Record(defaultRecord);\r\n\r\nclass CharacterMetadata extends CharacterMetadataRecord {\r\n  getStyle(): DraftInlineStyle {\r\n    return this.get('style');\r\n  }\r\n\r\n  getEntity():string {\r\n    return this.get('entity');\r\n  }\r\n\r\n  hasStyle(style: string): boolean {\r\n    return this.getStyle().includes(style);\r\n  }\r\n\r\n  static applyStyle(\r\n    record: CharacterMetadata,\r\n    style: string,\r\n  ): CharacterMetadata {\r\n    const withStyle:any = record.set('style', record.getStyle().add(style));\r\n    return CharacterMetadata.create(withStyle);\r\n  }\r\n\r\n  static removeStyle(\r\n    record: CharacterMetadata,\r\n    style: string,\r\n  ): CharacterMetadata {\r\n    const withoutStyle:any = record.set('style', record.getStyle().remove(style));\r\n    return CharacterMetadata.create(withoutStyle);\r\n  }\r\n\r\n  static applyEntity(\r\n    record: CharacterMetadata,\r\n    entityKey:string,\r\n  ): CharacterMetadata {\r\n    const withEntity:any =\r\n      record.getEntity() === entityKey\r\n        ? record\r\n        : record.set('entity', entityKey);\r\n    return CharacterMetadata.create(withEntity);\r\n  }\r\n\r\n  /**\r\n   * Use this function instead of the `CharacterMetadata` constructor.\r\n   * Since most content generally uses only a very small number of\r\n   * style/entity permutations, we can reuse these objects as often as\r\n   * possible.\r\n   */\r\n  static create(config?: CharacterMetadataConfig): CharacterMetadata {\r\n    if (!config) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const defaultConfig: CharacterMetadataConfig = {\r\n      style: EMPTY_SET,\r\n      entity: null,\r\n    };\r\n\r\n    // Fill in unspecified properties, if necessary.\r\n    const configMap = Map(defaultConfig).merge(config);\r\n\r\n    const existing:CharacterMetadata = pool.get(configMap);\r\n    if (existing) {\r\n      return existing;\r\n    }\r\n\r\n    const newCharacter = new CharacterMetadata(configMap);\r\n    pool = pool.set(configMap, newCharacter);\r\n    return newCharacter;\r\n  }\r\n\r\n  static EMPTY;\r\n}\r\n\r\nconst EMPTY = new CharacterMetadata();\r\nlet pool: Map<Map<any, any>, CharacterMetadata> = Map([\r\n  [Map(defaultRecord), EMPTY],\r\n]);\r\n\r\nCharacterMetadata.EMPTY = EMPTY;\r\n\r\nexport default  CharacterMetadata;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {List} from 'immutable';\r\n\r\n/**\r\n * Search through an array to find contiguous stretches of elements that\r\n * match a specified filter function.\r\n *\r\n * When ranges are found, execute a specified `found` function to supply\r\n * the values to the caller.\r\n */\r\nfunction findRangesImmutable<T>(\r\n  haystack: List<T>,\r\n  areEqualFn: (a: T, b: T) => boolean,\r\n  filterFn: (value: T) => boolean,\r\n  foundFn: (start: number, end: number) => void,\r\n): void {\r\n  if (!haystack.size) {\r\n    return;\r\n  }\r\n\r\n  let cursor: number = 0;\r\n\r\n  haystack.reduce((value: T, nextValue, nextIndex) => {\r\n    if (!areEqualFn(value, nextValue)) {\r\n      if (filterFn(value)) {\r\n        foundFn(cursor, nextIndex);\r\n      }\r\n      cursor = nextIndex;\r\n    }\r\n    return nextValue;\r\n  });\r\n\r\n  filterFn(haystack.last()) && foundFn(cursor, haystack.count());\r\n}\r\n\r\nexport default  findRangesImmutable;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNode, BlockNodeConfig, BlockNodeKey} from './BlockNode';\r\nimport {DraftBlockType} from '../constants/DraftBlockType';\r\nimport {DraftInlineStyle} from './DraftInlineStyle';\r\n\r\nimport CharacterMetadata from  './CharacterMetadata';\r\n\r\nimport findRangesImmutable from './findRangesImmutable';\r\nimport { List, Map, OrderedSet, Record, Repeat  } from 'immutable';\r\n\r\nconst EMPTY_SET = OrderedSet<string>();\r\n\r\nconst defaultRecord: BlockNodeConfig = {\r\n  key: '',\r\n  type: 'unstyled',\r\n  text: '',\r\n  characterList: List(),\r\n  depth: 0,\r\n  data: Map(),\r\n};\r\n\r\nconst ContentBlockRecord = Record(defaultRecord);\r\n\r\nconst decorateCharacterList = (config: BlockNodeConfig): BlockNodeConfig => {\r\n  if (!config) {\r\n    return config;\r\n  }\r\n\r\n  const {characterList, text} = config;\r\n\r\n  if (text && !characterList) {\r\n    config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\r\n  }\r\n\r\n  return config;\r\n};\r\n\r\nclass ContentBlock extends ContentBlockRecord implements BlockNode {\r\n  constructor(config: BlockNodeConfig) {\r\n    super(decorateCharacterList(config));\r\n  }\r\n\r\n  getParentKey\r\n  getNextSiblingKey\r\n  getPrevSiblingKey\r\n\r\n  getKey(): BlockNodeKey {\r\n    return this.get('key');\r\n  }\r\n\r\n  getType(): DraftBlockType {\r\n    return this.get('type');\r\n  }\r\n\r\n  getText(): string {\r\n    return this.get('text');\r\n  }\r\n\r\n  getCharacterList(): List<CharacterMetadata> {\r\n    return this.get('characterList');\r\n  }\r\n\r\n  getLength(): number {\r\n    return this.getText().length;\r\n  }\r\n\r\n  getDepth(): number {\r\n    return this.get('depth');\r\n  }\r\n\r\n  getData(): Map<any, any> {\r\n    return this.get('data');\r\n  }\r\n\r\n  getInlineStyleAt(offset: number): DraftInlineStyle {\r\n    const character = this.getCharacterList().get(offset);\r\n    return character ? character.getStyle() : EMPTY_SET;\r\n  }\r\n\r\n  getEntityAt(offset: number): string {\r\n    const character = this.getCharacterList().get(offset);\r\n    return character ? character.getEntity() : null;\r\n  }\r\n\r\n  /**\r\n   * Execute a callback for every contiguous range of styles within the block.\r\n   */\r\n  findStyleRanges(\r\n    filterFn: (value: CharacterMetadata) => boolean,\r\n    callback: (start: number, end: number) => void,\r\n  ): void {\r\n    findRangesImmutable(\r\n      this.getCharacterList(),\r\n      haveEqualStyle,\r\n      filterFn,\r\n      callback,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute a callback for every contiguous range of entities within the block.\r\n   */\r\n  findEntityRanges(\r\n    filterFn: (value: CharacterMetadata) => boolean,\r\n    callback: (start: number, end: number) => void,\r\n  ): void {\r\n    findRangesImmutable(\r\n      this.getCharacterList(),\r\n      haveEqualEntity,\r\n      filterFn,\r\n      callback,\r\n    );\r\n  }\r\n}\r\n\r\nfunction haveEqualStyle(\r\n  charA: CharacterMetadata,\r\n  charB: CharacterMetadata,\r\n): boolean {\r\n  return charA.getStyle() === charB.getStyle();\r\n}\r\n\r\nfunction haveEqualEntity(\r\n  charA: CharacterMetadata,\r\n  charB: CharacterMetadata,\r\n): boolean {\r\n  return charA.getEntity() === charB.getEntity();\r\n}\r\n\r\nexport default  ContentBlock;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This file is a fork of ContentBlock adding support for nesting references by\r\n * providing links to children, parent, prevSibling, and nextSibling.\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { BlockNode, BlockNodeConfig, BlockNodeKey } from \"./BlockNode\";\r\nimport { DraftBlockType } from \"../constants/DraftBlockType\";\r\nimport { DraftInlineStyle } from \"./DraftInlineStyle\";\r\n\r\nimport CharacterMetadata from \"./CharacterMetadata\";\r\n\r\nimport findRangesImmutable from \"./findRangesImmutable\";\r\nimport { List, Map, OrderedSet, Record, Repeat } from \"immutable\";\r\n\r\ntype ContentBlockNodeConfig = BlockNodeConfig & {\r\n    children?: List<BlockNodeKey>;\r\n    parent?: BlockNodeKey;\r\n    prevSibling?: BlockNodeKey;\r\n    nextSibling?: BlockNodeKey;\r\n};\r\n\r\nconst EMPTY_SET = OrderedSet<string>();\r\n\r\nconst defaultRecord: ContentBlockNodeConfig = {\r\n    parent: null,\r\n    characterList: List(),\r\n    data: Map(),\r\n    depth: 0,\r\n    key: \"\",\r\n    text: \"\",\r\n    type: \"unstyled\",\r\n    children: List(),\r\n    prevSibling: null,\r\n    nextSibling: null\r\n};\r\n\r\nconst haveEqualStyle = (charA: CharacterMetadata, charB: CharacterMetadata): boolean => charA.getStyle() === charB.getStyle();\r\n\r\nconst haveEqualEntity = (charA: CharacterMetadata, charB: CharacterMetadata): boolean => charA.getEntity() === charB.getEntity();\r\n\r\nconst decorateCharacterList = (config: ContentBlockNodeConfig): ContentBlockNodeConfig => {\r\n    if (!config) {\r\n        return config;\r\n    }\r\n\r\n    const { characterList, text } = config;\r\n\r\n    if (text && !characterList) {\r\n        config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\r\n    }\r\n\r\n    return config;\r\n};\r\n\r\nclass ContentBlockNode extends Record(defaultRecord) implements BlockNode {\r\n    constructor(props: ContentBlockNodeConfig = defaultRecord) {\r\n        /* eslint-disable-next-line constructor-super */\r\n        super(decorateCharacterList(props));\r\n    }\r\n\r\n    getKey(): BlockNodeKey {\r\n        return this.get(\"key\");\r\n    }\r\n\r\n    getType(): DraftBlockType {\r\n        return this.get(\"type\");\r\n    }\r\n\r\n    getText(): string {\r\n        return this.get(\"text\");\r\n    }\r\n\r\n    getCharacterList(): List<CharacterMetadata> {\r\n        return this.get(\"characterList\");\r\n    }\r\n\r\n    getLength(): number {\r\n        return this.getText().length;\r\n    }\r\n\r\n    getDepth(): number {\r\n        return this.get(\"depth\");\r\n    }\r\n\r\n    getData(): Map<any, any> {\r\n        return this.get(\"data\");\r\n    }\r\n\r\n    getInlineStyleAt(offset: number): DraftInlineStyle {\r\n        const character = this.getCharacterList().get(offset);\r\n        return character ? character.getStyle() : EMPTY_SET;\r\n    }\r\n\r\n    getEntityAt(offset: number): string {\r\n        const character = this.getCharacterList().get(offset);\r\n        return character ? character.getEntity() : null;\r\n    }\r\n\r\n    getChildKeys(): List<BlockNodeKey> {\r\n        return this.get(\"children\");\r\n    }\r\n\r\n    getParentKey(): BlockNodeKey {\r\n        return this.get(\"parent\");\r\n    }\r\n\r\n    getPrevSiblingKey(): BlockNodeKey {\r\n        return this.get(\"prevSibling\");\r\n    }\r\n\r\n    getNextSiblingKey(): BlockNodeKey {\r\n        return this.get(\"nextSibling\");\r\n    }\r\n\r\n    findStyleRanges(filterFn: (value: CharacterMetadata) => boolean, callback: (start: number, end: number) => void): void {\r\n        findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\r\n    }\r\n\r\n    findEntityRanges(filterFn: (value: CharacterMetadata) => boolean, callback: (start: number, end: number) => void): void {\r\n        findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\r\n    }\r\n}\r\n\r\nexport default ContentBlockNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport {Map} from 'immutable';\r\n\r\nconst ContentStateInlineStyle = {\r\n  add: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    inlineStyle: string,\r\n  ): ContentState {\r\n    return modifyInlineStyle(contentState, selectionState, inlineStyle, true);\r\n  },\r\n\r\n  remove: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    inlineStyle: string,\r\n  ): ContentState {\r\n    return modifyInlineStyle(contentState, selectionState, inlineStyle, false);\r\n  },\r\n};\r\n\r\nfunction modifyInlineStyle(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  inlineStyle: string,\r\n  addOrRemove: boolean,\r\n): ContentState {\r\n  const blockMap = contentState.getBlockMap();\r\n  const startKey = selectionState.getStartKey();\r\n  const startOffset = selectionState.getStartOffset();\r\n  const endKey = selectionState.getEndKey();\r\n  const endOffset = selectionState.getEndOffset();\r\n\r\n  const newBlocks:any = blockMap\r\n    .skipUntil((_, k) => k === startKey)\r\n    .takeUntil((_, k) => k === endKey)\r\n    .concat(Map([[endKey, blockMap.get(endKey)]]))\r\n    .map((block, blockKey) => {\r\n      let sliceStart;\r\n      let sliceEnd;\r\n\r\n      if (startKey === endKey) {\r\n        sliceStart = startOffset;\r\n        sliceEnd = endOffset;\r\n      } else {\r\n        sliceStart = blockKey === startKey ? startOffset : 0;\r\n        sliceEnd = blockKey === endKey ? endOffset : block.getLength();\r\n      }\r\n\r\n      let chars = block.getCharacterList();\r\n      let current;\r\n      while (sliceStart < sliceEnd) {\r\n        current = chars.get(sliceStart);\r\n        chars = chars.set(\r\n          sliceStart,\r\n          addOrRemove\r\n            ? CharacterMetadata.applyStyle(current, inlineStyle)\r\n            : CharacterMetadata.removeStyle(current, inlineStyle),\r\n        );\r\n        sliceStart++;\r\n      }\r\n\r\n      return block.set('characterList', chars);\r\n    });\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.merge(newBlocks),\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState,\r\n  }) as any;\r\n}\r\n\r\nexport default  ContentStateInlineStyle;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport applyEntityToContentBlock from './applyEntityToContentBlock';\r\nimport { OrderedMap } from 'immutable';\r\n\r\nfunction applyEntityToContentState(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  entityKey: string,\r\n): ContentState {\r\n  const blockMap = contentState.getBlockMap();\r\n  const startKey = selectionState.getStartKey();\r\n  const startOffset = selectionState.getStartOffset();\r\n  const endKey = selectionState.getEndKey();\r\n  const endOffset = selectionState.getEndOffset();\r\n\r\n  const newBlocks = blockMap\r\n    .skipUntil((_, k) => k === startKey)\r\n    .takeUntil((_, k) => k === endKey)\r\n    .toOrderedMap()\r\n    .merge(OrderedMap([[endKey, blockMap.get(endKey)]]))\r\n    .map((block, blockKey) => {\r\n      const sliceStart = blockKey === startKey ? startOffset : 0;\r\n      const sliceEnd = blockKey === endKey ? endOffset : block.getLength();\r\n      return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\r\n    });\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.merge(newBlocks),\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState,\r\n  }) as any;\r\n}\r\n\r\nexport default  applyEntityToContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\n\r\nfunction applyEntityToContentBlock(\r\n  contentBlock: BlockNodeRecord,\r\n  start: number,\r\n  end: number,\r\n  entityKey: string,\r\n): BlockNodeRecord {\r\n  let characterList = contentBlock.getCharacterList();\r\n  while (start < end) {\r\n    characterList = characterList.set(\r\n      start,\r\n      CharacterMetadata.applyEntity(characterList.get(start), entityKey),\r\n    );\r\n    start++;\r\n  }\r\n  return contentBlock.set('characterList', characterList) as BlockNodeRecord;\r\n}\r\n\r\nexport default  applyEntityToContentBlock;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {DraftRange} from './DraftRange';\r\nimport  {DraftRemovalDirection} from '../constants/DraftRemovalDirection';\r\n\r\n/**\r\n * Identify the range to delete from a segmented entity.\r\n *\r\n * Rules:\r\n *\r\n *  Example: 'John F. Kennedy'\r\n *\r\n *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\r\n *     will return the range of that text.\r\n *\r\n *       'John F. Kennedy' -> 'John F.'\r\n *                  ^\r\n *\r\n *   - Forward deletion of whitespace will remove the following section:\r\n *\r\n *       'John F. Kennedy' -> 'John Kennedy'\r\n *            ^\r\n *\r\n *   - Backward deletion of whitespace will remove the previous section:\r\n *\r\n *       'John F. Kennedy' -> 'F. Kennedy'\r\n *            ^\r\n */\r\nconst DraftEntitySegments = {\r\n  getRemovalRange: function(\r\n    selectionStart: number,\r\n    selectionEnd: number,\r\n    text: string,\r\n    entityStart: number,\r\n    direction: DraftRemovalDirection,\r\n  ): DraftRange {\r\n    let segments = text.split(' ');\r\n    segments = segments.map((/*string*/ segment, /*number*/ ii) => {\r\n      if (direction === 'forward') {\r\n        if (ii > 0) {\r\n          return ' ' + segment;\r\n        }\r\n      } else if (ii < segments.length - 1) {\r\n        return segment + ' ';\r\n      }\r\n      return segment;\r\n    });\r\n\r\n    let segmentStart = entityStart;\r\n    let segmentEnd;\r\n    let segment;\r\n    let removalStart: any = null;\r\n    let removalEnd: any = null;\r\n\r\n    for (let jj = 0; jj < segments.length; jj++) {\r\n      segment = segments[jj];\r\n      segmentEnd = segmentStart + segment.length;\r\n\r\n      // Our selection overlaps this segment.\r\n      if (selectionStart < segmentEnd && segmentStart < selectionEnd) {\r\n        if (removalStart !== null) {\r\n          removalEnd = segmentEnd;\r\n        } else {\r\n          removalStart = segmentStart;\r\n          removalEnd = segmentEnd;\r\n        }\r\n      } else if (removalStart !== null) {\r\n        break;\r\n      }\r\n\r\n      segmentStart = segmentEnd;\r\n    }\r\n\r\n    const entityEnd = entityStart + text.length;\r\n    const atStart = removalStart === entityStart;\r\n    const atEnd = removalEnd === entityEnd;\r\n\r\n    if ((!atStart && atEnd) || (atStart && !atEnd)) {\r\n      if (direction === 'forward') {\r\n        if (removalEnd !== entityEnd) {\r\n          removalEnd++;\r\n        }\r\n      } else if (removalStart !== entityStart) {\r\n        removalStart--;\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: removalStart,\r\n      end: removalEnd,\r\n    };\r\n  },\r\n};\r\n\r\nexport default  DraftEntitySegments;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  {DraftRemovalDirection} from '../constants/DraftRemovalDirection';\r\nimport {EntityMap} from '../immutable/EntityMap';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport DraftEntitySegments from './DraftEntitySegments';\r\n\r\nimport getRangesForDraftEntity from './getRangesForDraftEntity';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * Given a SelectionState and a removal direction, determine the entire range\r\n * that should be removed from a ContentState. This is based on any entities\r\n * within the target, with their `mutability` values taken into account.\r\n *\r\n * For instance, if we are attempting to remove part of an \"immutable\" entity\r\n * range, the entire entity must be removed. The returned `SelectionState`\r\n * will be adjusted accordingly.\r\n */\r\nfunction getCharacterRemovalRange(\r\n  entityMap: EntityMap,\r\n  startBlock: BlockNodeRecord,\r\n  endBlock: BlockNodeRecord,\r\n  selectionState: SelectionState,\r\n  direction: DraftRemovalDirection,\r\n): SelectionState {\r\n  const start = selectionState.getStartOffset();\r\n  const end = selectionState.getEndOffset();\r\n  const startEntityKey = startBlock.getEntityAt(start);\r\n  const endEntityKey = endBlock.getEntityAt(end - 1);\r\n  if (!startEntityKey && !endEntityKey) {\r\n    return selectionState;\r\n  }\r\n  let newSelectionState:any = selectionState;\r\n  if (startEntityKey && startEntityKey === endEntityKey) {\r\n    newSelectionState = getEntityRemovalRange(\r\n      entityMap,\r\n      startBlock,\r\n      newSelectionState,\r\n      direction,\r\n      startEntityKey,\r\n      true,\r\n      true,\r\n    );\r\n  } else if (startEntityKey && endEntityKey) {\r\n    const startSelectionState = getEntityRemovalRange(\r\n      entityMap,\r\n      startBlock,\r\n      newSelectionState,\r\n      direction,\r\n      startEntityKey,\r\n      false,\r\n      true,\r\n    );\r\n    const endSelectionState = getEntityRemovalRange(\r\n      entityMap,\r\n      endBlock,\r\n      newSelectionState,\r\n      direction,\r\n      endEntityKey,\r\n      false,\r\n      false,\r\n    );\r\n    newSelectionState = newSelectionState.merge({\r\n      anchorOffset: startSelectionState.getAnchorOffset(),\r\n      focusOffset: endSelectionState.getFocusOffset(),\r\n      isBackward: false,\r\n    });\r\n  } else if (startEntityKey) {\r\n    const startSelectionState = getEntityRemovalRange(\r\n      entityMap,\r\n      startBlock,\r\n      newSelectionState,\r\n      direction,\r\n      startEntityKey,\r\n      false,\r\n      true,\r\n    );\r\n    newSelectionState = newSelectionState.merge({\r\n      anchorOffset: startSelectionState.getStartOffset(),\r\n      isBackward: false,\r\n    });\r\n  } else if (endEntityKey) {\r\n    const endSelectionState = getEntityRemovalRange(\r\n      entityMap,\r\n      endBlock,\r\n      newSelectionState,\r\n      direction,\r\n      endEntityKey,\r\n      false,\r\n      false,\r\n    );\r\n    newSelectionState = newSelectionState.merge({\r\n      focusOffset: endSelectionState.getEndOffset(),\r\n      isBackward: false,\r\n    });\r\n  }\r\n  return newSelectionState;\r\n}\r\n\r\nfunction getEntityRemovalRange(\r\n  entityMap: EntityMap,\r\n  block: BlockNodeRecord,\r\n  selectionState: SelectionState,\r\n  direction: DraftRemovalDirection,\r\n  entityKey: string,\r\n  isEntireSelectionWithinEntity: boolean,\r\n  isEntityAtStart: boolean,\r\n): SelectionState {\r\n  let start = selectionState.getStartOffset();\r\n  let end = selectionState.getEndOffset();\r\n  const entity = entityMap.__get(entityKey);\r\n  const mutability = entity.getMutability();\r\n  const sideToConsider = isEntityAtStart ? start : end;\r\n\r\n  // `MUTABLE` entities can just have the specified range of text removed\r\n  // directly. No adjustments are needed.\r\n  if (mutability === 'MUTABLE') {\r\n    return selectionState;\r\n  }\r\n\r\n  // Find the entity range that overlaps with our removal range.\r\n  const entityRanges = getRangesForDraftEntity(block, entityKey).filter(\r\n    range => sideToConsider <= range.end && sideToConsider >= range.start,\r\n  );\r\n\r\n  invariant(\r\n    entityRanges.length == 1,\r\n    'There should only be one entity range within this removal range.',\r\n  );\r\n\r\n  const entityRange = entityRanges[0];\r\n\r\n  // For `IMMUTABLE` entity types, we will remove the entire entity range.\r\n  if (mutability === 'IMMUTABLE') {\r\n    return selectionState.merge({\r\n      anchorOffset: entityRange.start,\r\n      focusOffset: entityRange.end,\r\n      isBackward: false,\r\n    }) as any;\r\n  }\r\n\r\n  // For `SEGMENTED` entity types, determine the appropriate segment to\r\n  // remove.\r\n  if (!isEntireSelectionWithinEntity) {\r\n    if (isEntityAtStart) {\r\n      end = entityRange.end;\r\n    } else {\r\n      start = entityRange.start;\r\n    }\r\n  }\r\n\r\n  const removalRange = DraftEntitySegments.getRemovalRange(\r\n    start,\r\n    end,\r\n    block.getText().slice(entityRange.start, entityRange.end),\r\n    entityRange.start,\r\n    direction,\r\n  );\r\n\r\n  return selectionState.merge({\r\n    anchorOffset: removalRange.start,\r\n    focusOffset: removalRange.end,\r\n    isBackward: false,\r\n  }) as any;\r\n}\r\n\r\nexport default  getCharacterRemovalRange;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  {DraftRange} from './DraftRange';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * Obtain the start and end positions of the range that has the\r\n * specified entity applied to it.\r\n *\r\n * Entity keys are applied only to contiguous stretches of text, so this\r\n * method searches for the first instance of the entity key and returns\r\n * the subsequent range.\r\n */\r\nfunction getRangesForDraftEntity(\r\n  block: BlockNodeRecord,\r\n  key: string,\r\n): Array<DraftRange> {\r\n  const ranges = [];\r\n  block.findEntityRanges(\r\n    c => c.getEntity() === key,\r\n    (start, end) => {\r\n      ranges.push({start, end});\r\n    },\r\n  );\r\n\r\n  invariant(!!ranges.length, 'Entity key not found in this range.');\r\n\r\n  return ranges;\r\n}\r\n\r\nexport default  getRangesForDraftEntity;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nconst seenKeys = {};\r\nconst MULTIPLIER = Math.pow(2, 32);\r\n\r\nfunction generateRandomKey(): string {\r\n  let key;\r\n  while (key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key)) {\r\n    key = Math.floor(Math.random() * MULTIPLIER).toString(32);\r\n  }\r\n  seenKeys[key] = true;\r\n  return key;\r\n}\r\n\r\nexport default  generateRandomKey;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\n\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport {OrderedMap}from 'immutable';\r\n\r\n\r\nconst randomizeContentBlockNodeKeys = (blockMap: BlockMap): BlockMap => {\r\n  const newKeysRef = {};\r\n\r\n  // we keep track of root blocks in order to update subsequent sibling links\r\n  let lastRootBlock: ContentBlockNode;\r\n\r\n  return OrderedMap(\r\n    blockMap\r\n      .withMutations(blockMapState => {\r\n        blockMapState.forEach((block:any, index) => {\r\n          const oldKey = block.getKey();\r\n          const nextKey = block.getNextSiblingKey();\r\n          const prevKey = block.getPrevSiblingKey();\r\n          const childrenKeys = block.getChildKeys();\r\n          const parentKey = block.getParentKey();\r\n\r\n          // new key that we will use to build linking\r\n          const key = generateRandomKey();\r\n\r\n          // we will add it here to re-use it later\r\n          newKeysRef[oldKey] = key;\r\n\r\n          if (nextKey) {\r\n            const nextBlock = blockMapState.get(nextKey);\r\n            if (nextBlock) {\r\n              blockMapState.setIn([nextKey, 'prevSibling'], key);\r\n            } else {\r\n              // this can happen when generating random keys for fragments\r\n              blockMapState.setIn([oldKey, 'nextSibling'], null);\r\n            }\r\n          }\r\n\r\n          if (prevKey) {\r\n            const prevBlock = blockMapState.get(prevKey);\r\n            if (prevBlock) {\r\n              blockMapState.setIn([prevKey, 'nextSibling'], key);\r\n            } else {\r\n              // this can happen when generating random keys for fragments\r\n              blockMapState.setIn([oldKey, 'prevSibling'], null);\r\n            }\r\n          }\r\n\r\n          if (parentKey && blockMapState.get(parentKey)) {\r\n            const parentBlock:any = blockMapState.get(parentKey);\r\n            const parentChildrenList = parentBlock.getChildKeys();\r\n            blockMapState.setIn(\r\n              [parentKey, 'children'],\r\n              parentChildrenList.set(\r\n                parentChildrenList.indexOf(block.getKey()),\r\n                key,\r\n              ),\r\n            );\r\n          } else {\r\n            // blocks will then be treated as root block nodes\r\n            blockMapState.setIn([oldKey, 'parent'], null);\r\n\r\n            if (lastRootBlock) {\r\n              blockMapState.setIn([lastRootBlock.getKey(), 'nextSibling'], key);\r\n              blockMapState.setIn(\r\n                [oldKey, 'prevSibling'],\r\n                newKeysRef[lastRootBlock.getKey()],\r\n              );\r\n            }\r\n\r\n            lastRootBlock = blockMapState.get(oldKey) as any ;\r\n          }\r\n\r\n          childrenKeys.forEach(childKey => {\r\n            const childBlock = blockMapState.get(childKey);\r\n            if (childBlock) {\r\n              blockMapState.setIn([childKey, 'parent'], key);\r\n            } else {\r\n              blockMapState.setIn(\r\n                [oldKey, 'children'],\r\n                block.getChildKeys().filter(child => child !== childKey),\r\n              );\r\n            }\r\n          });\r\n        });\r\n      })\r\n      .toArray()\r\n      .map(block => [\r\n        newKeysRef[block.getKey()],\r\n        block.set('key', newKeysRef[block.getKey()]),\r\n      ]),\r\n  );\r\n};\r\n\r\nconst randomizeContentBlockKeys = (blockMap: BlockMap): BlockMap => {\r\n  return OrderedMap(\r\n    blockMap.toArray().map(block => {\r\n      const key = generateRandomKey();\r\n      return [key, block.set('key', key)];\r\n    }),\r\n  );\r\n};\r\n\r\nconst randomizeBlockMapKeys = (blockMap: BlockMap): BlockMap => {\r\n  const isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\r\n\r\n  if (!isTreeBasedBlockMap) {\r\n    return randomizeContentBlockKeys(blockMap);\r\n  }\r\n\r\n  return randomizeContentBlockNodeKeys(blockMap);\r\n};\r\n\r\nexport default  randomizeBlockMapKeys;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport {EntityMap} from '../immutable/EntityMap';\r\nimport  SelectionState from '../immutable/SelectionState';\r\nimport  {List} from 'immutable';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\n\r\nimport findRangesImmutable from '../immutable/findRangesImmutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nfunction removeEntitiesAtEdges(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n): ContentState {\r\n  const blockMap = contentState.getBlockMap();\r\n  const entityMap = contentState.getEntityMap();\r\n\r\n  const updatedBlocks = {};\r\n\r\n  const startKey = selectionState.getStartKey();\r\n  const startOffset = selectionState.getStartOffset();\r\n  const startBlock = blockMap.get(startKey);\r\n  const updatedStart = removeForBlock(entityMap, startBlock, startOffset);\r\n\r\n  if (updatedStart !== startBlock) {\r\n    updatedBlocks[startKey] = updatedStart;\r\n  }\r\n\r\n  const endKey = selectionState.getEndKey();\r\n  const endOffset = selectionState.getEndOffset();\r\n  let endBlock = blockMap.get(endKey);\r\n  if (startKey === endKey) {\r\n    endBlock = updatedStart;\r\n  }\r\n\r\n  const updatedEnd = removeForBlock(entityMap, endBlock, endOffset);\r\n\r\n  if (updatedEnd !== endBlock) {\r\n    updatedBlocks[endKey] = updatedEnd;\r\n  }\r\n\r\n  if (!Object.keys(updatedBlocks).length) {\r\n    return contentState.set('selectionAfter', selectionState) as any;\r\n  }\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.merge(updatedBlocks),\r\n    selectionAfter: selectionState,\r\n  }) as any;\r\n}\r\n\r\n/**\r\n * Given a list of characters and an offset that is in the middle of an entity,\r\n * returns the start and end of the entity that is overlapping the offset.\r\n * Note: This method requir es that the offset be in an entity range.\r\n */\r\nfunction getRemovalRange(\r\n  characters: List<CharacterMetadata>,\r\n  entityKey: string,\r\n  offset: number,\r\n): {\r\n  start: number,\r\n  end: number,\r\n} {\r\n  let removalRange;\r\n\r\n  // Iterates through a list looking for ranges of matching items\r\n  // based on the 'isEqual' callback.\r\n  // Then instead of returning the result, call the 'found' callback\r\n  // with each range.\r\n  // Then filters those ranges based on the 'filter' callback\r\n  //\r\n  // Here we use it to find ranges of characters with the same entity key.\r\n  findRangesImmutable(\r\n    characters, // the list to iterate through\r\n    (a, b) => a.getEntity() === b.getEntity(), // 'isEqual' callback\r\n    element => element.getEntity() === entityKey, // 'filter' callback\r\n    (start: number, end: number) => {\r\n      // 'found' callback\r\n      if (start <= offset && end >= offset) {\r\n        // this entity overlaps the offset index\r\n        removalRange = {start, end};\r\n      }\r\n    },\r\n  );\r\n  invariant(\r\n    typeof removalRange === 'object',\r\n    'Removal range must exist within character list.',\r\n  );\r\n  return removalRange;\r\n}\r\n\r\nfunction removeForBlock(\r\n  entityMap: EntityMap,\r\n  block: BlockNodeRecord,\r\n  offset: number,\r\n): BlockNodeRecord {\r\n  let chars = block.getCharacterList();\r\n  const charBefore = offset > 0 ? chars.get(offset - 1) : undefined;\r\n  const charAfter = offset < chars.count() ? chars.get(offset) : undefined;\r\n  const entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;\r\n  const entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;\r\n\r\n  if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {\r\n    const entity = entityMap.__get(entityAfterCursor);\r\n    if (entity.getMutability() !== 'MUTABLE') {\r\n      let {start, end} = getRemovalRange(chars, entityAfterCursor, offset);\r\n      let current;\r\n      while (start < end) {\r\n        current = chars.get(start);\r\n        chars = chars.set(start, CharacterMetadata.applyEntity(current, null));\r\n        start++;\r\n      }\r\n      return block.set('characterList', chars) as any;\r\n    }\r\n  }\r\n\r\n  return block;\r\n}\r\n\r\nexport default  removeEntitiesAtEdges;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport SelectionState from '../immutable/SelectionState';\r\n\r\nimport randomizeBlockMapKeys from './randomizeBlockMapKeys';\r\nimport removeEntitiesAtEdges from './removeEntitiesAtEdges';\r\n\r\nconst getContentStateFragment = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n): BlockMap => {\r\n  const startKey = selectionState.getStartKey();\r\n  const startOffset = selectionState.getStartOffset();\r\n  const endKey = selectionState.getEndKey();\r\n  const endOffset = selectionState.getEndOffset();\r\n\r\n  // Edge entities should be stripped to ensure that we don't preserve\r\n  // invalid partial entities when the fragment is reused. We do, however,\r\n  // preserve entities that are entirely within the selection range.\r\n  const contentWithoutEdgeEntities = removeEntitiesAtEdges(\r\n    contentState,\r\n    selectionState,\r\n  );\r\n\r\n  const blockMap = contentWithoutEdgeEntities.getBlockMap();\r\n  const blockKeys = blockMap.keySeq();\r\n  const startIndex = blockKeys.indexOf(startKey);\r\n  const endIndex = blockKeys.indexOf(endKey) + 1;\r\n\r\n  return randomizeBlockMapKeys(\r\n    blockMap.slice(startIndex, endIndex).map((block, blockKey) => {\r\n      const text = block.getText();\r\n      const chars = block.getCharacterList();\r\n\r\n      if (startKey === endKey) {\r\n        return block.merge({\r\n          text: text.slice(startOffset, endOffset),\r\n          characterList: chars.slice(startOffset, endOffset),\r\n        });\r\n      }\r\n\r\n      if (blockKey === startKey) {\r\n        return block.merge({\r\n          text: text.slice(startOffset),\r\n          characterList: chars.slice(startOffset),\r\n        });\r\n      }\r\n\r\n      if (blockKey === endKey) {\r\n        return block.merge({\r\n          text: text.slice(0, endOffset),\r\n          characterList: chars.slice(0, endOffset),\r\n        });\r\n      }\r\n\r\n      return block;\r\n    }) as any,\r\n  );\r\n};\r\n\r\nexport default  getContentStateFragment;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {List} from 'immutable';\r\n\r\n/**\r\n * Maintain persistence for target list when appending and prepending.\r\n */\r\nfunction insertIntoList<T>(\r\n  targetListArg: List<T>,\r\n  toInsert: List<T>,\r\n  offset: number,\r\n): List<T> {\r\n  let targetList = targetListArg;\r\n  if (offset === targetList.count()) {\r\n    toInsert.forEach(c => {\r\n      targetList = targetList.push(c);\r\n    });\r\n  } else if (offset === 0) {\r\n    toInsert.reverse().forEach(c => {\r\n      targetList = targetList.unshift(c);\r\n    });\r\n  } else {\r\n    const head = targetList.slice(0, offset);\r\n    const tail = targetList.slice(offset);\r\n    targetList = head.concat(toInsert, tail).toList();\r\n  }\r\n  return targetList;\r\n}\r\n\r\nexport default  insertIntoList;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {BlockMap} from '../immutable/BlockMap';\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport BlockMapBuilder from '../immutable/BlockMapBuilder';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport {List  } from 'immutable';\r\nimport insertIntoList from './insertIntoList';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport randomizeBlockMapKeys from './randomizeBlockMapKeys';\r\n\r\n\r\nexport type BlockDataMergeBehavior =\r\n  | 'REPLACE_WITH_NEW_DATA'\r\n  | 'MERGE_OLD_DATA_TO_NEW_DATA';\r\n\r\nconst updateExistingBlock = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  blockMap: BlockMap,\r\n  fragmentBlock: BlockNodeRecord,\r\n  targetKey: string,\r\n  targetOffset: number,\r\n  mergeBlockData: BlockDataMergeBehavior = 'REPLACE_WITH_NEW_DATA',\r\n): ContentState => {\r\n  const targetBlock = blockMap.get(targetKey);\r\n  const text = targetBlock.getText();\r\n  const chars = targetBlock.getCharacterList();\r\n  const finalKey = targetKey;\r\n  const finalOffset = targetOffset + fragmentBlock.getText().length;\r\n\r\n  let data = null;\r\n\r\n  switch (mergeBlockData) {\r\n    case 'MERGE_OLD_DATA_TO_NEW_DATA':\r\n      data = fragmentBlock.getData().merge(targetBlock.getData());\r\n      break;\r\n    case 'REPLACE_WITH_NEW_DATA':\r\n      data = fragmentBlock.getData();\r\n      break;\r\n  }\r\n\r\n  const newBlock:any = targetBlock.merge({\r\n    text:\r\n      text.slice(0, targetOffset) +\r\n      fragmentBlock.getText() +\r\n      text.slice(targetOffset),\r\n    characterList: insertIntoList(\r\n      chars,\r\n      fragmentBlock.getCharacterList(),\r\n      targetOffset,\r\n    ),\r\n    data,\r\n  });\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.set(targetKey, newBlock),\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState.merge({\r\n      anchorKey: finalKey,\r\n      anchorOffset: finalOffset,\r\n      focusKey: finalKey,\r\n      focusOffset: finalOffset,\r\n      isBackward: false,\r\n    }),\r\n  }) as any;\r\n};\r\n\r\n/**\r\n * Appends text/characterList from the fragment first block to\r\n * target block.\r\n */\r\nconst updateHead = (\r\n  block: BlockNodeRecord,\r\n  targetOffset: number,\r\n  fragment: BlockMap,\r\n): BlockNodeRecord => {\r\n  const text = block.getText();\r\n  const chars = block.getCharacterList();\r\n\r\n  // Modify head portion of block.\r\n  const headText = text.slice(0, targetOffset);\r\n  const headCharacters = chars.slice(0, targetOffset);\r\n  const appendToHead = fragment.first();\r\n\r\n  return block.merge({\r\n    text: headText + appendToHead.getText(),\r\n    characterList: headCharacters.concat(appendToHead.getCharacterList()),\r\n    type: headText ? block.getType() : appendToHead.getType(),\r\n    data: appendToHead.getData(),\r\n  }) as any;\r\n};\r\n\r\n/**\r\n * Appends offset text/characterList from the target block to the last\r\n * fragment block.\r\n */\r\nconst updateTail = (\r\n  block: BlockNodeRecord,\r\n  targetOffset: number,\r\n  fragment: BlockMap,\r\n): BlockNodeRecord => {\r\n  // Modify tail portion of block.\r\n  const text = block.getText();\r\n  const chars = block.getCharacterList();\r\n\r\n  // Modify head portion of block.\r\n  const blockSize = text.length;\r\n  const tailText = text.slice(targetOffset, blockSize);\r\n  const tailCharacters = chars.slice(targetOffset, blockSize);\r\n  const prependToTail = fragment.last();\r\n\r\n  return prependToTail.merge({\r\n    text: prependToTail.getText() + tailText,\r\n    characterList: prependToTail.getCharacterList().concat(tailCharacters),\r\n    data: prependToTail.getData(),\r\n  }) as any;\r\n};\r\n\r\nconst getRootBlocks = (\r\n  block: ContentBlockNode,\r\n  blockMap: BlockMap,\r\n): Array<string> => {\r\n  const headKey = block.getKey();\r\n  let rootBlock:any = block;\r\n  const rootBlocks = [];\r\n\r\n  // sometimes the fragment head block will not be part of the blockMap itself this can happen when\r\n  // the fragment head is used to update the target block, however when this does not happen we need\r\n  // to make sure that we include it on the rootBlocks since the first block of a fragment is always a\r\n  // fragment root block\r\n  if (blockMap.get(headKey)) {\r\n    rootBlocks.push(headKey);\r\n  }\r\n\r\n  while (rootBlock && rootBlock.getNextSiblingKey()) {\r\n    const lastSiblingKey = rootBlock.getNextSiblingKey();\r\n\r\n    if (!lastSiblingKey) {\r\n      break;\r\n    }\r\n\r\n    rootBlocks.push(lastSiblingKey);\r\n    rootBlock = blockMap.get(lastSiblingKey);\r\n  }\r\n\r\n  return rootBlocks;\r\n};\r\n\r\nconst updateBlockMapLinks = (\r\n  blockMap: BlockMap,\r\n  originalBlockMap: BlockMap,\r\n  targetBlock: ContentBlockNode,\r\n  fragmentHeadBlock: ContentBlockNode,\r\n): BlockMap => {\r\n  return blockMap.withMutations(blockMapState => {\r\n    const targetKey = targetBlock.getKey();\r\n    const headKey = fragmentHeadBlock.getKey();\r\n    const targetNextKey = targetBlock.getNextSiblingKey();\r\n    const targetParentKey = targetBlock.getParentKey();\r\n    const fragmentRootBlocks = getRootBlocks(fragmentHeadBlock, blockMap);\r\n    const lastRootFragmentBlockKey =\r\n      fragmentRootBlocks[fragmentRootBlocks.length - 1];\r\n\r\n    if (blockMapState.get(headKey)) {\r\n      // update the fragment head when it is part of the blockMap otherwise\r\n      blockMapState.setIn([targetKey, 'nextSibling'], headKey);\r\n      blockMapState.setIn([headKey, 'prevSibling'], targetKey);\r\n    } else {\r\n      // update the target block that had the fragment head contents merged into it\r\n      blockMapState.setIn(\r\n        [targetKey, 'nextSibling'],\r\n        fragmentHeadBlock.getNextSiblingKey(),\r\n      );\r\n      blockMapState.setIn(\r\n        [fragmentHeadBlock.getNextSiblingKey(), 'prevSibling'],\r\n        targetKey,\r\n      );\r\n    }\r\n\r\n    // update the last root block fragment\r\n    blockMapState.setIn(\r\n      [lastRootFragmentBlockKey, 'nextSibling'],\r\n      targetNextKey,\r\n    );\r\n\r\n    // update the original target next block\r\n    if (targetNextKey) {\r\n      blockMapState.setIn(\r\n        [targetNextKey, 'prevSibling'],\r\n        lastRootFragmentBlockKey,\r\n      );\r\n    }\r\n\r\n    // update fragment parent links\r\n    fragmentRootBlocks.forEach(blockKey =>\r\n      blockMapState.setIn([blockKey, 'parent'], targetParentKey),\r\n    );\r\n\r\n    // update targetBlock parent child links\r\n    if (targetParentKey) {\r\n      const targetParent:any = blockMap.get(targetParentKey);\r\n      const originalTargetParentChildKeys = targetParent.getChildKeys();\r\n\r\n      const targetBlockIndex = originalTargetParentChildKeys.indexOf(targetKey);\r\n      const insertionIndex = targetBlockIndex + 1;\r\n\r\n      const newChildrenKeysArray = originalTargetParentChildKeys.toArray();\r\n\r\n      // insert fragment children\r\n      newChildrenKeysArray.splice(insertionIndex, 0, ...fragmentRootBlocks);\r\n\r\n      blockMapState.setIn(\r\n        [targetParentKey, 'children'],\r\n        List(newChildrenKeysArray),\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nconst insertFragment = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  blockMap: BlockMap,\r\n  fragment: BlockMap,\r\n  targetKey: string,\r\n  targetOffset: number,\r\n): ContentState => {\r\n  const isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\r\n  const newBlockArr = [];\r\n  const fragmentSize = fragment.size;\r\n  const target:any = blockMap.get(targetKey);\r\n  const head:any = fragment.first();\r\n  const tail = fragment.last();\r\n  const finalOffset = tail.getLength();\r\n  const finalKey = tail.getKey();\r\n  const shouldNotUpdateFromFragmentBlock =\r\n    isTreeBasedBlockMap &&\r\n    (!target.getChildKeys().isEmpty() || !head.getChildKeys().isEmpty());\r\n\r\n  blockMap.forEach((block, blockKey) => {\r\n    if (blockKey !== targetKey) {\r\n      newBlockArr.push(block);\r\n      return;\r\n    }\r\n\r\n    if (shouldNotUpdateFromFragmentBlock) {\r\n      newBlockArr.push(block);\r\n    } else {\r\n      newBlockArr.push(updateHead(block, targetOffset, fragment));\r\n    }\r\n\r\n    // Insert fragment blocks after the head and before the tail.\r\n    fragment\r\n      // when we are updating the target block with the head fragment block we skip the first fragment\r\n      // head since its contents have already been merged with the target block otherwise we include\r\n      // the whole fragment\r\n      .slice(shouldNotUpdateFromFragmentBlock ? 0 : 1, fragmentSize - 1)\r\n      .forEach(fragmentBlock => newBlockArr.push(fragmentBlock));\r\n\r\n    // update tail\r\n    newBlockArr.push(updateTail(block, targetOffset, fragment));\r\n  });\r\n\r\n  let updatedBlockMap = BlockMapBuilder.createFromArray(newBlockArr);\r\n\r\n  if (isTreeBasedBlockMap) {\r\n    updatedBlockMap = updateBlockMapLinks(\r\n      updatedBlockMap,\r\n      blockMap,\r\n      target,\r\n      head,\r\n    );\r\n  }\r\n\r\n  return contentState.merge({\r\n    blockMap: updatedBlockMap,\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState.merge({\r\n      anchorKey: finalKey,\r\n      anchorOffset: finalOffset,\r\n      focusKey: finalKey,\r\n      focusOffset: finalOffset,\r\n      isBackward: false,\r\n    }),\r\n  }) as any;\r\n};\r\n\r\nconst insertFragmentIntoContentState = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  fragmentBlockMap: BlockMap,\r\n  mergeBlockData: BlockDataMergeBehavior = 'REPLACE_WITH_NEW_DATA',\r\n): ContentState => {\r\n  invariant(\r\n    selectionState.isCollapsed(),\r\n    '`insertFragment` should only be called with a collapsed selection state.',\r\n  );\r\n\r\n  const blockMap = contentState.getBlockMap();\r\n  const fragment = randomizeBlockMapKeys(fragmentBlockMap);\r\n  const targetKey = selectionState.getStartKey();\r\n  const targetOffset = selectionState.getStartOffset();\r\n\r\n  const targetBlock = blockMap.get(targetKey);\r\n\r\n  if (targetBlock instanceof ContentBlockNode) {\r\n    invariant(\r\n      targetBlock.getChildKeys().isEmpty(),\r\n      '`insertFragment` should not be called when a container node is selected.',\r\n    );\r\n  }\r\n\r\n  // When we insert a fragment with a single block we simply update the target block\r\n  // with the contents of the inserted fragment block\r\n  if (fragment.size === 1) {\r\n    return updateExistingBlock(\r\n      contentState,\r\n      selectionState,\r\n      blockMap,\r\n      fragment.first(),\r\n      targetKey,\r\n      targetOffset,\r\n      mergeBlockData,\r\n    );\r\n  }\r\n\r\n  return insertFragment(\r\n    contentState,\r\n    selectionState,\r\n    blockMap,\r\n    fragment,\r\n    targetKey,\r\n    targetOffset,\r\n  );\r\n};\r\n\r\nexport default  insertFragmentIntoContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport { Map } from 'immutable';\r\n\r\n\r\nfunction modifyBlockForContentState(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  operation: (block: BlockNodeRecord) => BlockNodeRecord,\r\n): ContentState {\r\n  const startKey = selectionState.getStartKey();\r\n  const endKey = selectionState.getEndKey();\r\n  const blockMap = contentState.getBlockMap();\r\n  const newBlocks = blockMap\r\n    .toSeq()\r\n    .skipUntil((_, k) => k === startKey)\r\n    .takeUntil((_, k) => k === endKey)\r\n    .concat(Map([[endKey, blockMap.get(endKey)]]))\r\n    .map(operation);\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.merge(newBlocks),\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState,\r\n  }) as any ;\r\n}\r\n\r\nexport default  modifyBlockForContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\nimport  {BlockMap} from '../../immutable/BlockMap';\r\nimport  {BlockNodeRecord} from '../../immutable/BlockNodeRecord';\r\n\r\nimport ContentBlockNode from '../../immutable/ContentBlockNode';\r\n\r\nconst getNextDelimiterBlockKey = (\r\n  block: BlockNodeRecord,\r\n  blockMap: BlockMap,\r\n): string => {\r\n  const isExperimentalTreeBlock = block instanceof ContentBlockNode;\r\n\r\n  if (!isExperimentalTreeBlock) {\r\n    return null;\r\n  }\r\n\r\n  const nextSiblingKey = block.getNextSiblingKey();\r\n\r\n  if (nextSiblingKey) {\r\n    return nextSiblingKey;\r\n  }\r\n\r\n  const parent = block.getParentKey();\r\n\r\n  if (!parent) {\r\n    return null;\r\n  }\r\n\r\n  let nextNonDescendantBlock = blockMap.get(parent);\r\n  while (\r\n    nextNonDescendantBlock &&\r\n    !nextNonDescendantBlock.getNextSiblingKey()\r\n  ) {\r\n    const parentKey = nextNonDescendantBlock.getParentKey();\r\n    nextNonDescendantBlock = parentKey ? blockMap.get(parentKey) : null;\r\n  }\r\n\r\n  if (!nextNonDescendantBlock) {\r\n    return null;\r\n  }\r\n\r\n  return nextNonDescendantBlock.getNextSiblingKey();\r\n};\r\n\r\nexport default  getNextDelimiterBlockKey;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport  CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport getNextDelimiterBlockKey from './exploration/getNextDelimiterBlockKey';\r\nimport {List, Map}from 'immutable';\r\n\r\n\r\nconst transformBlock = (\r\n  key: string,\r\n  blockMap: BlockMap,\r\n  func: (block: ContentBlockNode) => ContentBlockNode,\r\n): void => {\r\n  if (!key) {\r\n    return;\r\n  }\r\n\r\n  const block:any = blockMap.get(key);\r\n\r\n  if (!block) {\r\n    return;\r\n  }\r\n\r\n  blockMap.set(key, func(block));\r\n};\r\n\r\n/**\r\n * Ancestors needs to be preserved when there are non selected\r\n * children to make sure we do not leave any orphans behind\r\n */\r\nconst getAncestorsKeys = (\r\n  blockKey: string,\r\n  blockMap: BlockMap,\r\n): Array<string> => {\r\n  const parents = [];\r\n\r\n  if (!blockKey) {\r\n    return parents;\r\n  }\r\n\r\n  let blockNode = blockMap.get(blockKey);\r\n  while (blockNode && blockNode.getParentKey()) {\r\n    const parentKey = blockNode.getParentKey();\r\n    if (parentKey) {\r\n      parents.push(parentKey);\r\n    }\r\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\r\n  }\r\n\r\n  return parents;\r\n};\r\n\r\n/**\r\n * Get all next delimiter keys until we hit a root delimiter and return\r\n * an array of key references\r\n */\r\nconst getNextDelimitersBlockKeys = (\r\n  block: ContentBlockNode,\r\n  blockMap: BlockMap,\r\n): Array<string> => {\r\n  const nextDelimiters = [];\r\n\r\n  if (!block) {\r\n    return nextDelimiters;\r\n  }\r\n\r\n  let nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\r\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\r\n    const block = blockMap.get(nextDelimiter);\r\n    nextDelimiters.push(nextDelimiter);\r\n\r\n    // we do not need to keep checking all root node siblings, just the first occurance\r\n    nextDelimiter = block.getParentKey()\r\n      ? getNextDelimiterBlockKey(block, blockMap)\r\n      : null;\r\n  }\r\n\r\n  return nextDelimiters;\r\n};\r\n\r\nconst getNextValidSibling = (\r\n  block: ContentBlockNode,\r\n  blockMap: BlockMap,\r\n  originalBlockMap: BlockMap,\r\n): string => {\r\n  if (!block) {\r\n    return null;\r\n  }\r\n\r\n  // note that we need to make sure we refer to the original block since this\r\n  // function is called within a withMutations\r\n  let nextValidSiblingKey = originalBlockMap\r\n    .get(block.getKey())\r\n    .getNextSiblingKey();\r\n\r\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\r\n    nextValidSiblingKey =\r\n      originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\r\n  }\r\n\r\n  return nextValidSiblingKey;\r\n};\r\n\r\nconst getPrevValidSibling = (\r\n  block: ContentBlockNode,\r\n  blockMap: BlockMap,\r\n  originalBlockMap: BlockMap,\r\n): string => {\r\n  if (!block) {\r\n    return null;\r\n  }\r\n\r\n  // note that we need to make sure we refer to the original block since this\r\n  // function is called within a withMutations\r\n  let prevValidSiblingKey = originalBlockMap\r\n    .get(block.getKey())\r\n    .getPrevSiblingKey();\r\n\r\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\r\n    prevValidSiblingKey =\r\n      originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\r\n  }\r\n\r\n  return prevValidSiblingKey;\r\n};\r\n\r\nconst updateBlockMapLinks = (\r\n  blockMap: BlockMap,\r\n  startBlock: ContentBlockNode,\r\n  endBlock: ContentBlockNode,\r\n  originalBlockMap: BlockMap,\r\n): BlockMap => {\r\n  return blockMap.withMutations(blocks => {\r\n    // update start block if its retained\r\n    transformBlock(startBlock.getKey(), blocks, block =>\r\n      block.merge({\r\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n      }) as any,\r\n    );\r\n\r\n    // update endblock if its retained\r\n    transformBlock(endBlock.getKey(), blocks, block =>\r\n      block.merge({\r\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n      }) as any,\r\n    );\r\n\r\n    // update start block parent ancestors\r\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(parentKey =>\r\n      transformBlock(parentKey, blocks, block =>\r\n        block.merge({\r\n          children: block.getChildKeys().filter(key => blocks.get(key) as any),\r\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n        }) as any,\r\n      ),\r\n    );\r\n\r\n    // update start block next - can only happen if startBlock == endBlock\r\n    transformBlock(startBlock.getNextSiblingKey(), blocks, block =>\r\n      block.merge({\r\n        prevSibling: startBlock.getPrevSiblingKey(),\r\n      }) as any,\r\n    );\r\n\r\n    // update start block prev\r\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, block =>\r\n      block.merge({\r\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n      }) as any,\r\n    );\r\n\r\n    // update end block next\r\n    transformBlock(endBlock.getNextSiblingKey(), blocks, block =>\r\n      block.merge({\r\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n      }) as any,\r\n    );\r\n\r\n    // update end block prev\r\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, block =>\r\n      block.merge({\r\n        nextSibling: endBlock.getNextSiblingKey(),\r\n      }) as any,\r\n    );\r\n\r\n    // update end block parent ancestors\r\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(parentKey => {\r\n      transformBlock(parentKey, blocks, block =>\r\n        block.merge({\r\n          children: block.getChildKeys().filter(key => blocks.get(key) as any),\r\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n        }) as any,\r\n      );\r\n    });\r\n\r\n    // update next delimiters all the way to a root delimiter\r\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(\r\n      delimiterKey =>\r\n        transformBlock(delimiterKey, blocks, block =>\r\n          block.merge({\r\n            nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\r\n            prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),\r\n          }) as any,\r\n        ),\r\n    );\r\n\r\n    // if parent (startBlock) was deleted\r\n    if (\r\n      blockMap.get(startBlock.getKey()) == null &&\r\n      blockMap.get(endBlock.getKey()) != null &&\r\n      endBlock.getParentKey() === startBlock.getKey() &&\r\n      endBlock.getPrevSiblingKey() == null\r\n    ) {\r\n      const prevSiblingKey = startBlock.getPrevSiblingKey();\r\n      // endBlock becomes next sibling of parent's prevSibling\r\n      transformBlock(endBlock.getKey(), blocks, block =>\r\n        block.merge({\r\n          prevSibling: prevSiblingKey,\r\n        }) as any,\r\n      );\r\n      transformBlock(prevSiblingKey, blocks, block =>\r\n        block.merge({\r\n          nextSibling: endBlock.getKey(),\r\n        }) as any,\r\n      );\r\n\r\n      // Update parent for previous parent's children, and children for that parent\r\n      const prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;\r\n      const newParentKey = prevSibling ? prevSibling.getParentKey() : null;\r\n      startBlock.getChildKeys().forEach(childKey => {\r\n        transformBlock(childKey, blocks, block =>\r\n          block.merge({\r\n            parent: newParentKey, // set to null if there is no parent\r\n          }) as any,\r\n        );\r\n      });\r\n      if (newParentKey != null) {\r\n        const newParent:any = blockMap.get(newParentKey);\r\n        transformBlock(newParentKey, blocks, block =>\r\n          block.merge({\r\n            children: newParent\r\n              .getChildKeys() \r\n              .concat(startBlock.getChildKeys()),\r\n          }) as any,\r\n        );\r\n      }\r\n\r\n      // last child of deleted parent should point to next sibling\r\n      transformBlock(\r\n        startBlock.getChildKeys().find(key => {\r\n          const block = (blockMap.get(key) as ContentBlockNode);\r\n          return block.getNextSiblingKey() === null;\r\n        }),\r\n        blocks,\r\n        block =>\r\n          block.merge({\r\n            nextSibling: startBlock.getNextSiblingKey(),\r\n          }) as any,\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nconst removeRangeFromContentState = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n): ContentState => {\r\n  if (selectionState.isCollapsed()) {\r\n    return contentState;\r\n  }\r\n\r\n  const blockMap = contentState.getBlockMap();\r\n  const startKey = selectionState.getStartKey();\r\n  const startOffset = selectionState.getStartOffset();\r\n  const endKey = selectionState.getEndKey();\r\n  const endOffset = selectionState.getEndOffset();\r\n\r\n  const startBlock:any = blockMap.get(startKey);\r\n  const endBlock:any = blockMap.get(endKey);\r\n\r\n  // we assume that ContentBlockNode and ContentBlocks are not mixed together\r\n  const isExperimentalTreeBlock = startBlock instanceof ContentBlockNode;\r\n\r\n  // used to retain blocks that should not be deleted to avoid orphan children\r\n  let parentAncestors = [];\r\n\r\n  if (isExperimentalTreeBlock) {\r\n    const endBlockchildrenKeys = endBlock.getChildKeys();\r\n    const endBlockAncestors = getAncestorsKeys(endKey, blockMap);\r\n\r\n    // endBlock has unselected siblings so we can not remove its ancestors parents\r\n    if (endBlock.getNextSiblingKey()) {\r\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\r\n    }\r\n\r\n    // endBlock has children so can not remove this block or any of its ancestors\r\n    if (!endBlockchildrenKeys.isEmpty()) {\r\n      parentAncestors = parentAncestors.concat(\r\n        endBlockAncestors.concat([endKey]),\r\n      );\r\n    }\r\n\r\n    // we need to retain all ancestors of the next delimiter block\r\n    parentAncestors = parentAncestors.concat(\r\n      getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap),\r\n    );\r\n  }\r\n\r\n  let characterList;\r\n\r\n  if (startBlock === endBlock) {\r\n    characterList = removeFromList(\r\n      startBlock.getCharacterList(),\r\n      startOffset,\r\n      endOffset,\r\n    );\r\n  } else {\r\n    characterList = startBlock\r\n      .getCharacterList()\r\n      .slice(0, startOffset)\r\n      .concat(endBlock.getCharacterList().slice(endOffset));\r\n  }\r\n\r\n  const modifiedStart = startBlock.merge({\r\n    text:\r\n      startBlock.getText().slice(0, startOffset) +\r\n      endBlock.getText().slice(endOffset),\r\n    characterList,\r\n  });\r\n\r\n  // If cursor (collapsed) is at the start of the first child, delete parent\r\n  // instead of child\r\n  const shouldDeleteParent =\r\n    isExperimentalTreeBlock &&\r\n    startOffset === 0 &&\r\n    endOffset === 0 &&\r\n    endBlock.getParentKey() === startKey &&\r\n    endBlock.getPrevSiblingKey() == null;\r\n  const newBlocks:any = shouldDeleteParent\r\n    ? Map([[startKey, null]])\r\n    : blockMap\r\n        .toSeq()\r\n        .skipUntil((_, k) => k === startKey)\r\n        .takeUntil((_, k) => k === endKey)\r\n        .filter((_, k) => parentAncestors.indexOf(k) === -1)\r\n        .concat(Map([[endKey, null]]))\r\n        .map((_, k) => {\r\n          return k === startKey ? modifiedStart : null;\r\n        });\r\n  let updatedBlockMap:any = blockMap.merge(newBlocks).filter(block => !!block);\r\n\r\n  // Only update tree block pointers if the range is across blocks\r\n  if (isExperimentalTreeBlock && startBlock !== endBlock) {\r\n    updatedBlockMap = updateBlockMapLinks(\r\n      updatedBlockMap,\r\n      startBlock,\r\n      endBlock,\r\n      blockMap,\r\n    );\r\n  }\r\n\r\n  return contentState.merge({\r\n    blockMap: updatedBlockMap,\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState.merge({\r\n      anchorKey: startKey,\r\n      anchorOffset: startOffset,\r\n      focusKey: startKey,\r\n      focusOffset: startOffset,\r\n      isBackward: false,\r\n    }),\r\n  }) as any;\r\n};\r\n\r\n/**\r\n * Maintain persistence for target list when removing characters on the\r\n * head and tail of the character list.\r\n */\r\nconst removeFromList = (\r\n  targetList: List<CharacterMetadata>,\r\n  startOffset: number,\r\n  endOffset: number,\r\n): List<CharacterMetadata> => {\r\n  if (startOffset === 0) {\r\n    while (startOffset < endOffset) {\r\n      targetList = targetList.shift();\r\n      startOffset++;\r\n    }\r\n  } else if (endOffset === targetList.count()) {\r\n    while (endOffset > startOffset) {\r\n      targetList = targetList.pop();\r\n      endOffset--;\r\n    }\r\n  } else {\r\n    const head = targetList.slice(0, startOffset);\r\n    const tail = targetList.slice(endOffset);\r\n    targetList = head.concat(tail).toList();\r\n  }\r\n  return targetList;\r\n};\r\n\r\nexport default  removeRangeFromContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport {List, Map}from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport modifyBlockForContentState from './modifyBlockForContentState';\r\n\r\n\r\nconst transformBlock = (\r\n  key: string,\r\n  blockMap: BlockMap,\r\n  func: (block: ContentBlockNode) => ContentBlockNode,\r\n): void => {\r\n  if (!key) {\r\n    return;\r\n  }\r\n\r\n  const block:any = blockMap.get(key);\r\n\r\n  if (!block) {\r\n    return;\r\n  }\r\n\r\n  blockMap.set(key, func(block));\r\n};\r\n\r\nconst updateBlockMapLinks = (\r\n  blockMap: BlockMap,\r\n  originalBlock: ContentBlockNode,\r\n  belowBlock: ContentBlockNode,\r\n): BlockMap => {\r\n  return blockMap.withMutations(blocks => {\r\n    const originalBlockKey = originalBlock.getKey();\r\n    const belowBlockKey = belowBlock.getKey();\r\n\r\n    // update block parent\r\n    transformBlock(originalBlock.getParentKey(), blocks, (block:any) => {\r\n      const parentChildrenList = block.getChildKeys();\r\n      const insertionIndex = parentChildrenList.indexOf(originalBlockKey) + 1;\r\n      const newChildrenArray = parentChildrenList.toArray();\r\n\r\n      newChildrenArray.splice(insertionIndex, 0, belowBlockKey);\r\n\r\n      return block.merge({\r\n        children: List(newChildrenArray),\r\n      });\r\n    });\r\n\r\n    // update original next block\r\n    transformBlock(originalBlock.getNextSiblingKey(), blocks, block =>\r\n      block.merge({\r\n        prevSibling: belowBlockKey,\r\n      }) as any,\r\n    );\r\n\r\n    // update original block\r\n    transformBlock(originalBlockKey, blocks, block =>\r\n      block.merge({\r\n        nextSibling: belowBlockKey,\r\n      }) as any,\r\n    );\r\n\r\n    // update below block\r\n    transformBlock(belowBlockKey, blocks, block =>\r\n      block.merge({\r\n        prevSibling: originalBlockKey,\r\n      }) as any,\r\n    );\r\n  });\r\n};\r\n\r\nconst splitBlockInContentState = (\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n): ContentState => {\r\n  invariant(selectionState.isCollapsed(), 'Selection range must be collapsed.');\r\n\r\n  const key = selectionState.getAnchorKey();\r\n  const blockMap = contentState.getBlockMap();\r\n  const blockToSplit:any = blockMap.get(key);\r\n  const text = blockToSplit.getText();\r\n\r\n  if (!text) {\r\n    const blockType = blockToSplit.getType();\r\n    if (\r\n      blockType === 'unordered-list-item' ||\r\n      blockType === 'ordered-list-item'\r\n    ) {\r\n      return modifyBlockForContentState(contentState, selectionState, block =>\r\n        block.merge({type: 'unstyled', depth: 0}) as any,\r\n      );\r\n    }\r\n  }\r\n\r\n  const offset = selectionState.getAnchorOffset();\r\n  const chars = blockToSplit.getCharacterList();\r\n  const keyBelow = generateRandomKey();\r\n  const isExperimentalTreeBlock = blockToSplit instanceof ContentBlockNode;\r\n\r\n  const blockAbove = blockToSplit.merge({\r\n    text: text.slice(0, offset),\r\n    characterList: chars.slice(0, offset),\r\n  });\r\n  const blockBelow = blockAbove.merge({\r\n    key: keyBelow,\r\n    text: text.slice(offset),\r\n    characterList: chars.slice(offset),\r\n    data: Map(),\r\n  });\r\n\r\n  const blocksBefore = blockMap.toSeq().takeUntil(v => v === blockToSplit);\r\n  const blocksAfter = blockMap\r\n    .toSeq()\r\n    .skipUntil(v => v === blockToSplit)\r\n    .rest();\r\n  let newBlocks = blocksBefore\r\n    .concat(\r\n      [\r\n        [key, blockAbove],\r\n        [keyBelow, blockBelow],\r\n      ],\r\n      blocksAfter,\r\n    )\r\n    .toOrderedMap();\r\n\r\n  if (isExperimentalTreeBlock) {\r\n    invariant(\r\n      blockToSplit.getChildKeys().isEmpty(),\r\n      'ContentBlockNode must not have children',\r\n    );\r\n\r\n    newBlocks = updateBlockMapLinks(newBlocks, blockAbove, blockBelow);\r\n  }\r\n\r\n  return contentState.merge({\r\n    blockMap: newBlocks,\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState.merge({\r\n      anchorKey: keyBelow,\r\n      anchorOffset: 0,\r\n      focusKey: keyBelow,\r\n      focusOffset: 0,\r\n      isBackward: false,\r\n    }) ,\r\n  }) as any;\r\n};\r\n\r\nexport default  splitBlockInContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  {DraftBlockType} from '../constants/DraftBlockType';\r\nimport  {DraftInlineStyle} from '../immutable/DraftInlineStyle';\r\nimport  {DraftRemovalDirection} from '../constants/DraftRemovalDirection';\r\nimport  SelectionState from '../immutable/SelectionState';\r\nimport  {BlockDataMergeBehavior} from '../transaction/insertFragmentIntoContentState';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport ContentStateInlineStyle from '../transaction/ContentStateInlineStyle';\r\n\r\nimport applyEntityToContentState from '../transaction/applyEntityToContentState';\r\nimport getCharacterRemovalRange from './getCharacterRemovalRange';\r\nimport getContentStateFragment from '../transaction/getContentStateFragment';\r\nimport{OrderedSet, Map}from 'immutable';\r\nimport insertFragmentIntoContentState from '../transaction/insertFragmentIntoContentState';\r\nimport insertTextIntoContentState from '../transaction/insertTextIntoContentState';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport modifyBlockForContentState from '../transaction/modifyBlockForContentState';\r\nimport removeEntitiesAtEdges from '../transaction/removeEntitiesAtEdges';\r\nimport removeRangeFromContentState from '../transaction/removeRangeFromContentState';\r\nimport splitBlockInContentState from '../transaction/splitBlockInContentState';\r\n\r\n\r\n/**\r\n * `DraftModifier` provides a set of convenience methods that apply\r\n * modifications to a `ContentState` object based on a target `SelectionState`.\r\n *\r\n * Any change to a `ContentState` should be decomposable into a series of\r\n * transaction functions that apply the re quired changes and return output\r\n * `ContentState` objects.\r\n *\r\n * These functions encapsulate some of the most common transaction sequences.\r\n */\r\nconst DraftModifier = {\r\n  replaceText: function(\r\n    contentState: ContentState,\r\n    rangeToReplace: SelectionState,\r\n    text: string,\r\n    inlineStyle?: DraftInlineStyle,\r\n    entityKey?: string,\r\n  ): ContentState {\r\n    const withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\r\n    const withoutText = removeRangeFromContentState(\r\n      withoutEntities,\r\n      rangeToReplace,\r\n    );\r\n\r\n    const character = CharacterMetadata.create({\r\n      style: inlineStyle || OrderedSet(),\r\n      entity: entityKey || null,\r\n    });\r\n\r\n    return insertTextIntoContentState(\r\n      withoutText,\r\n      withoutText.getSelectionAfter(),\r\n      text,\r\n      character,\r\n    );\r\n  },\r\n\r\n  insertText: function(\r\n    contentState: ContentState,\r\n    targetRange: SelectionState,\r\n    text: string,\r\n    inlineStyle?: DraftInlineStyle,\r\n    entityKey?: string,\r\n  ): ContentState {\r\n    invariant(\r\n      targetRange.isCollapsed(),\r\n      'Target range must be collapsed for `insertText`.',\r\n    );\r\n    return DraftModifier.replaceText(\r\n      contentState,\r\n      targetRange,\r\n      text,\r\n      inlineStyle,\r\n      entityKey,\r\n    );\r\n  },\r\n\r\n  moveText: function(\r\n    contentState: ContentState,\r\n    removalRange: SelectionState,\r\n    targetRange: SelectionState,\r\n  ): ContentState {\r\n    const movedFragment = getContentStateFragment(contentState, removalRange);\r\n\r\n    const afterRemoval = DraftModifier.removeRange(\r\n      contentState,\r\n      removalRange,\r\n      'backward',\r\n    );\r\n\r\n    return DraftModifier.replaceWithFragment(\r\n      afterRemoval,\r\n      targetRange,\r\n      movedFragment,\r\n    );\r\n  },\r\n\r\n  replaceWithFragment: function(\r\n    contentState: ContentState,\r\n    targetRange: SelectionState,\r\n    fragment: BlockMap,\r\n    mergeBlockData: BlockDataMergeBehavior = 'REPLACE_WITH_NEW_DATA',\r\n  ): ContentState {\r\n    const withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\r\n    const withoutText = removeRangeFromContentState(\r\n      withoutEntities,\r\n      targetRange,\r\n    );\r\n\r\n    return insertFragmentIntoContentState(\r\n      withoutText,\r\n      withoutText.getSelectionAfter(),\r\n      fragment,\r\n      mergeBlockData,\r\n    );\r\n  },\r\n\r\n  removeRange: function(\r\n    contentState: ContentState,\r\n    rangeToRemove: SelectionState,\r\n    removalDirection: DraftRemovalDirection,\r\n  ): ContentState {\r\n    let startKey, endKey, startBlock, endBlock;\r\n    if (rangeToRemove.getIsBackward()) {\r\n      rangeToRemove = rangeToRemove.merge({\r\n        anchorKey: rangeToRemove.getFocusKey(),\r\n        anchorOffset: rangeToRemove.getFocusOffset(),\r\n        focusKey: rangeToRemove.getAnchorKey(),\r\n        focusOffset: rangeToRemove.getAnchorOffset(),\r\n        isBackward: false,\r\n      }) as any;\r\n    }\r\n    startKey = rangeToRemove.getAnchorKey();\r\n    endKey = rangeToRemove.getFocusKey();\r\n    startBlock = contentState.getBlockForKey(startKey);\r\n    endBlock = contentState.getBlockForKey(endKey);\r\n    const startOffset = rangeToRemove.getStartOffset();\r\n    const endOffset = rangeToRemove.getEndOffset();\r\n\r\n    const startEntityKey = startBlock.getEntityAt(startOffset);\r\n    const endEntityKey = endBlock.getEntityAt(endOffset - 1);\r\n\r\n    // Check whether the selection state overlaps with a single entity.\r\n    // If so, try to remove the appropriate substring of the entity text.\r\n    if (startKey === endKey) {\r\n      if (startEntityKey && startEntityKey === endEntityKey) {\r\n        const adjustedRemovalRange = getCharacterRemovalRange(\r\n          contentState.getEntityMap(),\r\n          startBlock,\r\n          endBlock,\r\n          rangeToRemove,\r\n          removalDirection,\r\n        );\r\n        return removeRangeFromContentState(contentState, adjustedRemovalRange);\r\n      }\r\n    }\r\n\r\n    const withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\r\n    return removeRangeFromContentState(withoutEntities, rangeToRemove);\r\n  },\r\n\r\n  splitBlock: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n  ): ContentState {\r\n    const withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\r\n    const withoutText = removeRangeFromContentState(\r\n      withoutEntities,\r\n      selectionState,\r\n    );\r\n\r\n    return splitBlockInContentState(\r\n      withoutText,\r\n      withoutText.getSelectionAfter(),\r\n    );\r\n  },\r\n\r\n  applyInlineStyle: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    inlineStyle: string,\r\n  ): ContentState {\r\n    return ContentStateInlineStyle.add(\r\n      contentState,\r\n      selectionState,\r\n      inlineStyle,\r\n    );\r\n  },\r\n\r\n  removeInlineStyle: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    inlineStyle: string,\r\n  ): ContentState {\r\n    return ContentStateInlineStyle.remove(\r\n      contentState,\r\n      selectionState,\r\n      inlineStyle,\r\n    );\r\n  },\r\n\r\n  setBlockType: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    blockType: DraftBlockType,\r\n  ): ContentState {\r\n    return modifyBlockForContentState(contentState, selectionState, block =>\r\n      block.merge({type: blockType, depth: 0}) as any,\r\n    );\r\n  },\r\n\r\n  setBlockData: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    blockData: Map<any, any>,\r\n  ): ContentState {\r\n    return modifyBlockForContentState(contentState, selectionState, block =>\r\n      block.merge({data: blockData}) as any,\r\n    );\r\n  },\r\n\r\n  mergeBlockData: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    blockData: Map<any, any>,\r\n  ): ContentState {\r\n    return modifyBlockForContentState(contentState, selectionState, block =>\r\n      block.merge({data: block.getData().merge(blockData)}) as any,\r\n    );\r\n  },\r\n\r\n  applyEntity: function(\r\n    contentState: ContentState,\r\n    selectionState: SelectionState,\r\n    entityKey: string,\r\n  ): ContentState {\r\n    const withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\r\n    return applyEntityToContentState(\r\n      withoutEntities,\r\n      selectionState,\r\n      entityKey,\r\n    );\r\n  },\r\n};\r\n\r\nexport default  DraftModifier;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {  Repeat } from 'immutable';\r\nimport insertIntoList from './insertIntoList';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n\r\nimport  CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nfunction insertTextIntoContentState(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  text: string,\r\n  characterMetadata: CharacterMetadata,\r\n): ContentState {\r\n  invariant(\r\n    selectionState.isCollapsed(),\r\n    '`insertText` should only be called with a collapsed range.',\r\n  );\r\n\r\n  let len: number = null;\r\n  if (text != null) {\r\n    len = text.length;\r\n  }\r\n\r\n  if (len == null || len === 0) {\r\n    return contentState;\r\n  }\r\n\r\n  const blockMap = contentState.getBlockMap();\r\n  const key = selectionState.getStartKey();\r\n  const offset = selectionState.getStartOffset();\r\n  const block = blockMap.get(key);\r\n  const blockText = block.getText();\r\n\r\n  const newBlock:any = block.merge({\r\n    text:\r\n      blockText.slice(0, offset) +\r\n      text +\r\n      blockText.slice(offset, block.getLength()),\r\n    characterList: insertIntoList(\r\n      block.getCharacterList(),\r\n      Repeat(characterMetadata, len).toList(),\r\n      offset,\r\n    ),\r\n  });\r\n\r\n  const newOffset = offset + len;\r\n\r\n  return contentState.merge({\r\n    blockMap: blockMap.set(key, newBlock),\r\n    selectionAfter: selectionState.merge({\r\n      anchorOffset: newOffset,\r\n      focusOffset: newOffset,\r\n    }),\r\n  }) as any;\r\n}\r\n\r\nexport default  insertTextIntoContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from './BlockNodeRecord';\r\nimport CharacterMetadata from './CharacterMetadata';\r\nimport ContentState from './ContentState';\r\nimport {DraftDecoratorType} from '../decorators/DraftDecoratorType';\r\nimport findRangesImmutable from './findRangesImmutable';\r\nimport {List, Repeat, Record, Map} from 'immutable';\r\n\r\n\r\nconst returnTrue = function() {\r\n  return true;\r\n};\r\n\r\nconst defaultLeafRange: {\r\n  start: number,\r\n  end: number,\r\n} = {\r\n  start: null,\r\n  end: null,\r\n};\r\n\r\nconst LeafRange = Record(defaultLeafRange);\r\n\r\nconst defaultDecoratorRange: {\r\n  start: number,\r\n  end: number,\r\n  decoratorKey: string,\r\n  leaves: List<typeof LeafRange>,\r\n} = {\r\n  start: null,\r\n  end: null,\r\n  decoratorKey: null,\r\n  leaves: null,\r\n};\r\n\r\nconst DecoratorRange = Record(defaultDecoratorRange);\r\n\r\nconst BlockTree = {\r\n  /**\r\n   * Generate a block tree for a given ContentBlock/decorator pair.\r\n   */\r\n  generate: function(\r\n    contentState: ContentState,\r\n    block: BlockNodeRecord,\r\n    decorator:DraftDecoratorType,\r\n  ): List<Map<string, any>> {\r\n    const textLength = block.getLength();\r\n    if (!textLength) {\r\n      return List.of(\r\n        new DecoratorRange({\r\n          start: 0,\r\n          end: 0,\r\n          decoratorKey: null,\r\n          leaves: List.of(new LeafRange({start: 0, end: 0})),\r\n        }),\r\n      );\r\n    }\r\n\r\n    const leafSets = [];\r\n    const decorations = decorator\r\n      ? decorator.getDecorations(block, contentState)\r\n      : List(Repeat(null, textLength));\r\n\r\n    const chars = block.getCharacterList();\r\n\r\n    findRangesImmutable(decorations, areEqual, returnTrue, (start, end) => {\r\n      leafSets.push(\r\n        new DecoratorRange({\r\n          start,\r\n          end,\r\n          decoratorKey: decorations.get(start),\r\n          leaves: generateLeaves(chars.slice(start, end).toList(), start),\r\n        }),\r\n      );\r\n    });\r\n\r\n    return List(leafSets);\r\n  },\r\n};\r\n\r\n/**\r\n * Generate LeafRange records for a given character list.\r\n */\r\nfunction generateLeaves(\r\n  characters: List<CharacterMetadata>,\r\n  offset: number,\r\n): List<typeof LeafRange> {\r\n  const leaves = [];\r\n  const inlineStyles = characters.map(c => c.getStyle()).toList();\r\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, (start, end) => {\r\n    leaves.push(\r\n      new LeafRange({\r\n        start: start + offset,\r\n        end: end + offset,\r\n      }),\r\n    );\r\n  });\r\n  return List(leaves);\r\n}\r\n\r\nfunction areEqual(a: any, b: any): boolean {\r\n  return a === b;\r\n}\r\n\r\nexport default  BlockTree;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @legacyServerCallableInstance\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {DraftEntityMutability} from './DraftEntityMutability';\r\nimport  {DraftEntityType} from './DraftEntityType';\r\n\r\nimport  {Record}  from 'immutable';\r\n\r\nconst DraftEntityInstanceRecord = Record({\r\n  type: 'TOKEN',\r\n  mutability: 'IMMUTABLE',\r\n  data: Object,\r\n})\r\n\r\n/**\r\n * An instance of a document entity, consisting of a `type` and relevant\r\n * `data`, metadata about the entity.\r\n *\r\n * For instance, a \"link\" entity might provide a URI, and a \"mention\"\r\n * entity might provide the mentioned user's ID. These pieces of data\r\n * may be used when rendering the entity as part of a ContentBlock DOM\r\n * representation. For a link, the data would be used as an href for\r\n * the rendered anchor. For a mention, the ID could be used to retrieve\r\n * a hovercard.\r\n */\r\nclass DraftEntityInstance extends DraftEntityInstanceRecord {\r\n  getType(): DraftEntityType {\r\n    return this.get('type');\r\n  }\r\n\r\n  getMutability(): DraftEntityMutability {\r\n    return this.get('mutability');\r\n  }\r\n\r\n  getData(): Object {\r\n    return this.get('data');\r\n  }\r\n}\r\n\r\nexport default  DraftEntityInstance;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\nimport  {DraftEntityMutability} from './DraftEntityMutability';\r\nimport {DraftEntityType} from './DraftEntityType';\r\n\r\nimport DraftEntityInstance  from  './DraftEntityInstance';\r\n\r\nimport {Map}  from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n\r\nlet instances: Map<string, DraftEntityInstance> = Map();\r\nlet instanceKey = 0;\r\n\r\n/**\r\n * Temporary utility for generating the warnings\r\n */\r\nfunction logWarning(oldMethodCall, newMethodCall) {\r\n  console.warn(\r\n    'WARNING: ' +\r\n      oldMethodCall +\r\n      ' will be deprecated soon!\\nPlease use \"' +\r\n      newMethodCall +\r\n      '\" instead.',\r\n  );\r\n}\r\n\r\nexport type DraftEntityMapObject = {\r\n  getLastCreatedEntityKey: () => string,\r\n\r\n  create: (\r\n    type: DraftEntityType,\r\n    mutability: DraftEntityMutability,\r\n    data?: Object,\r\n  ) => string,\r\n\r\n  add: (instance: DraftEntityInstance) => string,\r\n\r\n  get: (key: string) => DraftEntityInstance,\r\n\r\n  mergeData: (\r\n    key: string,\r\n    toMerge: {[key: string]: any},\r\n  ) => DraftEntityInstance,\r\n\r\n  replaceData: (\r\n    key: string,\r\n    newData: {[key: string]: any},\r\n  ) => DraftEntityInstance,\r\n\r\n  __getLastCreatedEntityKey: () => string,\r\n\r\n  __create: (\r\n    type: DraftEntityType,\r\n    mutability: DraftEntityMutability,\r\n    data?: Object,\r\n  ) => string,\r\n\r\n  __add: (instance: DraftEntityInstance) => string,\r\n\r\n  __get: (key: string) => DraftEntityInstance,\r\n\r\n  __mergeData: (\r\n    key: string,\r\n    toMerge: {[key: string]: any},\r\n  ) => DraftEntityInstance,\r\n\r\n  __replaceData: (\r\n    key: string,\r\n    newData: {[key: string]: any},\r\n  ) => DraftEntityInstance,\r\n};\r\n\r\n/**\r\n * A \"document entity\" is an object containing metadata associated with a\r\n * piece of text in a ContentBlock.\r\n *\r\n * For example, a `link` entity might include a `uri` property. When a\r\n * ContentBlock is rendered in the browser, text that refers to that link\r\n * entity may be rendered as an anchor, with the `uri` as the href value.\r\n *\r\n * In a ContentBlock, every position in the text may correspond to zero\r\n * or one entities. This correspondence is tracked using a key string,\r\n * generated via DraftEntity.create() and used to obtain entity metadata\r\n * via DraftEntity.get().\r\n */\r\nconst DraftEntity: DraftEntityMapObject = {\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\r\n   * ---\r\n   * Get the random key string from whatever entity was last created.\r\n   * We need this to support the new API, as part of transitioning to put Entity\r\n   * storage in contentState.\r\n   */\r\n  getLastCreatedEntityKey: function(): string {\r\n    logWarning(\r\n      'DraftEntity.getLastCreatedEntityKey',\r\n      'contentState.getLastCreatedEntityKey',\r\n    );\r\n    return DraftEntity.__getLastCreatedEntityKey();\r\n  },\r\n\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.createEntity' instead.\r\n   * ---\r\n   * Create a DraftEntityInstance and store it for later retrieval.\r\n   *\r\n   * A random key string will be generated and returned. This key may\r\n   * be used to track the entity's usage in a ContentBlock, and for\r\n   * retrieving data about the entity at render time.\r\n   */\r\n  create: function(\r\n    type: DraftEntityType,\r\n    mutability: DraftEntityMutability,\r\n    data?: Object,\r\n  ): string {\r\n    logWarning('DraftEntity.create', 'contentState.createEntity');\r\n    return DraftEntity.__create(type, mutability, data);\r\n  },\r\n\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.addEntity' instead.\r\n   * ---\r\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\r\n   * useful when restoring instances from the server.\r\n   */\r\n  add: function(instance: DraftEntityInstance): string {\r\n    logWarning('DraftEntity.add', 'contentState.addEntity');\r\n    return DraftEntity.__add(instance);\r\n  },\r\n\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.getEntity' instead.\r\n   * ---\r\n   * Retrieve the entity corresponding to the supplied key string.\r\n   */\r\n  get: function(key: string): DraftEntityInstance {\r\n    logWarning('DraftEntity.get', 'contentState.getEntity');\r\n    return DraftEntity.__get(key);\r\n  },\r\n\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.mergeEntityData' instead.\r\n   * ---\r\n   * Entity instances are immutable. If you need to update the data for an\r\n   * instance, this method will merge your data updates and return a new\r\n   * instance.\r\n   */\r\n  mergeData: function(\r\n    key: string,\r\n    toMerge: {[key: string]: any},\r\n  ): DraftEntityInstance {\r\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\r\n    return DraftEntity.__mergeData(key, toMerge);\r\n  },\r\n\r\n  /**\r\n   * WARNING: This method will be deprecated soon!\r\n   * Please use 'contentState.replaceEntityData' instead.\r\n   * ---\r\n   * Completely replace the data for a given instance.\r\n   */\r\n  replaceData: function(\r\n    key: string,\r\n    newData: {[key: string]: any},\r\n  ): DraftEntityInstance {\r\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\r\n    return DraftEntity.__replaceData(key, newData);\r\n  },\r\n\r\n  // ***********************************WARNING******************************\r\n  // --- the above public API will be deprecated in the next version of Draft!\r\n  // The methods below this line are private - don't call them directly.\r\n\r\n  /**\r\n   * Get the random key string from whatever entity was last created.\r\n   * We need this to support the new API, as part of transitioning to put Entity\r\n   * storage in contentState.\r\n   */\r\n  __getLastCreatedEntityKey: function(): string {\r\n    return '' + instanceKey;\r\n  },\r\n\r\n  /**\r\n   * Create a DraftEntityInstance and store it for later retrieval.\r\n   *\r\n   * A random key string will be generated and returned. This key may\r\n   * be used to track the entity's usage in a ContentBlock, and for\r\n   * retrieving data about the entity at render time.\r\n   */\r\n  __create: function(\r\n    type: DraftEntityType,\r\n    mutability: DraftEntityMutability,\r\n    data?: Object,\r\n  ): string {\r\n    return DraftEntity.__add(\r\n      new DraftEntityInstance({type, mutability, data: data || {}}),\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\r\n   * useful when restoring instances from the server.\r\n   */\r\n  __add: function(instance: DraftEntityInstance): string {\r\n    const key = '' + ++instanceKey;\r\n    instances = instances.set(key, instance);\r\n    return key;\r\n  },\r\n\r\n  /**\r\n   * Retrieve the entity corresponding to the supplied key string.\r\n   */\r\n  __get: function(key: string): DraftEntityInstance {\r\n    const instance = instances.get(key);\r\n    invariant(!!instance, 'Unknown DraftEntity key: %s.', key);\r\n    return instance;\r\n  },\r\n\r\n  /**\r\n   * Entity instances are immutable. If you need to update the data for an\r\n   * instance, this method will merge your data updates and return a new\r\n   * instance.\r\n   */\r\n  __mergeData: function(\r\n    key: string,\r\n    toMerge: {[key: string]: any},\r\n  ): DraftEntityInstance {\r\n    const instance = DraftEntity.__get(key);\r\n    const newData = {...instance.getData(), ...toMerge};\r\n    const newInstance:DraftEntityInstance = (instance as any ).set('data', newData);\r\n    instances = instances.set(key, newInstance);\r\n    return newInstance;\r\n  },\r\n\r\n  /**\r\n   * Completely replace the data for a given instance.\r\n   */\r\n  __replaceData: function(\r\n    key: string,\r\n    newData: {[key: string]: any},\r\n  ): DraftEntityInstance {\r\n    const instance = DraftEntity.__get(key);\r\n    const newInstance:any = instance.set('data', newData);\r\n    instances = instances.set(key, newInstance);\r\n    return newInstance;\r\n  },\r\n};\r\n\r\nexport default  DraftEntity;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {Record} from 'immutable';\r\n\r\n\r\nconst defaultRecord: {\r\n  anchorKey: string,\r\n  anchorOffset: number,\r\n  focusKey: string,\r\n  focusOffset: number,\r\n  isBackward: boolean,\r\n  hasFocus: boolean,\r\n} = {\r\n  anchorKey: '',\r\n  anchorOffset: 0,\r\n  focusKey: '',\r\n  focusOffset: 0,\r\n  isBackward: false,\r\n  hasFocus: false,\r\n};\r\n\r\n/* $FlowFixMe This comment suppresses an error found when automatically adding\r\n * a type annotation with the codemod Komodo/Annotate_exports. To see the error\r\n * delete this comment and run Flow. */\r\nconst SelectionStateRecord = Record(defaultRecord);\r\n\r\nclass SelectionState extends SelectionStateRecord {\r\n  serialize(): string {\r\n    return (\r\n      'Anchor: ' +\r\n      this.getAnchorKey() +\r\n      ':' +\r\n      this.getAnchorOffset() +\r\n      ', ' +\r\n      'Focus: ' +\r\n      this.getFocusKey() +\r\n      ':' +\r\n      this.getFocusOffset() +\r\n      ', ' +\r\n      'Is Backward: ' +\r\n      String(this.getIsBackward()) +\r\n      ', ' +\r\n      'Has Focus: ' +\r\n      String(this.getHasFocus())\r\n    );\r\n  }\r\n\r\n  getAnchorKey(): string {\r\n    return this.get('anchorKey');\r\n  }\r\n\r\n  getAnchorOffset(): number {\r\n    return this.get('anchorOffset');\r\n  }\r\n\r\n  getFocusKey(): string {\r\n    return this.get('focusKey');\r\n  }\r\n\r\n  getFocusOffset(): number {\r\n    return this.get('focusOffset');\r\n  }\r\n\r\n  getIsBackward(): boolean {\r\n    return this.get('isBackward');\r\n  }\r\n\r\n  getHasFocus(): boolean {\r\n    return this.get('hasFocus');\r\n  }\r\n\r\n  /**\r\n   * Return whether the specified range overlaps with an edge of the\r\n   * SelectionState.\r\n   */\r\n  hasEdgeWithin(blockKey: string, start: number, end: number): boolean {\r\n    const anchorKey = this.getAnchorKey();\r\n    const focusKey = this.getFocusKey();\r\n\r\n    if (anchorKey === focusKey && anchorKey === blockKey) {\r\n      const selectionStart = this.getStartOffset();\r\n      const selectionEnd = this.getEndOffset();\r\n\r\n      return (\r\n        (start <= selectionStart && selectionStart <= end) || // selectionStart is between start and end, or\r\n        (start <= selectionEnd && selectionEnd <= end) // selectionEnd is between start and end\r\n      );\r\n    }\r\n\r\n    if (blockKey !== anchorKey && blockKey !== focusKey) {\r\n      return false;\r\n    }\r\n\r\n    const offsetToCheck =\r\n      blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();\r\n\r\n    return start <= offsetToCheck && end >= offsetToCheck;\r\n  }\r\n\r\n  isCollapsed(): boolean {\r\n    return (\r\n      this.getAnchorKey() === this.getFocusKey() &&\r\n      this.getAnchorOffset() === this.getFocusOffset()\r\n    );\r\n  }\r\n\r\n  getStartKey(): string {\r\n    return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();\r\n  }\r\n\r\n  getStartOffset(): number {\r\n    return this.getIsBackward()\r\n      ? this.getFocusOffset()\r\n      : this.getAnchorOffset();\r\n  }\r\n\r\n  getEndKey(): string {\r\n    return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();\r\n  }\r\n\r\n  getEndOffset(): number {\r\n    return this.getIsBackward()\r\n      ? this.getAnchorOffset()\r\n      : this.getFocusOffset();\r\n  }\r\n\r\n  static createEmpty(key: string): SelectionState {\r\n    return new SelectionState({\r\n      anchorKey: key,\r\n      anchorOffset: 0,\r\n      focusKey: key,\r\n      focusOffset: 0,\r\n      isBackward: false,\r\n      hasFocus: false,\r\n    });\r\n  }\r\n}\r\n\r\nexport default  SelectionState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\ndeclare const window: {\r\n  __DRAFT_GKX\r\n}\r\n// window['draft_tree_data_support'] = true;\r\n\r\nexport default  function(name: string) {\r\n  if (typeof window !== 'undefined' && window.__DRAFT_GKX) {\r\n    return !!window.__DRAFT_GKX[name];\r\n  }\r\n  return false;\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nconst REGEX_BLOCK_DELIMITER = new RegExp('\\r', 'g');\r\n\r\nfunction sanitizeDraftText(input: string): string {\r\n  return input.replace(REGEX_BLOCK_DELIMITER, '');\r\n}\r\n\r\nexport default  sanitizeDraftText;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {BlockMap} from './BlockMap';\r\nimport  {BlockNodeRecord} from './BlockNodeRecord';\r\nimport  DraftEntityInstance from '../entity/DraftEntityInstance';\r\nimport  {DraftEntityMutability} from '../entity/DraftEntityMutability';\r\nimport {DraftEntityType} from '../entity/DraftEntityType';\r\n\r\nimport BlockMapBuilder from './BlockMapBuilder';\r\nimport CharacterMetadata from './CharacterMetadata';\r\nimport ContentBlock from './ContentBlock';\r\nimport ContentBlockNode from './ContentBlockNode';\r\nimport DraftEntity from '../entity/DraftEntity';\r\nimport SelectionState from './SelectionState';\r\n\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport gkx from '../../stubs/gkx';\r\nimport {List, Record, Repeat} from 'immutable';\r\nimport sanitizeDraftText from '../encoding/sanitizeDraftText';\r\n\r\n\r\nconst defaultRecord: {\r\n  entityMap: any,\r\n  blockMap: BlockMap,\r\n  selectionBefore: SelectionState,\r\n  selectionAfter: SelectionState,\r\n} = {\r\n  entityMap: null,\r\n  blockMap: null,\r\n  selectionBefore: null,\r\n  selectionAfter: null,\r\n};\r\n\r\nconst ContentStateRecord = Record(defaultRecord);\r\n\r\nclass ContentState extends ContentStateRecord {\r\n  getEntityMap(): any {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    return DraftEntity;\r\n  }\r\n\r\n  getBlockMap(): BlockMap {\r\n    return this.get('blockMap');\r\n  }\r\n\r\n  getSelectionBefore(): SelectionState {\r\n    return this.get('selectionBefore');\r\n  }\r\n\r\n  getSelectionAfter(): SelectionState {\r\n    return this.get('selectionAfter');\r\n  }\r\n\r\n  getBlockForKey(key: string): BlockNodeRecord {\r\n    const block: BlockNodeRecord = this.getBlockMap().get(key);\r\n    return block;\r\n  }\r\n\r\n  getKeyBefore(key: string): string {\r\n    return this.getBlockMap()\r\n      .reverse()\r\n      .keySeq()\r\n      .skipUntil(v => v === key)\r\n      .skip(1)\r\n      .first();\r\n  }\r\n\r\n  getKeyAfter(key: string): string {\r\n    return this.getBlockMap()\r\n      .keySeq()\r\n      .skipUntil(v => v === key)\r\n      .skip(1)\r\n      .first();\r\n  }\r\n\r\n  getBlockAfter(key: string): BlockNodeRecord {\r\n    return this.getBlockMap()\r\n      .skipUntil((_, k) => k === key)\r\n      .skip(1)\r\n      .first();\r\n  }\r\n\r\n  getBlockBefore(key: string): BlockNodeRecord {\r\n    return this.getBlockMap()\r\n      .reverse()\r\n      .skipUntil((_, k) => k === key)\r\n      .skip(1)\r\n      .first();\r\n  }\r\n\r\n  getBlocksAsArray(): Array<BlockNodeRecord> {\r\n    return this.getBlockMap().toArray();\r\n  }\r\n\r\n  getFirstBlock(): BlockNodeRecord {\r\n    return this.getBlockMap().first();\r\n  }\r\n\r\n  getLastBlock(): BlockNodeRecord {\r\n    return this.getBlockMap().last();\r\n  }\r\n\r\n  getPlainText(delimiter?: string): string {\r\n    return this.getBlockMap()\r\n      .map(block => {\r\n        return block ? block.getText() : '';\r\n      })\r\n      .join(delimiter || '\\n');\r\n  }\r\n\r\n  getLastCreatedEntityKey(): string {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    return DraftEntity.__getLastCreatedEntityKey();\r\n  }\r\n\r\n  hasText(): boolean {\r\n    const blockMap = this.getBlockMap();\r\n    return (\r\n      blockMap.size > 1 ||\r\n      // make sure that there are no zero width space chars\r\n      escape(blockMap.first().getText()).replace(/%u200B/g, '').length > 0\r\n    );\r\n  }\r\n\r\n  createEntity(\r\n    type: DraftEntityType,\r\n    mutability: DraftEntityMutability,\r\n    data?: Object,\r\n  ): ContentState {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    DraftEntity.__create(type, mutability, data);\r\n    return this;\r\n  }\r\n\r\n  mergeEntityData(key: string, toMerge: {[key: string]: any}): ContentState {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    DraftEntity.__mergeData(key, toMerge);\r\n    return this;\r\n  }\r\n\r\n  replaceEntityData(key: string, newData: {[key: string]: any}): ContentState {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    DraftEntity.__replaceData(key, newData);\r\n    return this;\r\n  }\r\n\r\n  addEntity(instance: DraftEntityInstance): ContentState {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    DraftEntity.__add(instance);\r\n    return this;\r\n  }\r\n\r\n  getEntity(key: string): DraftEntityInstance {\r\n    // TODO: update this when we fully remove DraftEntity\r\n    return DraftEntity.__get(key);\r\n  }\r\n\r\n  static createFromBlockArray(\r\n    // TODO: update flow type when we completely deprecate the old entity API\r\n    blocks: Array<BlockNodeRecord> | {contentBlocks: Array<BlockNodeRecord>},\r\n    entityMap?: any,\r\n  ): ContentState {\r\n    // TODO: remove this when we completely deprecate the old entity API\r\n    const theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\r\n    const blockMap = BlockMapBuilder.createFromArray(theBlocks);\r\n    const selectionState = blockMap.isEmpty()\r\n      ? new SelectionState()\r\n      : SelectionState.createEmpty(blockMap.first().getKey());\r\n    return new ContentState({\r\n      blockMap,\r\n      entityMap: entityMap || DraftEntity,\r\n      selectionBefore: selectionState,\r\n      selectionAfter: selectionState,\r\n    });\r\n  }\r\n\r\n  static createFromText(\r\n    text: string,\r\n    delimiter: string | RegExp = /\\r\\n?|\\n/g,\r\n  ): ContentState {\r\n    const strings = text.split(delimiter);\r\n    const blocks = strings.map(block => {\r\n      block = sanitizeDraftText(block);\r\n      const ContentBlockNodeRecord = gkx('draft_tree_data_support')\r\n        ? ContentBlockNode\r\n        : ContentBlock;\r\n      return new ContentBlockNodeRecord({\r\n        key: generateRandomKey(),\r\n        text: block,\r\n        type: 'unstyled',\r\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length)),\r\n      });\r\n    });\r\n    return ContentState.createFromBlockArray(blocks);\r\n  }\r\n}\r\n\r\nexport default  ContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from './ContentState';\r\n\r\nimport UnicodeBidiService from 'fbjs/lib/UnicodeBidiService';\r\n\r\nimport {OrderedMap, is} from 'immutable';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\n\r\nlet bidiService;\r\n\r\nconst EditorBidiService = {\r\n  getDirectionMap: function(\r\n    content: ContentState,\r\n    prevBidiMap: OrderedMap<any, any>,\r\n  ): OrderedMap<any, any> {\r\n    if (!bidiService) {\r\n      bidiService = new UnicodeBidiService();\r\n    } else {\r\n      bidiService.reset();\r\n    }\r\n\r\n    const blockMap = content.getBlockMap();\r\n    const nextBidi = blockMap\r\n      .valueSeq()\r\n      .map(block => nullthrows(bidiService).getDirection(block.getText()));\r\n    const bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));\r\n\r\n    if (prevBidiMap != null && is(prevBidiMap, bidiMap)) {\r\n      return prevBidiMap;\r\n    }\r\n\r\n    return bidiMap;\r\n  },\r\n};\r\n\r\nexport default  EditorBidiService;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from './BlockMap';\r\nimport {DraftDecoratorType} from '../decorators/DraftDecoratorType';\r\nimport  {DraftInlineStyle} from './DraftInlineStyle';\r\nimport  {EditorChangeType} from './EditorChangeType';\r\nimport {EntityMap} from './EntityMap';\r\nimport  {List, OrderedMap} from 'immutable';\r\n\r\nimport BlockTree from './BlockTree';\r\nimport ContentState from './ContentState';\r\nimport EditorBidiService from './EditorBidiService';\r\nimport SelectionState from './SelectionState';\r\n\r\nimport {OrderedSet, Record, Stack} from 'immutable';\r\n\r\n\r\ntype EditorStateRecordType = {\r\n  allowUndo: boolean,\r\n  currentContent: ContentState,\r\n  decorator: DraftDecoratorType,\r\n  directionMap: OrderedMap<string, string>,\r\n  forceSelection: boolean,\r\n  inCompositionMode: boolean,\r\n  inlineStyleOverride: DraftInlineStyle,\r\n  lastChangeType: EditorChangeType,\r\n  nativelyRenderedContent: ContentState,\r\n  redoStack: Stack<ContentState>,\r\n  selection: SelectionState,\r\n  treeMap: OrderedMap<string, List<any>>,\r\n  undoStack: Stack<ContentState>,\r\n};\r\n\r\nconst defaultRecord: EditorStateRecordType = {\r\n  allowUndo: true,\r\n  currentContent: null,\r\n  decorator: null,\r\n  directionMap: null,\r\n  forceSelection: false,\r\n  inCompositionMode: false,\r\n  inlineStyleOverride: null,\r\n  lastChangeType: null,\r\n  nativelyRenderedContent: null,\r\n  redoStack: Stack(),\r\n  selection: null,\r\n  treeMap: null,\r\n  undoStack: Stack(),\r\n};\r\n\r\nconst EditorStateRecord = Record(defaultRecord);\r\n\r\nclass EditorState {\r\n  _immutable:typeof EditorStateRecord;\r\n\r\n  static createEmpty(decorator?: DraftDecoratorType): EditorState {\r\n    return EditorState.createWithContent(\r\n      ContentState.createFromText(''),\r\n      decorator,\r\n    );\r\n  }\r\n\r\n  static createWithContent(\r\n    contentState: ContentState,\r\n    decorator?: DraftDecoratorType,\r\n  ): EditorState {\r\n    if (contentState.getBlockMap().count() === 0) {\r\n      return EditorState.createEmpty(decorator);\r\n    }\r\n    const firstKey = contentState\r\n      .getBlockMap()\r\n      .first()\r\n      .getKey();\r\n    return EditorState.create({\r\n      currentContent: contentState,\r\n      undoStack: Stack(),\r\n      redoStack: Stack(),\r\n      decorator: decorator || null,\r\n      selection: SelectionState.createEmpty(firstKey),\r\n    });\r\n  }\r\n\r\n  static create(config: any): EditorState {\r\n    const {currentContent, decorator} = config;\r\n    const recordConfig = {\r\n      ...config,\r\n      treeMap: generateNewTreeMap(currentContent, decorator),\r\n      directionMap: (EditorBidiService as any).getDirectionMap(currentContent),\r\n    };\r\n    return new EditorState(new EditorStateRecord(recordConfig) as any );\r\n  }\r\n\r\n  static set(editorState: EditorState, put: any): EditorState {\r\n    const map = (editorState as any).getImmutable().withMutations(state => {\r\n      const existingDecorator = state.get('decorator');\r\n      let decorator = existingDecorator;\r\n      if (put.decorator === null) {\r\n        decorator = null;\r\n      } else if (put.decorator) {\r\n        decorator = put.decorator;\r\n      }\r\n\r\n      const newContent = put.currentContent || editorState.getCurrentContent();\r\n\r\n      if (decorator !== existingDecorator) {\r\n        const treeMap: OrderedMap<any, any> = state.get('treeMap');\r\n        let newTreeMap;\r\n        if (decorator && existingDecorator) {\r\n          newTreeMap = regenerateTreeForNewDecorator(\r\n            newContent,\r\n            newContent.getBlockMap(),\r\n            treeMap,\r\n            decorator,\r\n            existingDecorator,\r\n          );\r\n        } else {\r\n          newTreeMap = generateNewTreeMap(newContent, decorator);\r\n        }\r\n\r\n        state.merge({\r\n          decorator,\r\n          treeMap: newTreeMap,\r\n          nativelyRenderedContent: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const existingContent = editorState.getCurrentContent();\r\n      if (newContent !== existingContent) {\r\n        state.set(\r\n          'treeMap',\r\n          regenerateTreeForNewBlocks(\r\n            editorState,\r\n            newContent.getBlockMap(),\r\n            newContent.getEntityMap(),\r\n            decorator,\r\n          ),\r\n        );\r\n      }\r\n\r\n      state.merge(put);\r\n    });\r\n\r\n    return new EditorState(map);\r\n  }\r\n\r\n  toJS(): Object {\r\n    return (this.getImmutable() as any).toJS();\r\n  }\r\n\r\n  getAllowUndo(): boolean {\r\n    return (this.getImmutable() as any).get('allowUndo');\r\n  }\r\n\r\n  getCurrentContent(): ContentState {\r\n    return (this.getImmutable() as any).get('currentContent');\r\n  }\r\n\r\n  getUndoStack(): Stack<ContentState> {\r\n    return (this.getImmutable() as any).get('undoStack');\r\n  }\r\n\r\n  getRedoStack(): Stack<ContentState> {\r\n    return (this.getImmutable() as any).get('redoStack');\r\n  }\r\n\r\n  getSelection(): SelectionState {\r\n    return this.getImmutable().get('selection');\r\n  }\r\n\r\n  getDecorator(): DraftDecoratorType {\r\n    return (this.getImmutable() as any).get('decorator');\r\n  }\r\n\r\n  isInCompositionMode(): boolean {\r\n    return this.getImmutable().get('inCompositionMode');\r\n  }\r\n\r\n  mustForceSelection(): boolean {\r\n    return this.getImmutable().get('forceSelection');\r\n  }\r\n\r\n  getNativelyRenderedContent(): ContentState {\r\n    return this.getImmutable().get('nativelyRenderedContent');\r\n  }\r\n\r\n  getLastChangeType(): EditorChangeType {\r\n    return this.getImmutable().get('lastChangeType');\r\n  }\r\n\r\n  /**\r\n   * While editing, the user may apply inline style commands with a collapsed\r\n   * cursor, intending to type text that adopts the specified style. In this\r\n   * case, we track the specified style as an \"override\" that takes precedence\r\n   * over the inline style of the text adjacent to the cursor.\r\n   *\r\n   * If null, there is no override in place.\r\n   */\r\n  getInlineStyleOverride(): DraftInlineStyle {\r\n    return this.getImmutable().get('inlineStyleOverride');\r\n  }\r\n\r\n  static setInlineStyleOverride(\r\n    editorState: EditorState,\r\n    inlineStyleOverride: DraftInlineStyle,\r\n  ): EditorState {\r\n    return EditorState.set(editorState, {inlineStyleOverride});\r\n  }\r\n\r\n  /**\r\n   * Get the appropriate inline style for the editor state. If an\r\n   * override is in place, use it. Otherwise, the current style is\r\n   * based on the location of the selection state.\r\n   */\r\n  getCurrentInlineStyle(): DraftInlineStyle {\r\n    const override = this.getInlineStyleOverride();\r\n    if (override != null) {\r\n      return override;\r\n    }\r\n\r\n    const content = this.getCurrentContent();\r\n    const selection = this.getSelection();\r\n\r\n    if (selection.isCollapsed()) {\r\n      return getInlineStyleForCollapsedSelection(content, selection);\r\n    }\r\n\r\n    return getInlineStyleForNonCollapsedSelection(content, selection);\r\n  }\r\n\r\n  getBlockTree(blockKey: string): List<any> {\r\n    return this.getImmutable().getIn(['treeMap', blockKey]);\r\n  }\r\n\r\n  isSelectionAtStartOfContent(): boolean {\r\n    const firstKey = this.getCurrentContent()\r\n      .getBlockMap()\r\n      .first()\r\n      .getKey();\r\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\r\n  }\r\n\r\n  isSelectionAtEndOfContent(): boolean {\r\n    const content = this.getCurrentContent();\r\n    const blockMap = content.getBlockMap();\r\n    const last = blockMap.last();\r\n    const end = last.getLength();\r\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\r\n  }\r\n\r\n  getDirectionMap(): OrderedMap<any, any> {\r\n    return this.getImmutable().get('directionMap');\r\n  }\r\n\r\n  /**\r\n   * Incorporate native DOM selection changes into the EditorState. This\r\n   * method can be used when we simply want to accept whatever the DOM\r\n   * has given us to represent selection, and we do not need to re-render\r\n   * the editor.\r\n   *\r\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\r\n   */\r\n  static acceptSelection(\r\n    editorState: EditorState,\r\n    selection: SelectionState,\r\n  ): EditorState {\r\n    return updateSelection(editorState, selection, false);\r\n  }\r\n\r\n  /**\r\n   * At times, we need to force the DOM selection to be where we\r\n   * need it to be. This can occur when the anchor or focus nodes\r\n   * are non-text nodes, for instance. In this case, we want to trigger\r\n   * a re-render of the editor, which in turn forces selection into\r\n   * the correct place in the DOM. The `forceSelection` method\r\n   * accomplishes this.\r\n   *\r\n   * This method should be used in cases where you need to explicitly\r\n   * move the DOM selection from one place to another without a change\r\n   * in ContentState.\r\n   */\r\n  static forceSelection(\r\n    editorState: EditorState,\r\n    selection: SelectionState,\r\n  ): EditorState {\r\n    if (!selection.getHasFocus()) {\r\n      selection = selection.set('hasFocus', true) as any;\r\n    }\r\n    return updateSelection(editorState, selection, true);\r\n  }\r\n\r\n  /**\r\n   * Move selection to the end of the editor without forcing focus.\r\n   */\r\n  static moveSelectionToEnd(editorState: EditorState): EditorState {\r\n    const content = editorState.getCurrentContent();\r\n    const lastBlock = content.getLastBlock();\r\n    const lastKey = lastBlock.getKey();\r\n    const length = lastBlock.getLength();\r\n\r\n    return EditorState.acceptSelection(\r\n      editorState,\r\n      new SelectionState({\r\n        anchorKey: lastKey,\r\n        anchorOffset: length,\r\n        focusKey: lastKey,\r\n        focusOffset: length,\r\n        isBackward: false,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Force focus to the end of the editor. This is useful in scenarios\r\n   * where we want to programmatically focus the input and it makes sense\r\n   * to allow the user to continue working seamlessly.\r\n   */\r\n  static moveFocusToEnd(editorState: EditorState): EditorState {\r\n    const afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\r\n    return EditorState.forceSelection(\r\n      afterSelectionMove,\r\n      afterSelectionMove.getSelection(),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Push the current ContentState onto the undo stack if it should be\r\n   * considered a boundary state, and set the provided ContentState as the\r\n   * new current content.\r\n   */\r\n  static push(\r\n    editorState: EditorState,\r\n    contentState: ContentState,\r\n    changeType: EditorChangeType,\r\n    forceSelection: boolean = true,\r\n  ): EditorState {\r\n    if (editorState.getCurrentContent() === contentState) {\r\n      return editorState;\r\n    }\r\n\r\n    const directionMap = EditorBidiService.getDirectionMap(\r\n      contentState,\r\n      editorState.getDirectionMap(),\r\n    );\r\n\r\n    if (!editorState.getAllowUndo()) {\r\n      return EditorState.set(editorState, {\r\n        currentContent: contentState,\r\n        directionMap,\r\n        lastChangeType: changeType,\r\n        selection: contentState.getSelectionAfter(),\r\n        forceSelection,\r\n        inlineStyleOverride: null,\r\n      });\r\n    }\r\n\r\n    const selection = editorState.getSelection();\r\n    const currentContent = editorState.getCurrentContent();\r\n    let undoStack = editorState.getUndoStack();\r\n    let newContent:any = contentState;\r\n\r\n    if (\r\n      selection !== currentContent.getSelectionAfter() ||\r\n      mustBecomeBoundary(editorState, changeType)\r\n    ) {\r\n      undoStack = undoStack.push(currentContent);\r\n      newContent = newContent.set('selectionBefore', selection);\r\n    } else if (\r\n      changeType === 'insert-characters' ||\r\n      changeType === 'backspace-character' ||\r\n      changeType === 'delete-character'\r\n    ) {\r\n      // Preserve the previous selection.\r\n      newContent = newContent.set(\r\n        'selectionBefore',\r\n        currentContent.getSelectionBefore(),\r\n      );\r\n    }\r\n\r\n    let inlineStyleOverride = editorState.getInlineStyleOverride();\r\n\r\n    // Don't discard inline style overrides for the following change types:\r\n    const overrideChangeTypes = [\r\n      'adjust-depth',\r\n      'change-block-type',\r\n      'split-block',\r\n    ];\r\n\r\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\r\n      inlineStyleOverride = null;\r\n    }\r\n\r\n    const editorStateChanges = {\r\n      currentContent: newContent,\r\n      directionMap,\r\n      undoStack,\r\n      redoStack: Stack(),\r\n      lastChangeType: changeType,\r\n      selection: contentState.getSelectionAfter(),\r\n      forceSelection,\r\n      inlineStyleOverride,\r\n    };\r\n\r\n    return EditorState.set(editorState, editorStateChanges);\r\n  }\r\n\r\n  /**\r\n   * Make the top ContentState in the undo stack the new current content and\r\n   * push the current content onto the redo stack.\r\n   */\r\n  static undo(editorState: EditorState): EditorState {\r\n    if (!editorState.getAllowUndo()) {\r\n      return editorState;\r\n    }\r\n\r\n    const undoStack = editorState.getUndoStack();\r\n    const newCurrentContent = undoStack.peek();\r\n    if (!newCurrentContent) {\r\n      return editorState;\r\n    }\r\n\r\n    const currentContent = editorState.getCurrentContent();\r\n    const directionMap = EditorBidiService.getDirectionMap(\r\n      newCurrentContent,\r\n      editorState.getDirectionMap(),\r\n    );\r\n\r\n    return EditorState.set(editorState, {\r\n      currentContent: newCurrentContent,\r\n      directionMap,\r\n      undoStack: undoStack.shift(),\r\n      redoStack: editorState.getRedoStack().push(currentContent),\r\n      forceSelection: true,\r\n      inlineStyleOverride: null,\r\n      lastChangeType: 'undo',\r\n      nativelyRenderedContent: null,\r\n      selection: currentContent.getSelectionBefore(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Make the top ContentState in the redo stack the new current content and\r\n   * push the current content onto the undo stack.\r\n   */\r\n  static redo(editorState: EditorState): EditorState {\r\n    if (!editorState.getAllowUndo()) {\r\n      return editorState;\r\n    }\r\n\r\n    const redoStack = editorState.getRedoStack();\r\n    const newCurrentContent = redoStack.peek();\r\n    if (!newCurrentContent) {\r\n      return editorState;\r\n    }\r\n\r\n    const currentContent = editorState.getCurrentContent();\r\n    const directionMap = EditorBidiService.getDirectionMap(\r\n      newCurrentContent,\r\n      editorState.getDirectionMap(),\r\n    );\r\n\r\n    return EditorState.set(editorState, {\r\n      currentContent: newCurrentContent,\r\n      directionMap,\r\n      undoStack: editorState.getUndoStack().push(currentContent),\r\n      redoStack: redoStack.shift(),\r\n      forceSelection: true,\r\n      inlineStyleOverride: null,\r\n      lastChangeType: 'redo',\r\n      nativelyRenderedContent: null,\r\n      selection: newCurrentContent.getSelectionAfter(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Not for public consumption.\r\n   */\r\n  constructor(immutable:typeof EditorStateRecord) {\r\n    this._immutable = immutable;\r\n  }\r\n\r\n  /**\r\n   * Not for public consumption.\r\n   */\r\n  getImmutable():any {  //EditorStateRecord\r\n    return this._immutable;\r\n  }\r\n}\r\n\r\n/**\r\n * Set the supplied SelectionState as the new current selection, and set\r\n * the `force` flag to trigger manual selection placement by the view.\r\n */\r\nfunction updateSelection(\r\n  editorState: EditorState,\r\n  selection: SelectionState,\r\n  forceSelection: boolean,\r\n): EditorState {\r\n  return EditorState.set(editorState, {\r\n    selection,\r\n    forceSelection,\r\n    nativelyRenderedContent: null,\r\n    inlineStyleOverride: null,\r\n  });\r\n}\r\n\r\n/**\r\n * Regenerate the entire tree map for a given ContentState and decorator.\r\n * Returns an OrderedMap that maps all available ContentBlock objects.\r\n */\r\nfunction generateNewTreeMap(\r\n  contentState: ContentState,\r\n  decorator?: DraftDecoratorType,\r\n): OrderedMap<string, List<any>> {\r\n  return contentState\r\n    .getBlockMap()\r\n    .map(block => BlockTree.generate(contentState, block, decorator))\r\n    .toOrderedMap();\r\n}\r\n\r\n/**\r\n * Regenerate tree map objects for all ContentBlocks that have changed\r\n * between the current editorState and newContent. Returns an OrderedMap\r\n * with only changed regenerated tree map objects.\r\n */\r\nfunction regenerateTreeForNewBlocks(\r\n  editorState: EditorState,\r\n  newBlockMap: BlockMap,\r\n  newEntityMap: EntityMap,\r\n  decorator?: DraftDecoratorType,\r\n): OrderedMap<string, List<any>> {\r\n  const contentState:any = editorState\r\n    .getCurrentContent()\r\n    .set('entityMap', newEntityMap);\r\n  const prevBlockMap = contentState.getBlockMap();\r\n  const prevTreeMap = (editorState as any).getImmutable().get('treeMap');\r\n  return prevTreeMap.merge(\r\n    newBlockMap\r\n      .toSeq()\r\n      .filter((block, key) => block !== prevBlockMap.get(key))\r\n      .map(block => BlockTree.generate(contentState, block, decorator)),\r\n  );\r\n}\r\n\r\n/**\r\n * Generate tree map objects for a new decorator object, preserving any\r\n * decorations that are unchanged from the previous decorator.\r\n *\r\n * Note that in order for this to perform optimally, decoration Lists for\r\n * decorators should be preserved when possible to allow for direct immutable\r\n * List comparison.\r\n */\r\nfunction regenerateTreeForNewDecorator(\r\n  content: ContentState,\r\n  blockMap: BlockMap,\r\n  previousTreeMap: OrderedMap<string, List<any>>,\r\n  decorator: DraftDecoratorType,\r\n  existingDecorator: DraftDecoratorType,\r\n): OrderedMap<string, List<any>> {\r\n  return previousTreeMap.merge(\r\n    blockMap\r\n      .toSeq()\r\n      .filter(block => {\r\n        return (\r\n          decorator.getDecorations(block, content) !==\r\n          existingDecorator.getDecorations(block, content)\r\n        );\r\n      })\r\n      .map(block => BlockTree.generate(content, block, decorator)),\r\n  );\r\n}\r\n\r\n/**\r\n * Return whether a change should be considered a boundary state, given\r\n * the previous change type. Allows us to discard potential boundary states\r\n * during standard typing or deletion behavior.\r\n */\r\nfunction mustBecomeBoundary(\r\n  editorState: EditorState,\r\n  changeType: EditorChangeType,\r\n): boolean {\r\n  const lastChangeType = editorState.getLastChangeType();\r\n  return (\r\n    changeType !== lastChangeType ||\r\n    (changeType !== 'insert-characters' &&\r\n      changeType !== 'backspace-character' &&\r\n      changeType !== 'delete-character')\r\n  );\r\n}\r\n\r\nfunction getInlineStyleForCollapsedSelection(\r\n  content: ContentState,\r\n  selection: SelectionState,\r\n): DraftInlineStyle {\r\n  const startKey = selection.getStartKey();\r\n  const startOffset = selection.getStartOffset();\r\n  const startBlock = content.getBlockForKey(startKey);\r\n\r\n  // If the cursor is not at the start of the block, look backward to\r\n  // preserve the style of the preceding character.\r\n  if (startOffset > 0) {\r\n    return startBlock.getInlineStyleAt(startOffset - 1);\r\n  }\r\n\r\n  // The caret is at position zero in this block. If the block has any\r\n  // text at all, use the style of the first character.\r\n  if (startBlock.getLength()) {\r\n    return startBlock.getInlineStyleAt(0);\r\n  }\r\n\r\n  // Otherwise, look upward in the document to find the closest character.\r\n  return lookUpwardForInlineStyle(content, startKey);\r\n}\r\n\r\nfunction getInlineStyleForNonCollapsedSelection(\r\n  content: ContentState,\r\n  selection: SelectionState,\r\n): DraftInlineStyle {\r\n  const startKey = selection.getStartKey();\r\n  const startOffset = selection.getStartOffset();\r\n  const startBlock = content.getBlockForKey(startKey);\r\n\r\n  // If there is a character just inside the selection, use its style.\r\n  if (startOffset < startBlock.getLength()) {\r\n    return startBlock.getInlineStyleAt(startOffset);\r\n  }\r\n\r\n  // Check if the selection at the end of a non-empty block. Use the last\r\n  // style in the block.\r\n  if (startOffset > 0) {\r\n    return startBlock.getInlineStyleAt(startOffset - 1);\r\n  }\r\n\r\n  // Otherwise, look upward in the document to find the closest character.\r\n  return lookUpwardForInlineStyle(content, startKey);\r\n}\r\n\r\nfunction lookUpwardForInlineStyle(\r\n  content: ContentState,\r\n  fromKey: string,\r\n): DraftInlineStyle {\r\n  const lastNonEmpty = content\r\n    .getBlockMap()\r\n    .reverse()\r\n    .skipUntil((_, k) => k === fromKey)\r\n    .skip(1)\r\n    .skipUntil((block:any, _) => block.getLength())\r\n    .first();\r\n\r\n  if (lastNonEmpty) {\r\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\r\n  }\r\n  return OrderedSet();\r\n}\r\n\r\nexport default  EditorState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  {DraftInsertionType} from '../constants/DraftInsertionType';\r\n\r\nimport ContentBlockNode  from '../immutable/ContentBlockNode';\r\n\r\nimport getNextDelimiterBlockKey from './exploration/getNextDelimiterBlockKey';\r\nimport { OrderedMap,List } from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n\r\nconst transformBlock = (\r\n  key: string,\r\n  blockMap: BlockMap,\r\n  func: (block: ContentBlockNode) => ContentBlockNode,\r\n): void => {\r\n  if (!key) {\r\n    return;\r\n  }\r\n\r\n  const block:any = blockMap.get(key);\r\n\r\n  if (!block) {\r\n    return;\r\n  }\r\n\r\n  blockMap.set(key, func(block));\r\n};\r\n\r\nconst updateBlockMapLinks = (\r\n  blockMap: BlockMap,\r\n  originalBlockToBeMoved: BlockNodeRecord,\r\n  originalTargetBlock: BlockNodeRecord,\r\n  insertionMode: DraftInsertionType,\r\n  isExperimentalTreeBlock: boolean,\r\n): BlockMap => {\r\n  if (!isExperimentalTreeBlock) {\r\n    return blockMap;\r\n  }\r\n  // possible values of 'insertionMode' are: 'after', 'before'\r\n  const isInsertedAfterTarget = insertionMode === 'after';\r\n\r\n  const originalBlockKey = originalBlockToBeMoved.getKey();\r\n  const originalTargetKey = originalTargetBlock.getKey();\r\n  const originalParentKey = originalBlockToBeMoved.getParentKey();\r\n  const originalNextSiblingKey = originalBlockToBeMoved.getNextSiblingKey();\r\n  const originalPrevSiblingKey = originalBlockToBeMoved.getPrevSiblingKey();\r\n  const newParentKey = originalTargetBlock.getParentKey();\r\n  const newNextSiblingKey = isInsertedAfterTarget\r\n    ? originalTargetBlock.getNextSiblingKey()\r\n    : originalTargetKey;\r\n  const newPrevSiblingKey = isInsertedAfterTarget\r\n    ? originalTargetKey\r\n    : originalTargetBlock.getPrevSiblingKey();\r\n\r\n  return blockMap.withMutations(blocks => {\r\n    // update old parent\r\n    transformBlock(originalParentKey, blocks, (block:any) => {\r\n      const parentChildrenList = block.getChildKeys();\r\n      return block.merge({\r\n        children: parentChildrenList.delete(\r\n          parentChildrenList.indexOf(originalBlockKey),\r\n        ),\r\n      });\r\n    });\r\n\r\n    // update old prev\r\n    transformBlock(originalPrevSiblingKey, blocks, block =>\r\n      block.merge({\r\n        nextSibling: originalNextSiblingKey,\r\n      }) as any ,\r\n    );\r\n\r\n    // update old next\r\n    transformBlock(originalNextSiblingKey, blocks, block =>\r\n      block.merge({\r\n        prevSibling: originalPrevSiblingKey,\r\n      }) as any ,\r\n    );\r\n\r\n    // update new next\r\n    transformBlock(newNextSiblingKey, blocks, block =>\r\n      block.merge({\r\n        prevSibling: originalBlockKey,\r\n      }) as any,\r\n    );\r\n\r\n    // update new prev\r\n    transformBlock(newPrevSiblingKey, blocks, block =>\r\n      block.merge({\r\n        nextSibling: originalBlockKey,\r\n      }) as any,\r\n    );\r\n\r\n    // update new parent\r\n    transformBlock(newParentKey, blocks, (block:any) => {\r\n      const newParentChildrenList = block.getChildKeys();\r\n      const targetBlockIndex = newParentChildrenList.indexOf(originalTargetKey);\r\n\r\n      const insertionIndex = isInsertedAfterTarget\r\n        ? targetBlockIndex + 1\r\n        : targetBlockIndex !== 0\r\n        ? targetBlockIndex - 1\r\n        : 0;\r\n\r\n      const newChildrenArray = newParentChildrenList.toArray();\r\n      newChildrenArray.splice(insertionIndex, 0, originalBlockKey);\r\n\r\n      return block.merge({\r\n        children: List(newChildrenArray),\r\n      });\r\n    });\r\n\r\n    // update block\r\n    transformBlock(originalBlockKey, blocks, block =>\r\n      block.merge({\r\n        nextSibling: newNextSiblingKey,\r\n        prevSibling: newPrevSiblingKey,\r\n        parent: newParentKey,\r\n      }) as any,\r\n    );\r\n  });\r\n};\r\n\r\nconst moveBlockInContentState = (\r\n  contentState: ContentState,\r\n  blockToBeMoved: BlockNodeRecord,\r\n  targetBlock: BlockNodeRecord,\r\n  insertionMode: DraftInsertionType,\r\n): ContentState => {\r\n  invariant(insertionMode !== 'replace', 'Replacing blocks is not supported.');\r\n\r\n  const targetKey = targetBlock.getKey();\r\n  const blockKey = blockToBeMoved.getKey();\r\n\r\n  invariant(blockKey !== targetKey, 'Block cannot be moved next to itself.');\r\n\r\n  const blockMap = contentState.getBlockMap();\r\n  const isExperimentalTreeBlock = blockToBeMoved instanceof ContentBlockNode;\r\n\r\n  let blocksToBeMoved = [blockToBeMoved];\r\n  let blockMapWithoutBlocksToBeMoved = blockMap.delete(blockKey);\r\n\r\n  if (isExperimentalTreeBlock) {\r\n    blocksToBeMoved = [];\r\n    blockMapWithoutBlocksToBeMoved = blockMap.withMutations(blocks => {\r\n      const nextSiblingKey = blockToBeMoved.getNextSiblingKey();\r\n      const nextDelimiterBlockKey = getNextDelimiterBlockKey(\r\n        blockToBeMoved,\r\n        blocks,\r\n      );\r\n\r\n      blocks\r\n        .toSeq()\r\n        .skipUntil(block => block.getKey() === blockKey)\r\n        .takeWhile(block => {\r\n          const key = block.getKey();\r\n          const isBlockToBeMoved = key === blockKey;\r\n          const hasNextSiblingAndIsNotNextSibling =\r\n            nextSiblingKey && key !== nextSiblingKey;\r\n          const doesNotHaveNextSiblingAndIsNotDelimiter =\r\n            !nextSiblingKey &&\r\n            block.getParentKey() &&\r\n            (!nextDelimiterBlockKey || key !== nextDelimiterBlockKey);\r\n\r\n          return !!(\r\n            isBlockToBeMoved ||\r\n            hasNextSiblingAndIsNotNextSibling ||\r\n            doesNotHaveNextSiblingAndIsNotDelimiter\r\n          );\r\n        })\r\n        .forEach(block => {\r\n          blocksToBeMoved.push(block);\r\n          blocks.delete(block.getKey());\r\n        });\r\n    });\r\n  }\r\n\r\n  const blocksBefore = blockMapWithoutBlocksToBeMoved\r\n    .toSeq()\r\n    .takeUntil(v => v === targetBlock);\r\n\r\n  const blocksAfter = blockMapWithoutBlocksToBeMoved\r\n    .toSeq()\r\n    .skipUntil(v => v === targetBlock)\r\n    .skip(1);\r\n\r\n  const slicedBlocks = blocksToBeMoved.map(block => [block.getKey(), block]);\r\n\r\n  let newBlocks:any = OrderedMap();\r\n\r\n  if (insertionMode === 'before') {\r\n    const blockBefore = contentState.getBlockBefore(targetKey);\r\n\r\n    invariant(\r\n      !blockBefore || blockBefore.getKey() !== blockToBeMoved.getKey(),\r\n      'Block cannot be moved next to itself.',\r\n    );\r\n\r\n    newBlocks = blocksBefore\r\n      .concat([...slicedBlocks, [targetKey, targetBlock]], blocksAfter)\r\n      .toOrderedMap();\r\n  } else if (insertionMode === 'after') {\r\n    const blockAfter = contentState.getBlockAfter(targetKey);\r\n\r\n    invariant(\r\n      !blockAfter || blockAfter.getKey() !== blockKey,\r\n      'Block cannot be moved next to itself.',\r\n    );\r\n\r\n    newBlocks = blocksBefore\r\n      .concat([[targetKey, targetBlock], ...slicedBlocks], blocksAfter)\r\n      .toOrderedMap();\r\n  }\r\n\r\n  return contentState.merge({\r\n    blockMap: updateBlockMapLinks(\r\n      newBlocks,\r\n      blockToBeMoved,\r\n      targetBlock,\r\n      insertionMode,\r\n      isExperimentalTreeBlock,\r\n    ),\r\n    selectionBefore: contentState.getSelectionAfter(),\r\n    selectionAfter: contentState.getSelectionAfter().merge({\r\n      anchorKey: blockKey,\r\n      focusKey: blockKey,\r\n    }),\r\n  }) as any;\r\n};\r\n\r\nexport default  moveBlockInContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport {DraftInsertionType} from '../constants/DraftInsertionType';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport BlockMapBuilder from '../immutable/BlockMapBuilder';\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport ContentBlock from '../immutable/ContentBlock';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\nimport DraftModifier from './DraftModifier';\r\nimport EditorState from '../immutable/EditorState';\r\n\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport gkx from '../../stubs/gkx';\r\nimport {List, Repeat} from 'immutable';\r\nimport moveBlockInContentState from '../transaction/moveBlockInContentState';\r\n\r\nconst experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\nconst ContentBlockRecord = experimentalTreeDataSupport\r\n  ? ContentBlockNode\r\n  : ContentBlock;\r\n\r\n\r\nconst AtomicBlockUtils = {\r\n  insertAtomicBlock: function(\r\n    editorState: EditorState,\r\n    entityKey: string,\r\n    character: string,\r\n  ): EditorState {\r\n    const contentState = editorState.getCurrentContent();\r\n    const selectionState = editorState.getSelection();\r\n\r\n    const afterRemoval = DraftModifier.removeRange(\r\n      contentState,\r\n      selectionState,\r\n      'backward',\r\n    );\r\n\r\n    const targetSelection = afterRemoval.getSelectionAfter();\r\n    const afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\r\n    const insertionTarget = afterSplit.getSelectionAfter();\r\n\r\n    const asAtomicBlock = DraftModifier.setBlockType(\r\n      afterSplit,\r\n      insertionTarget,\r\n      'atomic',\r\n    );\r\n\r\n    const charData = CharacterMetadata.create({entity: entityKey});\r\n\r\n    let atomicBlockConfig:any = {\r\n      key: generateRandomKey(),\r\n      type: 'atomic',\r\n      text: character,\r\n      characterList: List(Repeat(charData, character.length)),\r\n    };\r\n\r\n    let atomicDividerBlockConfig:any = {\r\n      key: generateRandomKey(),\r\n      type: 'unstyled',\r\n    };\r\n\r\n    if (experimentalTreeDataSupport) {\r\n      atomicBlockConfig = {\r\n        ...atomicBlockConfig,\r\n        nextSibling: atomicDividerBlockConfig.key,\r\n      };\r\n      atomicDividerBlockConfig = {\r\n        ...atomicDividerBlockConfig,\r\n        prevSibling: atomicBlockConfig.key,\r\n      };\r\n    }\r\n\r\n    const fragmentArray = [\r\n      new ContentBlockRecord(atomicBlockConfig),\r\n      new ContentBlockRecord(atomicDividerBlockConfig),\r\n    ];\r\n\r\n    const fragment = BlockMapBuilder.createFromArray(fragmentArray);\r\n\r\n    const withAtomicBlock = DraftModifier.replaceWithFragment(\r\n      asAtomicBlock,\r\n      insertionTarget,\r\n      fragment,\r\n    );\r\n\r\n    const newContent:any = withAtomicBlock.merge({\r\n      selectionBefore: selectionState,\r\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true),\r\n    });\r\n\r\n    return EditorState.push(editorState, newContent, 'insert-fragment');\r\n  },\r\n\r\n  moveAtomicBlock: function(\r\n    editorState: EditorState,\r\n    atomicBlock: BlockNodeRecord,\r\n    targetRange: SelectionState,\r\n    insertionMode?: DraftInsertionType,\r\n  ): EditorState {\r\n    const contentState = editorState.getCurrentContent();\r\n    const selectionState = editorState.getSelection();\r\n\r\n    let withMovedAtomicBlock;\r\n\r\n    if (insertionMode === 'before' || insertionMode === 'after') {\r\n      const targetBlock = contentState.getBlockForKey(\r\n        insertionMode === 'before'\r\n          ? targetRange.getStartKey()\r\n          : targetRange.getEndKey(),\r\n      );\r\n\r\n      withMovedAtomicBlock = moveBlockInContentState(\r\n        contentState,\r\n        atomicBlock,\r\n        targetBlock,\r\n        insertionMode,\r\n      );\r\n    } else {\r\n      const afterRemoval = DraftModifier.removeRange(\r\n        contentState,\r\n        targetRange,\r\n        'backward',\r\n      );\r\n\r\n      const selectionAfterRemoval = afterRemoval.getSelectionAfter();\r\n      const targetBlock = afterRemoval.getBlockForKey(\r\n        selectionAfterRemoval.getFocusKey(),\r\n      );\r\n\r\n      if (selectionAfterRemoval.getStartOffset() === 0) {\r\n        withMovedAtomicBlock = moveBlockInContentState(\r\n          afterRemoval,\r\n          atomicBlock,\r\n          targetBlock,\r\n          'before',\r\n        );\r\n      } else if (\r\n        selectionAfterRemoval.getEndOffset() === targetBlock.getLength()\r\n      ) {\r\n        withMovedAtomicBlock = moveBlockInContentState(\r\n          afterRemoval,\r\n          atomicBlock,\r\n          targetBlock,\r\n          'after',\r\n        );\r\n      } else {\r\n        const afterSplit = DraftModifier.splitBlock(\r\n          afterRemoval,\r\n          selectionAfterRemoval,\r\n        );\r\n\r\n        const selectionAfterSplit = afterSplit.getSelectionAfter();\r\n        const targetBlock = afterSplit.getBlockForKey(\r\n          selectionAfterSplit.getFocusKey(),\r\n        );\r\n\r\n        withMovedAtomicBlock = moveBlockInContentState(\r\n          afterSplit,\r\n          atomicBlock,\r\n          targetBlock,\r\n          'before',\r\n        );\r\n      }\r\n    }\r\n\r\n    const newContent = withMovedAtomicBlock.merge({\r\n      selectionBefore: selectionState,\r\n      selectionAfter: withMovedAtomicBlock\r\n        .getSelectionAfter()\r\n        .set('hasFocus', true),\r\n    });\r\n\r\n    return EditorState.push(editorState, newContent, 'move-block');\r\n  },\r\n};\r\n\r\nexport default  AtomicBlockUtils;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { BlockNodeRecord } from \"../immutable/BlockNodeRecord\";\r\nimport ContentState from \"../immutable/ContentState\";\r\nimport { DraftDecorator } from \"./DraftDecorator\";\r\n\r\nimport { List } from \"immutable\";\r\n\r\nconst DELIMITER = \".\";\r\n\r\n/**\r\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\r\n * instances to identify sections of a ContentBlock that should be rendered\r\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\r\n * be intended to stand out visually, be rendered as anchors, etc.\r\n *\r\n * The list of decorators supplied to the constructor will be used in the\r\n * order they are provided. This allows the caller to specify a priority for\r\n * string matching, in case of match collisions among decorators.\r\n *\r\n * For instance, I may have a link with a `#` in its text. Though this section\r\n * of text may match our hashtag decorator, it should not be treated as a\r\n * hashtag. I should therefore list my link DraftDecorator\r\n * before my hashtag DraftDecorator when constructing this composite\r\n * decorator instance.\r\n *\r\n * Thus, when a collision like this is encountered, the earlier match is\r\n * preserved and the new match is discarded.\r\n */\r\nclass CompositeDraftDecorator {\r\n    _decorators: Array<DraftDecorator>;\r\n\r\n    constructor(decorators: Array<DraftDecorator>) {\r\n        // Copy the decorator array, since we use this array order to determine\r\n        // precedence of decoration matching. If the array is mutated externally,\r\n        // we don't want to be affected here.\r\n        this._decorators = decorators.slice();\r\n    }\r\n\r\n    getDecorations(block: BlockNodeRecord, contentState: ContentState): List<string> {\r\n        const decorations = Array(block.getText().length).fill(null);\r\n\r\n        this._decorators.forEach((/*object*/ decorator, /*number*/ ii) => {\r\n            let counter = 0;\r\n            const strategy = decorator.strategy;\r\n            const callback = (/*number*/ start, /*number*/ end) => {\r\n                // Find out if any of our matching range is already occupied\r\n                // by another decorator. If so, discard the match. Otherwise, store\r\n                // the component key for rendering.\r\n                if (canOccupySlice(decorations, start, end)) {\r\n                    occupySlice(decorations, start, end, ii + DELIMITER + counter);\r\n                    counter++;\r\n                }\r\n            };\r\n            strategy(block, callback, contentState);\r\n        });\r\n\r\n        return List(decorations);\r\n    }\r\n\r\n    getComponentForKey(key: string): Function {\r\n        const componentKey = parseInt(key.split(DELIMITER)[0], 10);\r\n        return this._decorators[componentKey].component;\r\n    }\r\n\r\n    getPropsForKey(key: string): Object {\r\n        const componentKey = parseInt(key.split(DELIMITER)[0], 10);\r\n        return this._decorators[componentKey].props;\r\n    }\r\n}\r\n\r\n/**\r\n * Determine whether we can occupy the specified slice of the decorations\r\n * array.\r\n */\r\nfunction canOccupySlice(decorations: Array<string>, start: number, end: number): boolean {\r\n    for (let ii = start; ii < end; ii++) {\r\n        if (decorations[ii] != null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Splice the specified component into our decoration array at the desired\r\n * range.\r\n */\r\nfunction occupySlice(targetArr: Array<string>, start: number, end: number, componentKey: string): void {\r\n    for (let ii = start; ii < end; ii++) {\r\n        targetArr[ii] = componentKey;\r\n    }\r\n}\r\n\r\nexport default CompositeDraftDecorator;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {DraftBlockRenderConfig} from './DraftBlockRenderConfig';\r\nimport  {CoreDraftBlockType} from '../constants/DraftBlockType';\r\n\r\nimport React from 'react'\r\nimport cx from 'fbjs/lib/cx';\r\n\r\nimport {Map} from 'immutable';\r\n\r\ntype DefaultCoreDraftBlockRenderMap = Map<\r\n  CoreDraftBlockType,\r\n  DraftBlockRenderConfig\r\n>;\r\n\r\nconst UL_WRAP = <ul className={cx('public/DraftStyleDefault/ul')} />;\r\nconst OL_WRAP = <ol className={cx('public/DraftStyleDefault/ol')} />;\r\nconst PRE_WRAP = <pre className={cx('public/DraftStyleDefault/pre')} />;\r\n\r\nconst DefaultDraftBlockRenderMap: DefaultCoreDraftBlockRenderMap = Map<CoreDraftBlockType, any>({\r\n  'header-one': {\r\n    element: 'h1',\r\n  },\r\n  'header-two': {\r\n    element: 'h2',\r\n  },\r\n  'header-three': {\r\n    element: 'h3',\r\n  },\r\n  'header-four': {\r\n    element: 'h4',\r\n  },\r\n  'header-five': {\r\n    element: 'h5',\r\n  },\r\n  'header-six': {\r\n    element: 'h6',\r\n  },\r\n  section: {\r\n    element: 'section',\r\n  },\r\n  article: {\r\n    element: 'article',\r\n  },\r\n  'unordered-list-item': {\r\n    element: 'li',\r\n    wrapper: UL_WRAP,\r\n  },\r\n  'ordered-list-item': {\r\n    element: 'li',\r\n    wrapper: OL_WRAP,\r\n  },\r\n  blockquote: {\r\n    element: 'blockquote',\r\n  },\r\n  atomic: {\r\n    element: 'figure',\r\n  },\r\n  'code-block': {\r\n    element: 'pre',\r\n    wrapper: PRE_WRAP,\r\n  },\r\n  unstyled: {\r\n    element: 'div',\r\n    aliasedElements: ['p'],\r\n  },\r\n});\r\n\r\nexport default  DefaultDraftBlockRenderMap;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nexport default  {\r\n  BOLD: {\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n  CODE: {\r\n    fontFamily: 'monospace',\r\n    wordWrap: 'break-word',\r\n  },\r\n\r\n  ITALIC: {\r\n    fontStyle: 'italic',\r\n  },\r\n\r\n  STRIKETHROUGH: {\r\n    textDecoration: 'line-through',\r\n  },\r\n\r\n  UNDERLINE: {\r\n    textDecoration: 'underline',\r\n  },\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\nfunction getCorrectDocumentFromNode(node: Node): Document {\r\n  if (!node || !node.ownerDocument) {\r\n    return document;\r\n  }\r\n  return node.ownerDocument;\r\n}\r\n\r\nexport default  getCorrectDocumentFromNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\nfunction isElement(node: Node): boolean {\r\n  if (!node || !node.ownerDocument) {\r\n    return false;\r\n  }\r\n  return node.nodeType === Node.ELEMENT_NODE;\r\n}\r\n\r\nexport default  isElement;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Get offset key from a node or it's child nodes. Return the first offset key\r\n * found on the DOM tree of given node.\r\n */\r\nimport isElement from '../utils/isElement';\r\n\r\nfunction getSelectionOffsetKeyForNode(node: Node): string {\r\n  if (isElement(node)) {\r\n    const castedNode: Element = (node as any);\r\n    const offsetKey = castedNode.getAttribute('data-offset-key');\r\n    if (offsetKey) {\r\n      return offsetKey;\r\n    }\r\n    for (let ii = 0; ii < castedNode.childNodes.length; ii++) {\r\n      const childOffsetKey = getSelectionOffsetKeyForNode(\r\n        castedNode.childNodes[ii],\r\n      );\r\n      if (childOffsetKey) {\r\n        return childOffsetKey;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default  getSelectionOffsetKeyForNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport getCorrectDocumentFromNode from '../utils/getCorrectDocumentFromNode';\r\nimport getSelectionOffsetKeyForNode from './getSelectionOffsetKeyForNode';\r\n/**\r\n * Get the key from the node's nearest offset-aware ancestor.\r\n */\r\nfunction findAncestorOffsetKey(node: Node): string {\r\n  let searchNode = node;\r\n  while (\r\n    searchNode &&\r\n    searchNode !== getCorrectDocumentFromNode(node).documentElement\r\n  ) {\r\n    const key = getSelectionOffsetKeyForNode(searchNode);\r\n    if (key != null) {\r\n      return key;\r\n    }\r\n    searchNode = searchNode.parentNode;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default  findAncestorOffsetKey;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\nfunction getWindowForNode(node: Node): any {\r\n  if (!node || !node.ownerDocument || !node.ownerDocument.defaultView) {\r\n    return window;\r\n  }\r\n  return node.ownerDocument.defaultView;\r\n}\r\n\r\nexport default  getWindowForNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport findAncestorOffsetKey from '../../selection/findAncestorOffsetKey';\r\nimport getWindowForNode from '../../utils/getWindowForNode';\r\nimport {Map} from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\n\r\ntype MutationRecordT =\r\n  | MutationRecord\r\n  | {type: 'characterData', target: Node, removedNodes?: void};\r\n\r\n// Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\r\n\r\nconst DOM_OBSERVER_OPTIONS = {\r\n  subtree: true,\r\n  characterData: true,\r\n  childList: true,\r\n  characterDataOldValue: false,\r\n  attributes: false,\r\n};\r\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\r\nconst USE_CHAR_DATA = UserAgent.isBrowser('IE <= 11');\r\n\r\nclass DOMObserver {\r\n  observer: MutationObserver;\r\n  container: HTMLElement;\r\n  mutations: Map<string, string>;\r\n  onCharData: ({target: EventTarget, type: string}) => void;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.mutations = Map();\r\n    const containerWindow = getWindowForNode(container);\r\n    if (containerWindow.MutationObserver && !USE_CHAR_DATA) {\r\n      this.observer = new containerWindow.MutationObserver(mutations =>\r\n        this.registerMutations(mutations),\r\n      );\r\n    } else {\r\n      this.onCharData = e => {\r\n        invariant(\r\n          e.target instanceof Node,\r\n          'Expected target to be an instance of Node',\r\n        );\r\n        this.registerMutation({\r\n          type: 'characterData',\r\n          target: e.target,\r\n        });\r\n      };\r\n    }\r\n  }\r\n\r\n  start(): void {\r\n    if (this.observer) {\r\n      this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);\r\n    } else {\r\n      /* $FlowFixMe(>=0.68.0 site=www,mobile) This event type is not defined\r\n       * by Flow's standard library */\r\n      this.container.addEventListener(\r\n        'DOMCharacterDataModified',\r\n        this.onCharData,\r\n      );\r\n    }\r\n  }\r\n\r\n  stopAndFlushMutations(): Map<string, string> {\r\n    const {observer} = this;\r\n    if (observer) {\r\n      this.registerMutations(observer.takeRecords());\r\n      observer.disconnect();\r\n    } else {\r\n      /* $FlowFixMe(>=0.68.0 site=www,mobile) This event type is not defined\r\n       * by Flow's standard library */\r\n      this.container.removeEventListener(\r\n        'DOMCharacterDataModified',\r\n        this.onCharData,\r\n      );\r\n    }\r\n    const mutations = this.mutations;\r\n    this.mutations = Map();\r\n    return mutations;\r\n  }\r\n\r\n  registerMutations(mutations: Array<MutationRecord>): void {\r\n    for (let i = 0; i < mutations.length; i++) {\r\n      this.registerMutation(mutations[i]);\r\n    }\r\n  }\r\n\r\n  getMutationTextContent(mutation: MutationRecordT): string {\r\n    const {type, target, removedNodes} = mutation;\r\n    if (type === 'characterData') {\r\n      // When `textContent` is '', there is a race condition that makes\r\n      // getting the offsetKey from the target not possible.\r\n      // These events are also followed by a `childList`, which is the one\r\n      // we are able to retrieve the offsetKey and apply the '' text.\r\n      if (target.textContent !== '') {\r\n        return target.textContent;\r\n      }\r\n    } else if (type === 'childList') {\r\n      if (removedNodes && removedNodes.length) {\r\n        // `characterData` events won't happen or are ignored when\r\n        // removing the last character of a leaf node, what happens\r\n        // instead is a `childList` event with a `removedNodes` array.\r\n        // For this case the textContent should be '' and\r\n        // `DraftModifier.replaceText` will make sure the content is\r\n        // updated properly.\r\n        return '';\r\n      } else if (target.textContent !== '') {\r\n        // Typing Chinese in an empty block in MS Edge results in a\r\n        // `childList` event with non-empty textContent.\r\n        // See https://github.com/facebook/draft-js/issues/2082\r\n        return target.textContent;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  registerMutation(mutation: MutationRecordT): void {\r\n    const textContent = this.getMutationTextContent(mutation);\r\n    if (textContent != null) {\r\n      const offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));\r\n      this.mutations = this.mutations.set(offsetKey, textContent);\r\n    }\r\n  }\r\n}\r\n\r\nexport default  DOMObserver;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {DraftOffsetKeyPath} from './DraftOffsetKeyPath';\r\n\r\nconst KEY_DELIMITER = '-';\r\n\r\nconst DraftOffsetKey = {\r\n  encode: function(\r\n    blockKey: string,\r\n    decoratorKey: number,\r\n    leafKey: number,\r\n  ): string {\r\n    return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;\r\n  },\r\n\r\n  decode: function(offsetKey: string): DraftOffsetKeyPath {\r\n    // Extracts the last two parts of offsetKey and captures the rest in blockKeyParts\r\n    const [leafKey, decoratorKey, ...blockKeyParts] = offsetKey\r\n      .split(KEY_DELIMITER)\r\n      .reverse();\r\n\r\n    return {\r\n      // Recomposes the parts of blockKey after reversing them\r\n      blockKey: blockKeyParts.reverse().join(KEY_DELIMITER),\r\n      decoratorKey: parseInt(decoratorKey, 10),\r\n      leafKey: parseInt(leafKey, 10),\r\n    };\r\n  },\r\n};\r\n\r\nexport default  DraftOffsetKey;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nexport default  {\r\n  logBlockedSelectionEvent: (o:any) => null,\r\n  logSelectionStateFailure: (o:any) => null,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\nfunction isHTMLElement(node: Node): boolean {\r\n  if (!node || !node.ownerDocument) {\r\n    return false;\r\n  }\r\n  if (!node.ownerDocument.defaultView) {\r\n    return node instanceof HTMLElement;\r\n  }\r\n  if (node instanceof (node.ownerDocument.defaultView as any).HTMLElement) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default  isHTMLElement;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../base/DraftEditor.react';\r\n\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isHTMLElement from './isHTMLElement';\r\n\r\nfunction getContentEditableContainer(editor: DraftEditor): HTMLElement {\r\n  const editorNode = ReactDOM.findDOMNode(editor.editorContainer);\r\n  invariant(editorNode, 'Missing editorNode');\r\n  invariant(\r\n    isHTMLElement(editorNode.firstChild),\r\n    'editorNode.firstChild is not an HTMLElement',\r\n  );\r\n  const htmlElement = (editorNode.firstChild as any);\r\n  return htmlElement;\r\n}\r\n\r\nexport default  getContentEditableContainer;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../model/immutable/EditorState';\r\nimport  SelectionState from '../../model/immutable/SelectionState';\r\n\r\nimport DraftOffsetKey from './DraftOffsetKey';\r\n\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\nfunction getUpdatedSelectionState(\r\n  editorState: EditorState,\r\n  anchorKey: string,\r\n  anchorOffset: number,\r\n  focusKey: string,\r\n  focusOffset: number,\r\n): SelectionState {\r\n  const selection: SelectionState = nullthrows(editorState.getSelection());\r\n  if (window['__DEV__']) {\r\n    if (!anchorKey || !focusKey) {\r\n      /* eslint-disable-next-line */\r\n      console.warn('Invalid selection state.', arguments, editorState.toJS());\r\n      return selection;\r\n    }\r\n  }\r\n\r\n  const anchorPath = DraftOffsetKey.decode(anchorKey);\r\n  const anchorBlockKey = anchorPath.blockKey;\r\n  const anchorLeaf = editorState\r\n    .getBlockTree(anchorBlockKey)\r\n    .getIn([anchorPath.decoratorKey, 'leaves', anchorPath.leafKey]);\r\n\r\n  const focusPath = DraftOffsetKey.decode(focusKey);\r\n  const focusBlockKey = focusPath.blockKey;\r\n  const focusLeaf = editorState\r\n    .getBlockTree(focusBlockKey)\r\n    .getIn([focusPath.decoratorKey, 'leaves', focusPath.leafKey]);\r\n\r\n  if (!anchorLeaf || !focusLeaf) {\r\n    // If we cannot make sense of the updated selection state, stick to the current one.\r\n    if (window['__DEV__']) {\r\n      /* eslint-disable-next-line */\r\n      console.warn('Invalid selection state.', arguments, editorState.toJS());\r\n    }\r\n    return selection;\r\n  }\r\n\r\n  const anchorLeafStart: number = anchorLeaf.get('start');\r\n  const focusLeafStart: number = focusLeaf.get('start');\r\n\r\n  const anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;\r\n  const focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;\r\n\r\n  const areEqual =\r\n    selection.getAnchorKey() === anchorBlockKey &&\r\n    selection.getAnchorOffset() === anchorBlockOffset &&\r\n    selection.getFocusKey() === focusBlockKey &&\r\n    selection.getFocusOffset() === focusBlockOffset;\r\n\r\n  if (areEqual) {\r\n    return selection;\r\n  }\r\n\r\n  let isBackward = false;\r\n  if (anchorBlockKey === focusBlockKey) {\r\n    const anchorLeafEnd: number = anchorLeaf.get('end');\r\n    const focusLeafEnd: number = focusLeaf.get('end');\r\n    if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {\r\n      isBackward = focusOffset < anchorOffset;\r\n    } else {\r\n      isBackward = focusLeafStart < anchorLeafStart;\r\n    }\r\n  } else {\r\n    const startKey = editorState\r\n      .getCurrentContent()\r\n      .getBlockMap()\r\n      .keySeq()\r\n      .skipUntil(v => v === anchorBlockKey || v === focusBlockKey)\r\n      .first();\r\n    isBackward = startKey === focusBlockKey;\r\n  }\r\n\r\n  return selection.merge({\r\n    anchorKey: anchorBlockKey,\r\n    anchorOffset: anchorBlockOffset,\r\n    focusKey: focusBlockKey,\r\n    focusOffset: focusBlockOffset,\r\n    isBackward,\r\n  }) as any;\r\n}\r\n\r\nexport default  getUpdatedSelectionState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { DOMDerivedSelection } from \"./DOMDerivedSelection\";\r\nimport EditorState from \"../../model/immutable/EditorState\";\r\n\r\nimport findAncestorOffsetKey from \"./findAncestorOffsetKey\";\r\nimport getSelectionOffsetKeyForNode from \"./getSelectionOffsetKeyForNode\";\r\nimport getUpdatedSelectionState from \"./getUpdatedSelectionState\";\r\nimport invariant from \"fbjs/lib/invariant\";\r\nimport isElement from \"../utils/isElement\";\r\nimport nullthrows from \"fbjs/lib/nullthrows\";\r\n\r\ntype SelectionPoint = {\r\n    key: string;\r\n    offset: number;\r\n};\r\n\r\n/**\r\n * Convert the current selection range to an anchor/focus pair of offset keys\r\n * and values that can be interpreted by components.\r\n */\r\nfunction getDraftEditorSelectionWithNodes(editorState: EditorState, root: HTMLElement, anchorNode: Node, anchorOffset: number, focusNode: Node, focusOffset: number): DOMDerivedSelection {\r\n    const anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;\r\n    const focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE;\r\n\r\n    // If the selection range lies only on text nodes, the task is simple.\r\n    // Find the nearest offset-aware elements and use the\r\n    // offset values supplied by the selection range.\r\n    if (anchorIsTextNode && focusIsTextNode) {\r\n        // if(anchorNode.parentElement.isContentEditable === false) {\r\n        //   anchorOffset = 1;\r\n        // }\r\n        // if(focusNode.parentElement.isContentEditable === false) {\r\n        //   focusOffset = 1;\r\n        // }\r\n        return {\r\n            selectionState: getUpdatedSelectionState(editorState, nullthrows(findAncestorOffsetKey(anchorNode)), anchorOffset, nullthrows(findAncestorOffsetKey(focusNode)), focusOffset),\r\n            needsRecovery: false\r\n        };\r\n    }\r\n\r\n    let anchorPoint = null;\r\n    let focusPoint = null;\r\n    let needsRecovery = true;\r\n\r\n    // An element is selected. Convert this selection range into leaf offset\r\n    // keys and offset values for consumption at the component level. This\r\n    // is common in Firefox, where select-all and triple click behavior leads\r\n    // to entire elements being selected.\r\n    //\r\n    // Note that we use the `needsRecovery` parameter in the callback here. This\r\n    // is because when certain elements are selected, the behavior for subsequent\r\n    // cursor movement (e.g. via arrow keys) is uncertain and may not match\r\n    // expectations at the component level. For example, if an entire <div> is\r\n    // selected and the user presses the right arrow, Firefox keeps the selection\r\n    // on the <div>. If we allow subsequent keypresses to insert characters\r\n    // natively, they will be inserted into a browser-created text node to the\r\n    // right of that <div>. This is obviously undesirable.\r\n    //\r\n    // With the `needsRecovery` flag, we inform the caller that it is responsible\r\n    // for manually setting the selection state on the rendered document to\r\n    // ensure proper selection state maintenance.\r\n\r\n    if (anchorIsTextNode) {\r\n        // if(anchorNode.parentElement.isContentEditable === false) {\r\n        //   anchorOffset = 1;\r\n        // }\r\n        anchorPoint = {\r\n            key: nullthrows(findAncestorOffsetKey(anchorNode)),\r\n            offset: anchorOffset\r\n        };\r\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);\r\n    } else if (focusIsTextNode) {\r\n        // if(focusNode.parentElement.isContentEditable === false) {\r\n        //   focusOffset = 1;\r\n        // }\r\n        focusPoint = {\r\n            key: nullthrows(findAncestorOffsetKey(focusNode)),\r\n            offset: focusOffset\r\n        };\r\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\r\n    } else {\r\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\r\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);\r\n        // If the selection is collapsed on an empty block, don't force recovery.\r\n        // This way, on arrow key selection changes, the browser can move the\r\n        // cursor from a non-zero offset on one block, through empty blocks,\r\n        // to a matching non-zero offset on other text blocks.\r\n        if (anchorNode === focusNode && anchorOffset === focusOffset) {\r\n            needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== \"BR\";\r\n        }\r\n    }\r\n\r\n    return {\r\n        selectionState: getUpdatedSelectionState(editorState, anchorPoint.key, anchorPoint.offset, focusPoint.key, focusPoint.offset),\r\n        needsRecovery\r\n    };\r\n}\r\n\r\n/**\r\n * Identify the first leaf descendant for the given node.\r\n */\r\nfunction getFirstLeaf(node: any): Node {\r\n    while (\r\n        node.firstChild &&\r\n        // data-blocks has no offset\r\n        ((isElement(node.firstChild) && (node.firstChild as Element).getAttribute(\"data-blocks\") === \"true\") || getSelectionOffsetKeyForNode(node.firstChild))\r\n    ) {\r\n        node = node.firstChild;\r\n    }\r\n    return node;\r\n}\r\n\r\n/**\r\n * Identify the last leaf descendant for the given node.\r\n */\r\nfunction getLastLeaf(node: any): Node {\r\n    while (\r\n        node.lastChild &&\r\n        // data-blocks has no offset\r\n        ((isElement(node.lastChild) && node.lastChild.getAttribute(\"data-blocks\") === \"true\") || getSelectionOffsetKeyForNode(node.lastChild))\r\n    ) {\r\n        node = node.lastChild;\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction getPointForNonTextNode(editorRoot: HTMLElement, startNode: Node, childOffset: number): SelectionPoint {\r\n    let node: any = startNode;\r\n    const offsetKey: string = findAncestorOffsetKey(node);\r\n\r\n    invariant(offsetKey != null || (editorRoot && (editorRoot === node || editorRoot.firstChild === node)), \"Unknown node in selection range.\");\r\n\r\n    // If the editorRoot is the selection, step downward into the content\r\n    // wrapper.\r\n    if (editorRoot === node) {\r\n        node = node.firstChild;\r\n        invariant(isElement(node), \"Invalid DraftEditorContents node.\");\r\n        const castedNode: Element = node as any;\r\n\r\n        // assignment only added for flow :/\r\n        // otherwise it throws in line 200 saying that node can be null or undefined\r\n        node = castedNode;\r\n        invariant(node.getAttribute(\"data-contents\") === \"true\", \"Invalid DraftEditorContents structure.\");\r\n        if (childOffset > 0) {\r\n            childOffset = node.childNodes.length;\r\n        }\r\n    }\r\n\r\n    // If the child offset is zero and we have an offset key, we're done.\r\n    // If there's no offset key because the entire editor is selected,\r\n    // find the leftmost (\"first\") leaf in the tree and use that as the offset\r\n    // key.\r\n    if (childOffset === 0) {\r\n        let key: string = null;\r\n        if (offsetKey != null) {\r\n            key = offsetKey;\r\n        } else {\r\n            const firstLeaf = getFirstLeaf(node);\r\n            key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));\r\n        }\r\n        return { key, offset: 0 };\r\n    }\r\n\r\n    const nodeBeforeCursor = node.childNodes[childOffset - 1];\r\n    let leafKey: string = null;\r\n    let textLength: number = null;\r\n\r\n    if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {\r\n        // Our target node may be a leaf or a text node, in which case we're\r\n        // already where we want to be and can just use the child's length as\r\n        // our offset.\r\n        leafKey = nullthrows(offsetKey);\r\n        textLength = getTextContentLength(nodeBeforeCursor);\r\n    } else {\r\n        // Otherwise, we'll look at the child to the left of the cursor and find\r\n        // the last leaf node in its subtree.\r\n        const lastLeaf: any = getLastLeaf(nodeBeforeCursor);\r\n        leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));\r\n        textLength = getTextContentLength(lastLeaf);\r\n    }\r\n    // gland\r\n    if (startNode && (startNode as any).dataset.text === \"object\") {\r\n        textLength = 1;\r\n    }\r\n    return {\r\n        key: leafKey,\r\n        offset: textLength\r\n    };\r\n}\r\n\r\n/**\r\n * Return the length of a node's textContent, regarding single newline\r\n * characters as zero-length. This allows us to avoid problems with identifying\r\n * the correct selection offset for empty blocks in IE, in which we\r\n * render newlines instead of break tags.\r\n */\r\nfunction getTextContentLength(node: any): number {\r\n    // gland\r\n    if (!node.isContentEditable) return 1;\r\n    const textContent = node.textContent;\r\n    return textContent === \"\\n\" ? 0 : textContent.length;\r\n}\r\n\r\nexport default getDraftEditorSelectionWithNodes;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {DOMDerivedSelection} from './DOMDerivedSelection';\r\nimport  EditorState from '../../model/immutable/EditorState';\r\n\r\nimport getDraftEditorSelectionWithNodes from './getDraftEditorSelectionWithNodes';\r\n\r\n/**\r\n * Convert the current selection range to an anchor/focus pair of offset keys\r\n * and values that can be interpreted by components.\r\n */\r\nfunction getDraftEditorSelection(\r\n  editorState: EditorState,\r\n  root: HTMLElement,\r\n): DOMDerivedSelection {\r\n  const selection = root.ownerDocument.defaultView.getSelection();\r\n  //console.log('sele get', selection)\r\n  // No active selection.\r\n  if (selection.rangeCount === 0) {\r\n    return {\r\n      selectionState: editorState.getSelection().set('hasFocus', false) as any,\r\n      needsRecovery: false,\r\n    };\r\n  }\r\n  return getDraftEditorSelectionWithNodes(\r\n    editorState,\r\n    root,\r\n    selection.anchorNode,\r\n    selection.anchorOffset,\r\n    selection.focusNode,\r\n    selection.focusOffset,\r\n  );\r\n}\r\n\r\nexport default  getDraftEditorSelection;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport DraftJsDebugLogging from '../../../stubs/DraftJsDebugLogging';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\n\r\nimport getContentEditableContainer from '../../utils/getContentEditableContainer';\r\nimport getDraftEditorSelection from '../../selection/getDraftEditorSelection';\r\n// @ts-ignore\r\nfunction editOnSelect(editor: DraftEditor, event): void {\r\n  if (\r\n    editor._blockSelectEvents ||\r\n    editor._latestEditorState !== editor.props.editorState\r\n  ) {\r\n    if (editor._blockSelectEvents) {\r\n      const editorState = editor.props.editorState;\r\n      const selectionState = editorState.getSelection();\r\n      DraftJsDebugLogging.logBlockedSelectionEvent({\r\n        // For now I don't think we need any other info\r\n        anonymizedDom: 'N/A',\r\n        extraParams: JSON.stringify({stacktrace: new Error().stack}),\r\n        selectionState: JSON.stringify(selectionState.toJS()),\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  let editorState = editor.props.editorState;\r\n  const documentSelection = getDraftEditorSelection(\r\n    editorState,\r\n    getContentEditableContainer(editor),\r\n  );\r\n  const updatedSelectionState = documentSelection.selectionState;\r\n\r\n    //event.persist()\r\n    //console.log('selectionState', editorState.getSelection().toJS(), event)\r\n\r\n  if (updatedSelectionState !== editorState.getSelection()) {\r\n    if (documentSelection.needsRecovery) {\r\n      editorState = EditorState.forceSelection(\r\n        editorState,\r\n        updatedSelectionState,\r\n      );\r\n    } else {\r\n      editorState = EditorState.acceptSelection(\r\n        editorState,\r\n        updatedSelectionState,\r\n      );\r\n    }\r\n    editor.update(editorState);\r\n  }\r\n}\r\n\r\nexport default  editOnSelect;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * Provides utilities for handling draftjs keys.\r\n *\r\n * @emails oncall+draft_js\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nfunction notEmptyKey(key: string): boolean {\r\n  return key != null && key != '';\r\n}\r\n\r\nexport  {\r\n  notEmptyKey,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport ContentState from '../immutable/ContentState';\r\nimport  {EntityMap} from '../immutable/EntityMap';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nimport {notEmptyKey} from '../../component/utils/draftKeyUtils';\r\n\r\n/**\r\n * Return the entity key that should be used when inserting text for the\r\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\r\n * and `SEGMENTED` entities should not be used for insertion behavior.\r\n */\r\nfunction getEntityKeyForSelection(\r\n  contentState: ContentState,\r\n  targetSelection: SelectionState,\r\n): string {\r\n  let entityKey;\r\n\r\n  if (targetSelection.isCollapsed()) {\r\n    const key = targetSelection.getAnchorKey();\r\n    const offset = targetSelection.getAnchorOffset();\r\n    if (offset > 0) {\r\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\r\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\r\n        return null;\r\n      }\r\n      return filterKey(contentState.getEntityMap(), entityKey);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const startKey = targetSelection.getStartKey();\r\n  const startOffset = targetSelection.getStartOffset();\r\n  const startBlock = contentState.getBlockForKey(startKey);\r\n\r\n  entityKey =\r\n    startOffset === startBlock.getLength()\r\n      ? null\r\n      : startBlock.getEntityAt(startOffset);\r\n\r\n  return filterKey(contentState.getEntityMap(), entityKey);\r\n}\r\n\r\n/**\r\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\r\n * return it. If not, return null.\r\n */\r\nfunction filterKey(entityMap: EntityMap, entityKey: string): string {\r\n  if (notEmptyKey(entityKey)) {\r\n    const entity = entityMap.__get(entityKey);\r\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default  getEntityKeyForSelection;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\nimport DOMObserver from './DOMObserver';\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\nimport Keys from 'fbjs/lib/Keys'\r\n\r\nimport editOnSelect from '../edit/editOnSelect';\r\nimport getContentEditableContainer from '../../utils/getContentEditableContainer';\r\nimport getDraftEditorSelection from '../../selection/getDraftEditorSelection';\r\nimport getEntityKeyForSelection from '../../../model/entity/getEntityKeyForSelection';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\n/**\r\n * Millisecond delay to allow `compositionstart` to fire again upon\r\n * `compositionend`.\r\n *\r\n * This is used for Korean input to ensure that typing can continue without\r\n * the editor trying to render too quickly. More specifically, Safari 7.1+\r\n * triggers `compositionstart` a little slower than Chrome/FF, which\r\n * leads to composed characters being resolved and re-render occurring\r\n * sooner than we want.\r\n */\r\nconst RESOLVE_DELAY = 20;\r\n\r\n/**\r\n * A handful of variables used to track the current composition and its\r\n * resolution status. These exist at the module level because it is not\r\n * possible to have compositions occurring in multiple editors simultaneously,\r\n * and it simplifies state management with respect to the DraftEditor component.\r\n */\r\nlet resolved = false;\r\nlet stillComposing = false;\r\nlet domObserver = null;\r\n\r\nfunction startDOMObserver(editor: DraftEditor) {\r\n  if (!domObserver) {\r\n    domObserver = new DOMObserver(getContentEditableContainer(editor));\r\n    domObserver.start();\r\n  }\r\n}\r\n\r\nconst DraftEditorCompositionHandler = {\r\n  /**\r\n   * A `compositionstart` event has fired while we're still in composition\r\n   * mode. Continue the current composition session to prevent a re-render.\r\n   */\r\n  onCompositionStart: function(editor: DraftEditor): void {\r\n    stillComposing = true;\r\n    startDOMObserver(editor);\r\n  },\r\n\r\n  /**\r\n   * Attempt to end the current composition session.\r\n   *\r\n   * Defer handling because browser will still insert the chars into active\r\n   * element after `compositionend`. If a `compositionstart` event fires\r\n   * before `resolveComposition` executes, our composition session will\r\n   * continue.\r\n   *\r\n   * The `resolved` flag is useful because certain IME interfaces fire the\r\n   * `compositionend` event multiple times, thus queueing up multiple attempts\r\n   * at handling the composition. Since handling the same composition event\r\n   * twice could break the DOM, we only use the first event. Example: Arabic\r\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\r\n   */\r\n  onCompositionEnd: function(editor: DraftEditor): void {\r\n    resolved = false;\r\n    stillComposing = false;\r\n    setTimeout(() => {\r\n      if (!resolved) {\r\n        DraftEditorCompositionHandler.resolveComposition(editor);\r\n      }\r\n    }, RESOLVE_DELAY);\r\n  },\r\n\r\n  onSelect: editOnSelect,\r\n\r\n  /**\r\n   * In Safari, keydown events may fire when committing compositions. If\r\n   * the arrow keys are used to commit, prevent default so that the cursor\r\n   * doesn't move, otherwise it will jump back noticeably on re-render.\r\n   */\r\n  onKeyDown: function(editor: DraftEditor, e: KeyboardEvent): void {\r\n    if (!stillComposing) {\r\n      // If a keydown event is received after compositionend but before the\r\n      // 20ms timer expires (ex: type option-E then backspace, or type A then\r\n      // backspace in 2-Set Korean), we should immediately resolve the\r\n      // composition and reinterpret the key press in edit mode.\r\n      DraftEditorCompositionHandler.resolveComposition(editor);\r\n      editor._onKeyDown(e);\r\n      return;\r\n    }\r\n    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\r\n      e.preventDefault();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Keypress events may fire when committing compositions. In Firefox,\r\n   * pressing RETURN commits the composition and inserts extra newline\r\n   * characters that we do not want. `preventDefault` allows the composition\r\n   * to be committed while preventing the extra characters.\r\n   */\r\n  onKeyPress: function(editor: DraftEditor, e: KeyboardEvent): void {\r\n    if (e.which === Keys.RETURN) {\r\n      e.preventDefault();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to insert composed characters into the document.\r\n   *\r\n   * If we are still in a composition session, do nothing. Otherwise, insert\r\n   * the characters into the document and terminate the composition session.\r\n   *\r\n   * If no characters were composed -- for instance, the user\r\n   * deleted all composed characters and committed nothing new --\r\n   * force a re-render. We also re-render when the composition occurs\r\n   * at the beginning of a leaf, to ensure that if the browser has\r\n   * created a new text node for the composition, we will discard it.\r\n   *\r\n   * Resetting innerHTML will move focus to the beginning of the editor,\r\n   * so we update to force it back to the correct place.\r\n   */\r\n  resolveComposition: function(editor: DraftEditor): void {\r\n    if (stillComposing) {\r\n      return;\r\n    }\r\n\r\n    const mutations = nullthrows(domObserver).stopAndFlushMutations();\r\n    domObserver = null;\r\n    resolved = true;\r\n\r\n    let editorState = EditorState.set(editor._latestEditorState, {\r\n      inCompositionMode: false,\r\n    });\r\n\r\n    editor.exitCurrentMode();\r\n\r\n    if (!mutations.size) {\r\n      editor.update(editorState);\r\n      return;\r\n    }\r\n\r\n    // TODO, check if Facebook still needs this flag or if it could be removed.\r\n    // Since there can be multiple mutations providing a `composedChars` doesn't\r\n    // apply well on this new model.\r\n    // if (\r\n    //   gkx('draft_handlebeforeinput_composed_text') &&\r\n    //   editor.props.handleBeforeInput &&\r\n    //   isEventHandled(\r\n    //     editor.props.handleBeforeInput(\r\n    //       composedChars,\r\n    //       editorState,\r\n    //       event.timeStamp,\r\n    //     ),\r\n    //   )\r\n    // ) {\r\n    //   return;\r\n    // }\r\n\r\n    let contentState = editorState.getCurrentContent();\r\n    mutations.forEach((composedChars, offsetKey) => {\r\n      const {blockKey, decoratorKey, leafKey} = DraftOffsetKey.decode(\r\n        offsetKey,\r\n      );\r\n\r\n      const {start, end} = editorState\r\n        .getBlockTree(blockKey)\r\n        .getIn([decoratorKey, 'leaves', leafKey]);\r\n\r\n      const replacementRange:any = editorState.getSelection().merge({\r\n        anchorKey: blockKey,\r\n        focusKey: blockKey,\r\n        anchorOffset: start,\r\n        focusOffset: end,\r\n        isBackward: false,\r\n      });\r\n\r\n      const entityKey = getEntityKeyForSelection(\r\n        contentState,\r\n        replacementRange,\r\n      );\r\n      const currentStyle = contentState\r\n        .getBlockForKey(blockKey)\r\n        .getInlineStyleAt(start);\r\n\r\n      contentState = DraftModifier.replaceText(\r\n        contentState,\r\n        replacementRange as any,\r\n        composedChars,\r\n        currentStyle,\r\n        entityKey,\r\n      );\r\n      // We need to update the editorState so the leaf node ranges are properly\r\n      // updated and multiple mutations are correctly applied.\r\n      editorState = EditorState.set(editorState, {\r\n        currentContent: contentState,\r\n      });\r\n    });\r\n\r\n    // When we apply the text changes to the ContentState, the selection always\r\n    // goes to the end of the field, but it should just stay where it is\r\n    // after compositionEnd.\r\n    const documentSelection = getDraftEditorSelection(\r\n      editorState,\r\n      getContentEditableContainer(editor),\r\n    );\r\n    const compositionEndSelectionState = documentSelection.selectionState;\r\n\r\n    editor.restoreEditorDOM();\r\n\r\n    const editorStateWithUpdatedSelection = EditorState.acceptSelection(\r\n      editorState,\r\n      compositionEndSelectionState,\r\n    );\r\n\r\n    editor.update(\r\n      EditorState.push(\r\n        editorStateWithUpdatedSelection,\r\n        contentState,\r\n        'insert-characters',\r\n      ),\r\n    );\r\n  },\r\n};\r\n\r\nexport default  DraftEditorCompositionHandler;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../../../model/immutable/BlockNodeRecord';\r\nimport  ContentState from '../../../model/immutable/ContentState';\r\nimport {DraftDecoratorType} from '../../../model/decorators/DraftDecoratorType';\r\nimport  {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\nimport  {Set} from 'immutable';\r\n\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport React, {ReactNode} from 'react'\r\nimport UnicodeBidi from 'fbjs/lib/UnicodeBidi';\r\nimport UnicodeBidiDirection from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\ntype Props = {\r\n  block: BlockNodeRecord,\r\n  children: Array<ReactNode>,\r\n  contentState: ContentState,\r\n  decorator: DraftDecoratorType,\r\n  decoratorKey: string,\r\n  direction: BidiDirection,\r\n  text: string,\r\n  leafSet: Set<any>,\r\n};\r\n\r\nclass DraftEditorDecoratedLeaves extends React.Component<Props> {\r\n  render(): ReactNode {\r\n    const {\r\n      block,\r\n      children,\r\n      contentState,\r\n      decorator,\r\n      decoratorKey,\r\n      direction,\r\n      leafSet,\r\n      text,\r\n    } = this.props;\r\n\r\n    const blockKey = block.getKey();\r\n    const leavesForLeafSet = leafSet.get('leaves');\r\n    const DecoratorComponent = decorator.getComponentForKey(decoratorKey);\r\n    const decoratorProps = decorator.getPropsForKey(decoratorKey);\r\n    const decoratorOffsetKey = DraftOffsetKey.encode(\r\n      blockKey,\r\n      parseInt(decoratorKey, 10),\r\n      0,\r\n    );\r\n\r\n    const decoratedText = text.slice(\r\n      leavesForLeafSet.first().get('start'),\r\n      leavesForLeafSet.last().get('end'),\r\n    );\r\n\r\n    // Resetting dir to the same value on a child node makes Chrome/Firefox\r\n    // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\r\n    const dir = UnicodeBidiDirection.getHTMLDirIfDifferent(\r\n      UnicodeBidi.getDirection(decoratedText),\r\n      direction,\r\n    );\r\n\r\n    return (\r\n      <DecoratorComponent\r\n        {...decoratorProps}\r\n        contentState={contentState}\r\n        decoratedText={decoratedText}\r\n        dir={dir}\r\n        key={decoratorOffsetKey}\r\n        entityKey={block.getEntityAt(leafSet.get('start'))}\r\n        offsetKey={decoratorOffsetKey}>\r\n        {children}\r\n      </DecoratorComponent>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  DraftEditorDecoratedLeaves;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport React, {ReactNode} from 'react'\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isElement from '../utils/isElement';\r\n\r\n// In IE, spans with <br> tags render as two newlines. By rendering a span\r\n// with only a newline character, we can be sure to render a single line.\r\nconst useNewlineChar = UserAgent.isBrowser('IE <= 11');\r\n\r\n/**\r\n * Check whether the node should be considered a newline.\r\n */\r\nfunction isNewline(node: Element): boolean {\r\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\r\n}\r\n\r\n/**\r\n * Placeholder elements for empty text content.\r\n *\r\n * What is this `data-text` attribute, anyway? It turns out that we need to\r\n * put an attribute on the lowest-level text node in order to preserve correct\r\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\r\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\r\n * If the <span> has an attribute, this appears not to happen.\r\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\r\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\r\n */\r\nconst NEWLINE_A = ref =>\r\n  useNewlineChar ? (\r\n    <span key=\"A\" data-text=\"true\" ref={ref}>\r\n      {'\\n'}\r\n    </span>\r\n  ) : (\r\n    <br key=\"A\" data-text=\"true\" ref={ref} />\r\n  );\r\n\r\nconst NEWLINE_B = ref =>\r\n  useNewlineChar ? (\r\n    <span key=\"B\" data-text=\"true\" ref={ref}>\r\n      {'\\n'}\r\n    </span>\r\n  ) : (\r\n    <br key=\"B\" data-text=\"true\" ref={ref} />\r\n  );\r\n\r\ntype Props = {\r\n  children: string,\r\n};\r\n\r\n/**\r\n * The lowest-level component in a `DraftEditor`, the text node component\r\n * replaces the default React text node implementation. This allows us to\r\n * perform custom handling of newline behavior and avoid re-rendering text\r\n * nodes with DOM state that already matches the expectations of our immutable\r\n * editor state.\r\n */\r\nclass DraftEditorTextNode extends React.Component<Props> {\r\n  _forceFlag: boolean;\r\n  _node: (HTMLSpanElement | HTMLBRElement);\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    // By flipping this flag, we also keep flipping keys which forces\r\n    // React to remount this node every time it rerenders.\r\n    this._forceFlag = false;\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    const node = this._node;\r\n    const shouldBeNewline = nextProps.children === '';\r\n\r\n    invariant(isElement(node), 'node is not an Element');\r\n    const elementNode: Element = (node as any);\r\n    if (shouldBeNewline) {\r\n      return !isNewline(elementNode);\r\n    }\r\n    return elementNode.textContent !== nextProps.children;\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    this._forceFlag = !this._forceFlag;\r\n  }\r\n\r\n  componentDidUpdate(): void {\r\n    this._forceFlag = !this._forceFlag;\r\n  }\r\n\r\n  render(): ReactNode {\r\n    if (this.props.children === '') {\r\n      return this._forceFlag\r\n        ? NEWLINE_A(ref => (this._node = ref))\r\n        : NEWLINE_B(ref => (this._node = ref));\r\n    }\r\n\r\n    return (\r\n      <span\r\n        key={this._forceFlag ? 'A' : 'B'}\r\n        data-text=\"true\"\r\n        ref={ref => (this._node = ref)}>\r\n        {this.props.children}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  DraftEditorTextNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\nimport isElement from './isElement';\r\n\r\nfunction isHTMLBRElement(node: Node): boolean {\r\n  if (!node || !node.ownerDocument) {\r\n    return false;\r\n  }\r\n  return isElement(node) && node.nodeName === 'BR';\r\n}\r\n\r\nexport default  isHTMLBRElement;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nexport default  {\r\n  initODS: function() {},\r\n  handleExtensionCausedError: function() {},\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  SelectionState from '../../model/immutable/SelectionState';\r\n\r\nimport DraftEffects from '../../stubs/DraftEffects';\r\nimport DraftJsDebugLogging from '../../stubs/DraftJsDebugLogging';\r\n\r\nimport containsNode from 'fbjs/lib/containsNode';\r\nimport getActiveElement from 'fbjs/lib/getActiveElement';\r\nimport getCorrectDocumentFromNode from '../utils/getCorrectDocumentFromNode';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isElement from '../utils/isElement';\r\n\r\nfunction getAnonymizedDOM(\r\n  node: Node,\r\n  getNodeLabels?: (n: Node) => Array<string>,\r\n): string {\r\n  if (!node) {\r\n    return '[empty]';\r\n  }\r\n\r\n  const anonymized = anonymizeTextWithin(node, getNodeLabels);\r\n  if (anonymized.nodeType === Node.TEXT_NODE) {\r\n    return anonymized.textContent;\r\n  }\r\n\r\n  invariant(\r\n    isElement(anonymized),\r\n    'Node must be an Element if it is not a text node.',\r\n  );\r\n  const castedElement: Element = (anonymized as any);\r\n  return castedElement.outerHTML;\r\n}\r\n\r\nfunction anonymizeTextWithin(\r\n  node: Node,\r\n  getNodeLabels?: (n: Node) => Array<string>,\r\n): Node {\r\n  const labels = getNodeLabels !== undefined ? getNodeLabels(node) : [];\r\n\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    const length = node.textContent.length;\r\n    return getCorrectDocumentFromNode(node).createTextNode(\r\n      '[text ' +\r\n        length +\r\n        (labels.length ? ' | ' + labels.join(', ') : '') +\r\n        ']',\r\n    );\r\n  }\r\n\r\n  const clone = node.cloneNode();\r\n  if (clone.nodeType === 1 && labels.length) {\r\n    ((clone as any)).setAttribute('data-labels', labels.join(', '));\r\n  }\r\n  const childNodes = node.childNodes;\r\n  for (let ii = 0; ii < childNodes.length; ii++) {\r\n    clone.appendChild(anonymizeTextWithin(childNodes[ii], getNodeLabels));\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\nfunction getAnonymizedEditorDOM(\r\n  node: Node,\r\n  getNodeLabels?: (n: Node) => Array<string>,\r\n): string {\r\n  // grabbing the DOM content of the Draft editor\r\n  let currentNode = node;\r\n  // this should only be used after checking with isElement\r\n  let castedNode: Element = (currentNode as any);\r\n  while (currentNode) {\r\n    if (isElement(currentNode) && castedNode.hasAttribute('contenteditable')) {\r\n      // found the Draft editor container\r\n      return getAnonymizedDOM(currentNode, getNodeLabels);\r\n    } else {\r\n      currentNode = currentNode.parentNode;\r\n      castedNode = (currentNode as any);\r\n    }\r\n  }\r\n  return 'Could not find contentEditable parent of node';\r\n}\r\n\r\nfunction getNodeLength(node: Node): number {\r\n  return node.nodeValue === null\r\n    ? node.childNodes.length\r\n    : node.nodeValue.length;\r\n}\r\n\r\n/**\r\n * In modern non-IE browsers, we can support both forward and backward\r\n * selections.\r\n *\r\n * Note: IE10+ supports the Selection object, but it does not support\r\n * the `extend` method, which means that even in modern IE, it's not possible\r\n * to programatically create a backward selection. Thus, for all IE\r\n * versions, we use the old IE API to create our selections.\r\n */\r\nfunction setDraftEditorSelection(\r\n  selectionState: SelectionState,\r\n  node: Node,\r\n  blockKey: string,\r\n  nodeStart: number,\r\n  nodeEnd: number,\r\n): void {\r\n  // It's possible that the editor has been removed from the DOM but\r\n  // our selection code doesn't know it yet. Forcing selection in\r\n  // this case may lead to errors, so just bail now.\r\n  const documentObject = getCorrectDocumentFromNode(node);\r\n  if (!containsNode(documentObject.documentElement, node)) {\r\n    return;\r\n  }\r\n\r\n  const selection = documentObject.defaultView.getSelection();\r\n  let anchorKey = selectionState.getAnchorKey();\r\n  let anchorOffset = selectionState.getAnchorOffset();\r\n  let focusKey = selectionState.getFocusKey();\r\n  let focusOffset = selectionState.getFocusOffset();\r\n  let isBackward = selectionState.getIsBackward();\r\n\r\n  // IE doesn't support backward selection. Swap key/offset pairs.\r\n  if (!selection.extend && isBackward) {\r\n    const tempKey = anchorKey;\r\n    const tempOffset = anchorOffset;\r\n    anchorKey = focusKey;\r\n    anchorOffset = focusOffset;\r\n    focusKey = tempKey;\r\n    focusOffset = tempOffset;\r\n    isBackward = false;\r\n  }\r\n\r\n  const hasAnchor =\r\n    anchorKey === blockKey &&\r\n    nodeStart <= anchorOffset &&\r\n    nodeEnd >= anchorOffset;\r\n\r\n  const hasFocus =\r\n    focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset;\r\n  // If the selection is entirely bound within this node, set the selection\r\n  // and be done.\r\n  if (hasAnchor && hasFocus) {\r\n    selection.removeAllRanges();\r\n    addPointToSelection(\r\n      selection,\r\n      node,\r\n      anchorOffset - nodeStart,\r\n      selectionState,\r\n    );\r\n    addFocusToSelection(\r\n      selection,\r\n      node,\r\n      focusOffset - nodeStart,\r\n      selectionState,\r\n    );\r\n    return;\r\n  }\r\n\r\n  if (!isBackward) {\r\n    // If the anchor is within this node, set the range start.\r\n    if (hasAnchor) {\r\n      selection.removeAllRanges();\r\n      addPointToSelection(\r\n        selection,\r\n        node,\r\n        anchorOffset - nodeStart,\r\n        selectionState,\r\n      );\r\n    }\r\n\r\n    // If the focus is within this node, we can assume that we have\r\n    // already set the appropriate start range on the selection, and\r\n    // can simply extend the selection.\r\n    if (hasFocus) {\r\n      addFocusToSelection(\r\n        selection,\r\n        node,\r\n        focusOffset - nodeStart,\r\n        selectionState,\r\n      );\r\n    }\r\n  } else {\r\n    // If this node has the focus, set the selection range to be a\r\n    // collapsed range beginning here. Later, when we encounter the anchor,\r\n    // we'll use this information to extend the selection.\r\n    if (hasFocus) {\r\n      selection.removeAllRanges();\r\n      addPointToSelection(\r\n        selection,\r\n        node,\r\n        focusOffset - nodeStart,\r\n        selectionState,\r\n      );\r\n    }\r\n\r\n    // If this node has the anchor, we may assume that the correct\r\n    // focus information is already stored on the selection object.\r\n    // We keep track of it, reset the selection range, and extend it\r\n    // back to the focus point.\r\n    if (hasAnchor) {\r\n      const storedFocusNode = selection.focusNode;\r\n      const storedFocusOffset = selection.focusOffset;\r\n\r\n      selection.removeAllRanges();\r\n      addPointToSelection(\r\n        selection,\r\n        node,\r\n        anchorOffset - nodeStart,\r\n        selectionState,\r\n      );\r\n      addFocusToSelection(\r\n        selection,\r\n        storedFocusNode,\r\n        storedFocusOffset,\r\n        selectionState,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Extend selection towards focus point.\r\n */\r\nfunction addFocusToSelection(\r\n  selection: any,\r\n  node: Node,\r\n  offset: number,\r\n  selectionState: SelectionState,\r\n): void {\r\n  const activeElement = getActiveElement();\r\n  if (selection.extend && containsNode(activeElement, node)) {\r\n    // If `extend` is called while another element has focus, an error is\r\n    // thrown. We therefore disable `extend` if the active element is somewhere\r\n    // other than the node we are selecting. This should only occur in Firefox,\r\n    // since it is the only browser to support multiple selections.\r\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.\r\n\r\n    // logging to catch bug that is being reported in t16250795\r\n    if (offset > getNodeLength(node)) {\r\n      // the call to 'selection.extend' is about to throw\r\n      DraftJsDebugLogging.logSelectionStateFailure({\r\n        anonymizedDom: getAnonymizedEditorDOM(node),\r\n        extraParams: JSON.stringify({offset: offset}),\r\n        selectionState: JSON.stringify(selectionState.toJS()),\r\n      });\r\n    }\r\n\r\n    // logging to catch bug that is being reported in t18110632\r\n    const nodeWasFocus = node === selection.focusNode;\r\n    try {\r\n      selection.extend(node, offset);\r\n    } catch (e) {\r\n      DraftJsDebugLogging.logSelectionStateFailure({\r\n        anonymizedDom: getAnonymizedEditorDOM(node, function(n) {\r\n          const labels = [];\r\n          if (n === activeElement) {\r\n            labels.push('active element');\r\n          }\r\n          if (n === selection.anchorNode) {\r\n            labels.push('selection anchor node');\r\n          }\r\n          if (n === selection.focusNode) {\r\n            labels.push('selection focus node');\r\n          }\r\n          return labels;\r\n        }),\r\n        extraParams: JSON.stringify(\r\n          {\r\n            activeElementName: activeElement ? activeElement.nodeName : null,\r\n            nodeIsFocus: node === selection.focusNode,\r\n            nodeWasFocus: nodeWasFocus,\r\n            selectionRangeCount: selection.rangeCount,\r\n            selectionAnchorNodeName: selection.anchorNode\r\n              ? selection.anchorNode.nodeName\r\n              : null,\r\n            selectionAnchorOffset: selection.anchorOffset,\r\n            selectionFocusNodeName: selection.focusNode\r\n              ? selection.focusNode.nodeName\r\n              : null,\r\n            selectionFocusOffset: selection.focusOffset,\r\n            message: e ? '' + e : null,\r\n            offset: offset,\r\n          },\r\n          null,\r\n          2,\r\n        ),\r\n        selectionState: JSON.stringify(selectionState.toJS(), null, 2),\r\n      });\r\n      // allow the error to be thrown -\r\n      // better than continuing in a broken state\r\n      throw e;\r\n    }\r\n  } else {\r\n    // IE doesn't support extend. This will mean no backward selection.\r\n    // Extract the existing selection range and add focus to it.\r\n    // Additionally, clone the selection range. IE11 throws an\r\n    // InvalidStateError when attempting to access selection properties\r\n    // after the range is detached.\r\n    if (selection.rangeCount > 0) {\r\n      const range = selection.getRangeAt(0);\r\n      range.setEnd(node, offset);\r\n      selection.addRange(range.cloneRange());\r\n    }\r\n  }\r\n}\r\n\r\nfunction addPointToSelection(\r\n  selection: any,\r\n  node: Node,\r\n  offset: number,\r\n  selectionState: SelectionState,\r\n): void {\r\n  const range = getCorrectDocumentFromNode(node).createRange();\r\n  // logging to catch bug that is being reported in t16250795\r\n  if (offset > getNodeLength(node)) {\r\n    // in this case we know that the call to 'range.setStart' is about to throw\r\n    DraftJsDebugLogging.logSelectionStateFailure({\r\n      anonymizedDom: getAnonymizedEditorDOM(node),\r\n      extraParams: JSON.stringify({offset: offset}),\r\n      selectionState: JSON.stringify(selectionState.toJS()),\r\n    });\r\n    DraftEffects.handleExtensionCausedError();\r\n  }\r\n  range.setStart(node, offset);\r\n  selection.addRange(range);\r\n}\r\n\r\nexport {\r\n  setDraftEditorSelection,\r\n  addFocusToSelection,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport { BlockNodeRecord } from '../../model/immutable/BlockNodeRecord';\r\nimport { DraftInlineStyle } from '../../model/immutable/DraftInlineStyle';\r\nimport SelectionState from '../../model/immutable/SelectionState';\r\n\r\nimport DraftEditorTextNode from './DraftEditorTextNode.react';\r\nimport React, { ReactNode } from 'react';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isHTMLBRElement from '../utils/isHTMLBRElement';\r\nimport { setDraftEditorSelection } from '../selection/setDraftEditorSelection';\r\n\r\ntype Props = {\r\n    // The block that contains this leaf.\r\n    block: BlockNodeRecord;\r\n\r\n    // Mapping of style names to CSS declarations.\r\n    customStyleMap: Object;\r\n\r\n    // Function that maps style names to CSS style objects.\r\n    customStyleFn: Function;\r\n\r\n    // Whether to force the DOM selection after render.\r\n    forceSelection: boolean;\r\n\r\n    // Whether this leaf is the last in its block. Used for a DOM hack.\r\n    isLast: boolean;\r\n\r\n    offsetKey: string;\r\n\r\n    // The current `SelectionState`, used to represent a selection range in the\r\n    // editor\r\n    selection: SelectionState;\r\n\r\n    // The offset of this string within its block.\r\n    start: number;\r\n\r\n    // The set of style(s) names to apply to the node.\r\n    styleSet: DraftInlineStyle;\r\n\r\n    // The full text to be rendered within this node.\r\n    text: string;\r\n\r\n    custom?: any;\r\n};\r\n\r\n/**\r\n * All leaf nodes in the editor are spans with single text nodes. Leaf\r\n * elements are styled based on the merging of an optional custom style map\r\n * and a default style map.\r\n *\r\n * `DraftEditorLeaf` also provides a wrapper for calling into the imperative\r\n * DOM Selection API. In this way, top-level components can declaratively\r\n * maintain the selection state.\r\n */\r\nclass DraftEditorLeaf extends React.Component<Props> {\r\n    /**\r\n     * By making individual leaf instances aware of their context within\r\n     * the text of the editor, we can set our selection range more\r\n     * easily than we could in the non-React world.\r\n     *\r\n     * Note that this depends on our maintaining tight control over the\r\n     * DOM structure of the DraftEditor component. If leaves had multiple\r\n     * text nodes, this would be harder.\r\n     */\r\n\r\n    leaf: HTMLElement;\r\n\r\n    _setSelection(): void {\r\n        const { selection, isLast } = this.props;\r\n        const isCustom = this.leaf.dataset['type'] === 'custom';\r\n        // gland 重要更改，防止非contenteditable元素获取焦点\r\n        if (!isLast && isCustom) {\r\n            return;\r\n        }\r\n        // If selection state is irrelevant to the parent block, no-op.\r\n        if (selection == null || !selection.getHasFocus()) {\r\n            return;\r\n        }\r\n\r\n        const { block, start, text } = this.props;\r\n        const blockKey = block.getKey();\r\n        let end = start + text.length;\r\n        // gland\r\n        if (isCustom|| typeof text === 'object') {\r\n            end = start + 1;\r\n        }\r\n        if (!selection.hasEdgeWithin(blockKey, start, end)) {\r\n            return;\r\n        }\r\n        // gland\r\n        if (isCustom) {\r\n            setIndepentSelection(selection, this.leaf, blockKey);\r\n            return;\r\n        }\r\n        if(typeof text === 'object') {\r\n            setDraftEditorSelection(selection, this.leaf.firstChild, blockKey, start, end);\r\n            return;\r\n        }\r\n        // Determine the appropriate target node for selection. If the child\r\n        // is not a text node, it is a <br /> spacer. In this case, use the\r\n        // <span> itself as the selection target.\r\n        const node = this.leaf;\r\n        invariant(node, 'Missing node');\r\n        const child = node.firstChild;\r\n        invariant(child, 'Missing child');\r\n        let targetNode;\r\n\r\n        if (child.nodeType === Node.TEXT_NODE) {\r\n            targetNode = child;\r\n        } else if (isHTMLBRElement(child)) {\r\n            targetNode = node;\r\n        } else {\r\n            targetNode = child.firstChild;\r\n            invariant(targetNode, 'Missing targetNode');\r\n        }\r\n        //console.log(\"selection set\", this.leaf.dataset[\"type\"], selection.toJS(), targetNode, blockKey, start, end);\r\n        setDraftEditorSelection(selection, targetNode, blockKey, start, end);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Props): boolean {\r\n        // gland notice styleSet lead update\r\n        const leafNode = this.leaf;\r\n        invariant(leafNode, 'Missing leafNode');\r\n        const shouldUpdate = this.props.text !== nextProps.text || nextProps.styleSet !== this.props.styleSet || nextProps.forceSelection;\r\n        return shouldUpdate;\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        this._setSelection();\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this._setSelection();\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { block, isLast, custom } = this.props;\r\n        let { text } = this.props;\r\n\r\n        // If the leaf is at the end of its block and ends in a soft newline, append\r\n        // an extra line feed character. Browsers collapse trailing newline\r\n        // characters, which leaves the cursor in the wrong place after a\r\n        // shift+enter. The extra character repairs this.\r\n        if (isLast) {\r\n            if (typeof text === 'string') {\r\n                if (text.endsWith('\\n')) {\r\n                    text += '\\n';\r\n                }\r\n            }\r\n        }\r\n\r\n        const { customStyleMap, customStyleFn, offsetKey, styleSet } = this.props;\r\n        let styleObj = styleSet.reduce((map: any, styleName) => {\r\n            const mergedStyles: any = {};\r\n            const style = customStyleMap[styleName];\r\n\r\n            if (style !== undefined && map.textDecoration !== style.textDecoration) {\r\n                // .trim() is necessary for IE9/10/11 and Edge\r\n                mergedStyles.textDecoration = [map.textDecoration, style.textDecoration].join(' ').trim();\r\n            }\r\n\r\n            return Object.assign(map, style, mergedStyles);\r\n        }, {});\r\n\r\n        if (customStyleFn) {\r\n            const newStyles = customStyleFn(styleSet, block);\r\n            styleObj = Object.assign(styleObj, newStyles);\r\n        }\r\n        //                     {isLast ? <span data-text=\"r\" ref={ref=>(this.lastleafR = ref)}  data-offset-key={offsetKey} >{\"\\r\"}</span> : null}\r\n\r\n        // gland  \\r &#13; 可使光标垂直对齐正常和处在行尾时聚焦\r\n        if (custom) {\r\n            return (\r\n                <span data-offset-key={offsetKey} ref={ref => (this.leaf = ref)} style={styleObj} data-type='custom' contentEditable={false}>\r\n                    <span data-text='object'>{custom}</span>\r\n                    <span data-text='r'>{'\\r'}</span>\r\n                </span>\r\n            );\r\n        }\r\n        if (typeof text === 'object') {\r\n            return (\r\n                <span data-offset-key={offsetKey} ref={ref => (this.leaf = ref)} style={styleObj}>\r\n                    <span data-text='object'>{text}</span>\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <span data-offset-key={offsetKey} ref={ref => (this.leaf = ref)} style={styleObj}>\r\n                <DraftEditorTextNode>{text}</DraftEditorTextNode>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraftEditorLeaf;\r\n\r\n//gland\r\n\r\n/**\r\n * 设置光标标位置\r\n * @param ele\r\n * @param offset\r\n */\r\nfunction setCursorPosition(ele, offset) {\r\n    let selection = window.getSelection();\r\n    let range = document.createRange();\r\n    range.setStart(ele, offset);\r\n    range.setEnd(ele, offset);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n}\r\n\r\nfunction setIndepentSelection(selectionState, leaf, blockKey) {\r\n    let selection = window.getSelection();\r\n    let range = selection.getRangeAt(0);\r\n\r\n    let ele = leaf.parentElement;\r\n    let offset = ele.childNodes.length;\r\n    if (selectionState.isCollapsed()) {\r\n        range.setStart(ele, offset);\r\n        range.setEnd(ele, offset);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n        return;\r\n    }\r\n    // let anchorKey = selectionState.getAnchorKey();\r\n    // let anchorOffset = selectionState.getAnchorOffset();\r\n    // let focusKey = selectionState.getFocusKey();\r\n    // let focusOffset = selectionState.getFocusOffset();\r\n    // let isBackward = selectionState.getIsBackward();\r\n    // if (anchorKey === focusKey) {\r\n    //     console.log('eeeeee', selection)\r\n    //     if (selection.rangeCount > 0) {\r\n    //         range.setEnd(ele, offset);\r\n    //         selection.addRange(range.cloneRange());\r\n    //         return;\r\n    //     }\r\n\r\n    // }\r\n    // if (isBackward) {\r\n    //     [anchorKey, anchorOffset, focusKey, focusOffset] = [focusKey, focusOffset, anchorKey, anchorOffset];\r\n    // }\r\n    // if (blockKey === anchorKey) {\r\n    //     range.setStart(ele, offset);\r\n    //     selection.removeAllRanges();\r\n    //     selection.addRange(range);\r\n    //     return;\r\n    // }\r\n    // if (blockKey === focusKey) {\r\n    //     range.setEnd(ele, offset);\r\n    //     selection.addRange(range);\r\n    //     return;\r\n    // }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../../../model/immutable/BlockNodeRecord';\r\nimport  ContentState from '../../../model/immutable/ContentState';\r\nimport {DraftDecoratorType} from '../../../model/decorators/DraftDecoratorType';\r\nimport  SelectionState from '../../../model/immutable/SelectionState';\r\nimport {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\nimport DraftEditorDecoratedLeaves from './DraftEditorDecoratedLeaves.react';\r\nimport DraftEditorLeaf from '../DraftEditorLeaf.react';\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport { List } from 'immutable';\r\nimport React, {ReactNode} from 'react'\r\nimport cx from 'fbjs/lib/cx'\r\n\r\n\r\ntype Props = {\r\n  block: BlockNodeRecord,\r\n  children: Array<ReactNode>,\r\n  contentState: ContentState,\r\n  customStyleFn: Function,\r\n  customStyleMap: Object,\r\n  decorator: DraftDecoratorType,\r\n  direction: BidiDirection,\r\n  forceSelection: boolean,\r\n  hasSelection: boolean,\r\n  selection: SelectionState,\r\n  tree: List<any>,\r\n};\r\n\r\nclass DraftEditorNode extends React.Component<Props> {\r\n  render(): ReactNode {\r\n    const {\r\n      block,\r\n      contentState,\r\n      customStyleFn,\r\n      customStyleMap,\r\n      decorator,\r\n      direction,\r\n      forceSelection,\r\n      hasSelection,\r\n      selection,\r\n      tree,\r\n    } = this.props;\r\n\r\n    const blockKey = block.getKey();\r\n    const text = block.getText();\r\n    const lastLeafSet = tree.size - 1;\r\n\r\n    const children =\r\n      this.props.children ||\r\n      tree\r\n        .map((leafSet, ii) => {\r\n          const decoratorKey = leafSet.get('decoratorKey');\r\n          const leavesForLeafSet = leafSet.get('leaves');\r\n          const lastLeaf = leavesForLeafSet.size - 1;\r\n          const Leaves = leavesForLeafSet\r\n            .map((leaf, jj) => {\r\n              const offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\r\n              const start = leaf.get('start');\r\n              const end = leaf.get('end');\r\n              return (\r\n                <DraftEditorLeaf\r\n                  key={offsetKey}\r\n                  offsetKey={offsetKey}\r\n                  block={block}\r\n                  start={start}\r\n                  selection={hasSelection ? selection : null}\r\n                  forceSelection={forceSelection}\r\n                  text={text.slice(start, end)}\r\n                  styleSet={block.getInlineStyleAt(start)}\r\n                  customStyleMap={customStyleMap}\r\n                  customStyleFn={customStyleFn}\r\n                  isLast={decoratorKey === lastLeafSet && jj === lastLeaf}\r\n                />\r\n              );\r\n            })\r\n            .toArray();\r\n\r\n          if (!decoratorKey || !decorator) {\r\n            return Leaves;\r\n          }\r\n\r\n          return (\r\n            <DraftEditorDecoratedLeaves\r\n              block={block}\r\n              children={Leaves}\r\n              contentState={contentState}\r\n              decorator={decorator}\r\n              decoratorKey={decoratorKey}\r\n              direction={direction}\r\n              leafSet={leafSet}\r\n              text={text}\r\n              key={ii}\r\n            />\r\n          );\r\n        })\r\n        .toArray();\r\n\r\n    return (\r\n      <div\r\n        data-offset-key={DraftOffsetKey.encode(blockKey, 0, 0)}\r\n        className={cx({\r\n          'public/DraftStyleDefault/block': true,\r\n          'public/DraftStyleDefault/ltr': direction === 'LTR',\r\n          'public/DraftStyleDefault/rtl': direction === 'RTL',\r\n        })}>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  DraftEditorNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This file is a fork of DraftEditorBlock.react.js and DraftEditorContents.react.js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../../../model/immutable/BlockNodeRecord';\r\nimport  ContentState from '../../../model/immutable/ContentState';\r\nimport  {DraftBlockRenderMap} from '../../../model/immutable/DraftBlockRenderMap';\r\nimport {DraftDecoratorType} from '../../../model/decorators/DraftDecoratorType';\r\nimport  {DraftInlineStyle} from '../../../model/immutable/DraftInlineStyle';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\nimport  SelectionState from '../../../model/immutable/SelectionState';\r\nimport {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\nimport DraftEditorNode from './DraftEditorNode.react';\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport React, {ReactNode} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Scroll from 'fbjs/lib/Scroll';\r\nimport Style from 'fbjs/lib/Style';\r\n\r\nimport getElementPosition from 'fbjs/lib/getElementPosition';\r\nimport getScrollPosition from 'fbjs/lib/getScrollPosition';\r\nimport getViewportDimensions from 'fbjs/lib/getViewportDimensions';\r\nimport { List } from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isHTMLElement from '../../utils/isHTMLElement';\r\n\r\nconst SCROLL_BUFFER = 10;\r\n\r\n// we should harden up the bellow flow types to make them more strict\r\ntype CustomRenderConfig = Object;\r\ntype DraftRenderConfig = Object;\r\ntype BlockRenderFn = (block: BlockNodeRecord) => Object;\r\ntype BlockStyleFn = (block: BlockNodeRecord) => string;\r\n\r\ntype Props = {\r\n  block: BlockNodeRecord,\r\n  blockProps?: Object,\r\n  blockRenderMap: DraftBlockRenderMap,\r\n  blockRendererFn: BlockRenderFn,\r\n  blockStyleFn: BlockStyleFn,\r\n  contentState: ContentState,\r\n  customStyleFn: (style: DraftInlineStyle, block: BlockNodeRecord) => Object,\r\n  customStyleMap: Object,\r\n  decorator: DraftDecoratorType,\r\n  direction: BidiDirection,\r\n  editorKey: string,\r\n  editorState: EditorState,\r\n  forceSelection: boolean,\r\n  selection: SelectionState,\r\n  startIndent?: boolean,\r\n  tree: List<any>,\r\n};\r\n\r\n/**\r\n * Return whether a block overlaps with either edge of the `SelectionState`.\r\n */\r\nconst isBlockOnSelectionEdge = (\r\n  selection: SelectionState,\r\n  key: string,\r\n): boolean => {\r\n  return selection.getAnchorKey() === key || selection.getFocusKey() === key;\r\n};\r\n\r\n/**\r\n * We will use this helper to identify blocks that need to be wrapped but have siblings that\r\n * also share the same wrapper element, this way we can do the wrapping once the last sibling\r\n * is added.\r\n */\r\nconst shouldNotAddWrapperElement = (\r\n  block: BlockNodeRecord,\r\n  contentState: ContentState,\r\n): boolean => {\r\n  const nextSiblingKey = block.getNextSiblingKey();\r\n\r\n  return nextSiblingKey\r\n    ? contentState.getBlockForKey(nextSiblingKey).getType() === block.getType()\r\n    : false;\r\n};\r\n\r\nconst applyWrapperElementToSiblings = (\r\n  wrapperTemplate: any,\r\n  Element: string,\r\n  nodes: Array<ReactNode>,\r\n): Array<ReactNode> => {\r\n  const wrappedSiblings = [];\r\n\r\n  // we check back until we find a sibbling that does not have same wrapper\r\n  for (const sibling of nodes.reverse()) {\r\n    if ((sibling as any).type !== Element) {\r\n      break;\r\n    }\r\n    wrappedSiblings.push(sibling);\r\n  }\r\n\r\n  // we now should remove from acc the wrappedSiblings and add them back under same wrap\r\n  nodes.splice(nodes.indexOf(wrappedSiblings[0]), wrappedSiblings.length + 1);\r\n\r\n  const childrenIs = wrappedSiblings.reverse();\r\n\r\n  const key = childrenIs[0].key;\r\n\r\n  nodes.push(\r\n    React.cloneElement(\r\n      wrapperTemplate,\r\n      {\r\n        key: `${key}-wrap`,\r\n        'data-offset-key': DraftOffsetKey.encode(key, 0, 0),\r\n      },\r\n      childrenIs,\r\n    ),\r\n  );\r\n\r\n  return nodes;\r\n};\r\n\r\nconst getDraftRenderConfig = (\r\n  block: BlockNodeRecord,\r\n  blockRenderMap: DraftBlockRenderMap,\r\n): DraftRenderConfig => {\r\n  const configForType =\r\n    blockRenderMap.get(block.getType()) || blockRenderMap.get('unstyled');\r\n\r\n  const wrapperTemplate = configForType.wrapper;\r\n  const Element =\r\n    configForType.element || blockRenderMap.get('unstyled').element;\r\n\r\n  return {\r\n    Element,\r\n    wrapperTemplate,\r\n  };\r\n};\r\n\r\nconst getCustomRenderConfig = (\r\n  block: BlockNodeRecord,\r\n  blockRendererFn: BlockRenderFn,\r\n): CustomRenderConfig => {\r\n  const customRenderer:any = blockRendererFn(block);\r\n\r\n  if (!customRenderer) {\r\n    return {};\r\n  }\r\n\r\n  const {\r\n    component: CustomComponent,\r\n    props: customProps,\r\n    editable: customEditable,\r\n  } = customRenderer;\r\n\r\n  return {\r\n    CustomComponent,\r\n    customProps,\r\n    customEditable,\r\n  };\r\n};\r\n\r\nconst getElementPropsConfig = (\r\n  block: BlockNodeRecord,\r\n  editorKey: string,\r\n  offsetKey: string,\r\n  blockStyleFn: BlockStyleFn,\r\n  customConfig: any,\r\n): Object => {\r\n  let elementProps: any = {\r\n    'data-block': true,\r\n    'data-editor': editorKey,\r\n    'data-offset-key': offsetKey,\r\n    key: block.getKey(),\r\n  };\r\n  const customClass = blockStyleFn(block);\r\n\r\n  if (customClass) {\r\n    elementProps.className = customClass;\r\n  }\r\n\r\n  if (customConfig.customEditable !== undefined) {\r\n    elementProps = {\r\n      ...elementProps,\r\n      contentEditable: customConfig.customEditable,\r\n      suppressContentEditableWarning: true,\r\n    };\r\n  }\r\n\r\n  return elementProps;\r\n};\r\n\r\nclass DraftEditorBlockNode extends React.Component<Props> {\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    const {block, direction, tree} = this.props as any;\r\n    const isContainerNode = !block.getChildKeys().isEmpty();\r\n    const blockHasChanged =\r\n      block !== nextProps.block ||\r\n      tree !== nextProps.tree ||\r\n      direction !== nextProps.direction ||\r\n      (isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) &&\r\n        nextProps.forceSelection);\r\n\r\n    // if we have children at this stage we always re-render container nodes\r\n    // else if its a root node we avoid re-rendering by checking for block updates\r\n    return isContainerNode || blockHasChanged;\r\n  }\r\n\r\n  /**\r\n   * When a block is mounted and overlaps the selection state, we need to make\r\n   * sure that the cursor is visible to match native behavior. This may not\r\n   * be the case if the user has pressed `RETURN` or pasted some content, since\r\n   * programatically creating these new blocks and setting the DOM selection\r\n   * will miss out on the browser natively scrolling to that position.\r\n   *\r\n   * To replicate native behavior, if the block overlaps the selection state\r\n   * on mount, force the scroll position. Check the scroll state of the scroll\r\n   * parent, and adjust it to align the entire block to the bottom of the\r\n   * scroll parent.\r\n   */\r\n  componentDidMount(): void {\r\n    const selection = this.props.selection;\r\n    const endKey = selection.getEndKey();\r\n    if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\r\n      return;\r\n    }\r\n\r\n    const blockNode = ReactDOM.findDOMNode(this as any);\r\n    const scrollParent = Style.getScrollParent(blockNode);\r\n    const scrollPosition = getScrollPosition(scrollParent);\r\n    let scrollDelta;\r\n\r\n    if (scrollParent === window) {\r\n      const nodePosition = getElementPosition(blockNode);\r\n      const nodeBottom = nodePosition.y + nodePosition.height;\r\n      const viewportHeight = getViewportDimensions().height;\r\n      scrollDelta = nodeBottom - viewportHeight;\r\n      if (scrollDelta > 0) {\r\n        window.scrollTo(\r\n          scrollPosition.x,\r\n          scrollPosition.y + scrollDelta + SCROLL_BUFFER,\r\n        );\r\n      }\r\n    } else {\r\n      invariant(isHTMLElement(blockNode), 'blockNode is not an HTMLElement');\r\n      const htmlBlockNode: HTMLElement = (blockNode as any);\r\n      const blockBottom = htmlBlockNode.offsetHeight + htmlBlockNode.offsetTop;\r\n      const scrollBottom = scrollParent.offsetHeight + scrollPosition.y;\r\n      scrollDelta = blockBottom - scrollBottom;\r\n      if (scrollDelta > 0) {\r\n        Scroll.setTop(\r\n          scrollParent,\r\n          Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const {\r\n      block,\r\n      blockRenderMap,\r\n      blockRendererFn,\r\n      blockStyleFn,\r\n      contentState,\r\n      decorator,\r\n      editorKey,\r\n      editorState,\r\n      customStyleFn,\r\n      customStyleMap,\r\n      direction,\r\n      forceSelection,\r\n      selection,\r\n      tree,\r\n    } = this.props as any;\r\n\r\n    let children = null;\r\n\r\n    if (block.children.size) {\r\n      children = block.children.reduce((acc, key) => {\r\n        const offsetKey = DraftOffsetKey.encode(key, 0, 0);\r\n        const child = contentState.getBlockForKey(key);\r\n        const customConfig:any = getCustomRenderConfig(child, blockRendererFn);\r\n        const Component = customConfig.CustomComponent || DraftEditorBlockNode;\r\n        const {Element, wrapperTemplate} = getDraftRenderConfig(\r\n          child,\r\n          blockRenderMap,\r\n        ) as any;\r\n        const elementProps = getElementPropsConfig(\r\n          child,\r\n          editorKey,\r\n          offsetKey,\r\n          blockStyleFn,\r\n          customConfig,\r\n        );\r\n        const childProps = {\r\n          ...this.props,\r\n          tree: editorState.getBlockTree(key),\r\n          blockProps: customConfig.customProps,\r\n          offsetKey,\r\n          block: child,\r\n        };\r\n\r\n        acc.push(\r\n          React.createElement(\r\n            Element,\r\n            elementProps,\r\n            <Component {...childProps} />,\r\n          ),\r\n        );\r\n\r\n        if (\r\n          !wrapperTemplate ||\r\n          shouldNotAddWrapperElement(child, contentState)\r\n        ) {\r\n          return acc;\r\n        }\r\n\r\n        // if we are here it means we are the last block\r\n        // that has a wrapperTemplate so we should wrap itself\r\n        // and all other previous siblings that share the same wrapper\r\n        applyWrapperElementToSiblings(wrapperTemplate, Element, acc);\r\n\r\n        return acc;\r\n      }, []);\r\n    }\r\n\r\n    const blockKey = block.getKey();\r\n    const offsetKey = DraftOffsetKey.encode(blockKey, 0, 0);\r\n\r\n    const customConfig:any = getCustomRenderConfig(block, blockRendererFn);\r\n    const Component = customConfig.CustomComponent;\r\n    const blockNode =\r\n      Component != null ? (\r\n        <Component\r\n          {...this.props}\r\n          tree={editorState.getBlockTree(blockKey)}\r\n          blockProps={customConfig.customProps}\r\n          offsetKey={offsetKey}\r\n          block={block}\r\n        />\r\n      ) : (\r\n        // @ts-ignore\r\n        <DraftEditorNode\r\n          block={block}\r\n          children={children}\r\n          contentState={contentState}\r\n          customStyleFn={customStyleFn}\r\n          customStyleMap={customStyleMap}\r\n          decorator={decorator}\r\n          direction={direction}\r\n          forceSelection={forceSelection}\r\n          hasSelection={isBlockOnSelectionEdge(selection, blockKey)}\r\n          selection={selection}\r\n          tree={tree}\r\n        />\r\n      );\r\n\r\n    if (block.getParentKey()) {\r\n      return blockNode;\r\n    }\r\n\r\n    const {Element} = getDraftRenderConfig(block, blockRenderMap) as any;\r\n    const elementProps = getElementPropsConfig(\r\n      block,\r\n      editorKey,\r\n      offsetKey,\r\n      blockStyleFn,\r\n      customConfig,\r\n    );\r\n\r\n    // root block nodes needs to be wrapped\r\n    return React.createElement(Element, elementProps, blockNode);\r\n  }\r\n}\r\n\r\nexport default  DraftEditorBlockNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n *\r\n * This file is a fork of DraftEditorContents.react.js for tree nodes\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../../../model/immutable/BlockNodeRecord';\r\nimport  {DraftBlockRenderMap} from '../../../model/immutable/DraftBlockRenderMap';\r\nimport  {DraftInlineStyle} from '../../../model/immutable/DraftInlineStyle';\r\nimport  EditorState from '../../../model/immutable/EditorState';\r\nimport  {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\nimport DraftEditorBlockNode from './DraftEditorBlockNode.react';\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport React, { ReactNode } from 'react'\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\ntype Props = {\r\n  blockRenderMap: DraftBlockRenderMap,\r\n  blockRendererFn: (block: BlockNodeRecord) => Object,\r\n  blockStyleFn?: (block: BlockNodeRecord) => string,\r\n  customStyleFn?: (style: DraftInlineStyle, block: BlockNodeRecord) => Object,\r\n  customStyleMap?: Object,\r\n  editorKey?: string,\r\n  editorState: EditorState,\r\n  textDirectionality?: BidiDirection,\r\n};\r\n\r\n/**\r\n * `DraftEditorContents` is the container component for all block components\r\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\r\n * re-rendering blocks whenever possible.\r\n *\r\n * This component is separate from `DraftEditor` because certain props\r\n * (for instance, ARIA props) must be allowed to update without affecting\r\n * the contents of the editor.\r\n */\r\nclass DraftEditorContentsExperimental extends React.Component<Props> {\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    const prevEditorState = this.props.editorState;\r\n    const nextEditorState = nextProps.editorState;\r\n\r\n    const prevDirectionMap = prevEditorState.getDirectionMap();\r\n    const nextDirectionMap = nextEditorState.getDirectionMap();\r\n\r\n    // Text direction has changed for one or more blocks. We must re-render.\r\n    if (prevDirectionMap !== nextDirectionMap) {\r\n      return true;\r\n    }\r\n\r\n    const didHaveFocus = prevEditorState.getSelection().getHasFocus();\r\n    const nowHasFocus = nextEditorState.getSelection().getHasFocus();\r\n\r\n    if (didHaveFocus !== nowHasFocus) {\r\n      return true;\r\n    }\r\n\r\n    const nextNativeContent = nextEditorState.getNativelyRenderedContent();\r\n\r\n    const wasComposing = prevEditorState.isInCompositionMode();\r\n    const nowComposing = nextEditorState.isInCompositionMode();\r\n\r\n    // If the state is unchanged or we're currently rendering a natively\r\n    // rendered state, there's nothing new to be done.\r\n    if (\r\n      prevEditorState === nextEditorState ||\r\n      (nextNativeContent !== null &&\r\n        nextEditorState.getCurrentContent() === nextNativeContent) ||\r\n      (wasComposing && nowComposing)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    const prevContent = prevEditorState.getCurrentContent();\r\n    const nextContent = nextEditorState.getCurrentContent();\r\n    const prevDecorator = prevEditorState.getDecorator();\r\n    const nextDecorator = nextEditorState.getDecorator();\r\n    return (\r\n      wasComposing !== nowComposing ||\r\n      prevContent !== nextContent ||\r\n      prevDecorator !== nextDecorator ||\r\n      nextEditorState.mustForceSelection()\r\n    );\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const {\r\n      blockRenderMap,\r\n      blockRendererFn,\r\n      blockStyleFn,\r\n      customStyleMap,\r\n      customStyleFn,\r\n      editorState,\r\n      editorKey,\r\n      textDirectionality,\r\n    } = this.props;\r\n\r\n    const content = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n    const forceSelection = editorState.mustForceSelection();\r\n    const decorator = editorState.getDecorator();\r\n    const directionMap = nullthrows(editorState.getDirectionMap());\r\n\r\n    const blocksAsArray = content.getBlocksAsArray();\r\n    const rootBlock = blocksAsArray[0];\r\n    const processedBlocks = [];\r\n\r\n    let nodeBlock = rootBlock;\r\n\r\n    while (nodeBlock) {\r\n      const blockKey = nodeBlock.getKey();\r\n      const blockProps = {\r\n        blockRenderMap,\r\n        blockRendererFn,\r\n        blockStyleFn,\r\n        contentState: content,\r\n        customStyleFn,\r\n        customStyleMap,\r\n        decorator,\r\n        editorKey,\r\n        editorState,\r\n        forceSelection,\r\n        selection,\r\n        block: nodeBlock,\r\n        direction: textDirectionality\r\n          ? textDirectionality\r\n          : directionMap.get(blockKey),\r\n        tree: editorState.getBlockTree(blockKey),\r\n      };\r\n\r\n      const configForType =\r\n        blockRenderMap.get(nodeBlock.getType()) ||\r\n        blockRenderMap.get('unstyled');\r\n      const wrapperTemplate = configForType.wrapper;\r\n      processedBlocks.push({\r\n        /* $FlowFixMe(>=0.112.0 site=mobile) This comment suppresses an error\r\n         * found when Flow v0.112 was deployed. To see the error delete this\r\n         * comment and run Flow. */\r\n        /* $FlowFixMe(>=0.112.0 site=www) This comment suppresses an error\r\n         * found when Flow v0.112 was deployed. To see the error delete this\r\n         * comment and run Flow. */\r\n        /* $FlowFixMe(>=0.112.0 site=www,mobile) This comment suppresses an\r\n         * error found when Flow v0.112 was deployed. To see the error delete\r\n         * this comment and run Flow. */\r\n        // @ts-ignore\r\n        block: <DraftEditorBlockNode key={blockKey} {...blockProps} />,\r\n        wrapperTemplate,\r\n        key: blockKey,\r\n        offsetKey: DraftOffsetKey.encode(blockKey, 0, 0),\r\n      });\r\n\r\n      const nextBlockKey = nodeBlock.getNextSiblingKey();\r\n      nodeBlock = nextBlockKey ? content.getBlockForKey(nextBlockKey) : null;\r\n    }\r\n\r\n    // Group contiguous runs of blocks that have the same wrapperTemplate\r\n    const outputBlocks = [];\r\n    for (let ii = 0; ii < processedBlocks.length; ) {\r\n      const info: any = processedBlocks[ii];\r\n      if (info.wrapperTemplate) {\r\n        const blocks = [];\r\n        do {\r\n          blocks.push(processedBlocks[ii].block);\r\n          ii++;\r\n        } while (\r\n          ii < processedBlocks.length &&\r\n          processedBlocks[ii].wrapperTemplate === info.wrapperTemplate\r\n        );\r\n        const wrapperElement = React.cloneElement(\r\n          info.wrapperTemplate,\r\n          {\r\n            key: info.key + '-wrap',\r\n            'data-offset-key': info.offsetKey,\r\n          },\r\n          blocks,\r\n        );\r\n        outputBlocks.push(wrapperElement);\r\n      } else {\r\n        outputBlocks.push(info.block);\r\n        ii++;\r\n      }\r\n    }\r\n\r\n    return <div data-contents=\"true\">{outputBlocks}</div>;\r\n  }\r\n}\r\n\r\nexport default  DraftEditorContentsExperimental;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\nimport  {BlockNodeRecord} from '../../model/immutable/BlockNodeRecord';\r\nimport  ContentState from '../../model/immutable/ContentState';\r\nimport  {DraftDecoratorComponentProps} from '../../model/decorators/DraftDecorator';\r\nimport {DraftDecoratorType} from '../../model/decorators/DraftDecoratorType';\r\nimport  {DraftInlineStyle} from '../../model/immutable/DraftInlineStyle';\r\nimport  SelectionState from '../../model/immutable/SelectionState';\r\nimport  {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\nimport {List} from 'immutable';\r\n\r\nimport DraftEditorLeaf from './DraftEditorLeaf.react';\r\nimport DraftOffsetKey from '../selection/DraftOffsetKey';\r\nimport React, { ReactNode  } from 'react';\r\nimport Scroll from 'fbjs/lib/Scroll';\r\nimport Style from 'fbjs/lib/Style';\r\nimport UnicodeBidi from 'fbjs/lib/UnicodeBidi';\r\nimport UnicodeBidiDirection from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\nimport cx from 'fbjs/lib/cx'\r\nimport getElementPosition from 'fbjs/lib/getElementPosition';\r\nimport getScrollPosition from 'fbjs/lib/getScrollPosition';\r\nimport getViewportDimensions from 'fbjs/lib/getViewportDimensions';\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport isHTMLElement from '../utils/isHTMLElement';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\nconst SCROLL_BUFFER = 10;\r\n\r\ntype Props = {\r\n  block: BlockNodeRecord,\r\n  blockProps?: Object,\r\n  blockStyleFn: (block: BlockNodeRecord) => string,\r\n  contentState: ContentState,\r\n  customStyleFn: (style: DraftInlineStyle, block: BlockNodeRecord) => Object,\r\n  customStyleMap: Object,\r\n  decorator: DraftDecoratorType,\r\n  direction: BidiDirection,\r\n  forceSelection: boolean,\r\n  offsetKey: string,\r\n  selection: SelectionState,\r\n  startIndent?: boolean,\r\n  tree: List<any>,\r\n};\r\n\r\n/**\r\n * Return whether a block overlaps with either edge of the `SelectionState`.\r\n */\r\nconst isBlockOnSelectionEdge = (\r\n  selection: SelectionState,\r\n  key: string,\r\n): boolean => {\r\n  return selection.getAnchorKey() === key || selection.getFocusKey() === key;\r\n};\r\n\r\n/**\r\n * The default block renderer for a `DraftEditor` component.\r\n *\r\n * A `DraftEditorBlock` is able to render a given `ContentBlock` to its\r\n * appropriate decorator and inline style components.\r\n */\r\nclass DraftEditorBlock extends React.Component<Props> {\r\n  _node: HTMLDivElement;\r\n\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    return (\r\n      this.props.block !== nextProps.block ||\r\n      this.props.tree !== nextProps.tree ||\r\n      this.props.direction !== nextProps.direction ||\r\n      (isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) &&\r\n        nextProps.forceSelection)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When a block is mounted and overlaps the selection state, we need to make\r\n   * sure that the cursor is visible to match native behavior. This may not\r\n   * be the case if the user has pressed `RETURN` or pasted some content, since\r\n   * programmatically creating these new blocks and setting the DOM selection\r\n   * will miss out on the browser natively scrolling to that position.\r\n   *\r\n   * To replicate native behavior, if the block overlaps the selection state\r\n   * on mount, force the scroll position. Check the scroll state of the scroll\r\n   * parent, and adjust it to align the entire block to the bottom of the\r\n   * scroll parent.\r\n   */\r\n  componentDidMount(): void {\r\n    const selection = this.props.selection;\r\n    const endKey = selection.getEndKey();\r\n    if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\r\n      return;\r\n    }\r\n\r\n    const blockNode = this._node;\r\n    if (blockNode == null) {\r\n      return;\r\n    }\r\n    const scrollParent = Style.getScrollParent(blockNode);\r\n    const scrollPosition = getScrollPosition(scrollParent);\r\n    let scrollDelta;\r\n\r\n    if (scrollParent === window) {\r\n      const nodePosition = getElementPosition(blockNode);\r\n      const nodeBottom = nodePosition.y + nodePosition.height;\r\n      const viewportHeight = getViewportDimensions().height;\r\n      scrollDelta = nodeBottom - viewportHeight;\r\n      if (scrollDelta > 0) {\r\n        window.scrollTo(\r\n          scrollPosition.x,\r\n          scrollPosition.y + scrollDelta + SCROLL_BUFFER,\r\n        );\r\n      }\r\n    } else {\r\n      invariant(isHTMLElement(blockNode), 'blockNode is not an HTMLElement');\r\n      const blockBottom = blockNode.offsetHeight + blockNode.offsetTop;\r\n      const pOffset = scrollParent.offsetTop + scrollParent.offsetHeight;\r\n      const scrollBottom = pOffset + scrollPosition.y;\r\n\r\n      scrollDelta = blockBottom - scrollBottom;\r\n      if (scrollDelta > 0) {\r\n        Scroll.setTop(\r\n          scrollParent,\r\n          Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  _renderChildren(): Array<ReactNode> {\r\n    const block = this.props.block;\r\n    const blockKey = block.getKey();\r\n    const text = block.getText();\r\n    const lastLeafSet = this.props.tree.size - 1;\r\n    const hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);\r\n\r\n    return this.props.tree\r\n      .map((leafSet, ii) => {\r\n        const leavesForLeafSet = leafSet.get('leaves');\r\n        // T44088704\r\n        if (leavesForLeafSet.size === 0) {\r\n          return null;\r\n        }\r\n        const lastLeaf = leavesForLeafSet.size - 1;\r\n        const leaves = leavesForLeafSet\r\n          .map((leaf, jj) => {\r\n            const offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\r\n            const start = leaf.get('start');\r\n            const end = leaf.get('end');\r\n\r\n            return (\r\n              // @ts-ignore\r\n              <DraftEditorLeaf\r\n                key={offsetKey}\r\n                offsetKey={offsetKey}\r\n                block={block}\r\n                start={start}\r\n                selection={hasSelection ? this.props.selection : null}\r\n                forceSelection={this.props.forceSelection}\r\n                text={text.slice(start, end)}\r\n                styleSet={block.getInlineStyleAt(start)}\r\n                customStyleMap={this.props.customStyleMap}\r\n                customStyleFn={this.props.customStyleFn}\r\n                isLast={ii === lastLeafSet && jj === lastLeaf}\r\n              />\r\n            );\r\n          })\r\n          .toArray();\r\n\r\n        const decoratorKey = leafSet.get('decoratorKey');\r\n        if (decoratorKey == null) {\r\n          return leaves;\r\n        }\r\n\r\n        if (!this.props.decorator) {\r\n          return leaves;\r\n        }\r\n\r\n        const decorator = nullthrows(this.props.decorator);\r\n\r\n        const DecoratorComponent = decorator.getComponentForKey(decoratorKey);\r\n        if (!DecoratorComponent) {\r\n          return leaves;\r\n        }\r\n\r\n        const decoratorProps = decorator.getPropsForKey(decoratorKey);\r\n        const decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);\r\n        const start = leavesForLeafSet.first().get('start');\r\n        const end = leavesForLeafSet.last().get('end');\r\n        const decoratedText = text.slice(start, end);\r\n        const entityKey = block.getEntityAt(leafSet.get('start'));\r\n\r\n        // Resetting dir to the same value on a child node makes Chrome/Firefox\r\n        // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\r\n        const dir = UnicodeBidiDirection.getHTMLDirIfDifferent(\r\n          UnicodeBidi.getDirection(decoratedText),\r\n          this.props.direction,\r\n        );\r\n\r\n        const commonProps: DraftDecoratorComponentProps = {\r\n          contentState: this.props.contentState,\r\n          decoratedText,\r\n          dir: dir,\r\n          key: decoratorOffsetKey,\r\n          start,\r\n          end,\r\n          blockKey,\r\n          entityKey,\r\n          offsetKey: decoratorOffsetKey,\r\n        };\r\n\r\n        return (\r\n          <DecoratorComponent {...decoratorProps} {...commonProps}>\r\n            {leaves}\r\n          </DecoratorComponent>\r\n        );\r\n      })\r\n      .toArray();\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const {direction, offsetKey} = this.props;\r\n    const className = cx({\r\n      'public/DraftStyleDefault/block': true,\r\n      'public/DraftStyleDefault/ltr': direction === 'LTR',\r\n      'public/DraftStyleDefault/rtl': direction === 'RTL',\r\n    });\r\n\r\n    return (\r\n      <div\r\n        data-offset-key={offsetKey}\r\n        className={className}\r\n        ref={ref => (this._node = ref)}>\r\n        {this._renderChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  DraftEditorBlock;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../../model/immutable/BlockNodeRecord';\r\nimport  {DraftBlockRenderMap} from '../../model/immutable/DraftBlockRenderMap';\r\nimport  {DraftInlineStyle} from '../../model/immutable/DraftInlineStyle';\r\nimport  EditorState from '../../model/immutable/EditorState';\r\nimport  {BidiDirection} from 'fbjs/lib/UnicodeBidiDirection';\r\n\r\nimport DraftEditorBlock from './DraftEditorBlock.react';\r\nimport DraftOffsetKey from '../selection/DraftOffsetKey';\r\nimport React, {ReactNode} from 'react'\r\nimport cx from 'fbjs/lib/cx'\r\nimport joinClasses from 'fbjs/lib/joinClasses';\r\n\r\n\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\ntype Props = {\r\n  blockRenderMap: DraftBlockRenderMap,\r\n  blockRendererFn: (block: BlockNodeRecord) => Object,\r\n  blockStyleFn?: (block: BlockNodeRecord) => string,\r\n  customStyleFn?: (style: DraftInlineStyle, block: BlockNodeRecord) => Object,\r\n  customStyleMap?: Object,\r\n  editorKey?: string,\r\n  editorState: EditorState,\r\n  textDirectionality?: BidiDirection,\r\n};\r\n\r\n/**\r\n * Provide default styling for list items. This way, lists will be styled with\r\n * proper counters and indentation even if the caller does not specify\r\n * their own styling at all. If more than five levels of nesting are needed,\r\n * the necessary CSS classes can be provided via `blockStyleFn` configuration.\r\n */\r\nconst getListItemClasses = (\r\n  type: string,\r\n  depth: number,\r\n  shouldResetCount: boolean,\r\n  direction: BidiDirection,\r\n): string => {\r\n  return cx({\r\n    'public/DraftStyleDefault/unorderedListItem':\r\n      type === 'unordered-list-item',\r\n    'public/DraftStyleDefault/orderedListItem': type === 'ordered-list-item',\r\n    'public/DraftStyleDefault/reset': shouldResetCount,\r\n    'public/DraftStyleDefault/depth0': depth === 0,\r\n    'public/DraftStyleDefault/depth1': depth === 1,\r\n    'public/DraftStyleDefault/depth2': depth === 2,\r\n    'public/DraftStyleDefault/depth3': depth === 3,\r\n    'public/DraftStyleDefault/depth4': depth >= 4,\r\n    'public/DraftStyleDefault/listLTR': direction === 'LTR',\r\n    'public/DraftStyleDefault/listRTL': direction === 'RTL',\r\n  });\r\n};\r\n\r\n/**\r\n * `DraftEditorContents` is the container component for all block components\r\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\r\n * re-rendering blocks whenever possible.\r\n *\r\n * This component is separate from `DraftEditor` because certain props\r\n * (for instance, ARIA props) must be allowed to update without affecting\r\n * the contents of the editor.\r\n */\r\nclass DraftEditorContents extends React.Component<Props> {\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    const prevEditorState = this.props.editorState;\r\n    const nextEditorState = nextProps.editorState;\r\n\r\n    const prevDirectionMap = prevEditorState.getDirectionMap();\r\n    const nextDirectionMap = nextEditorState.getDirectionMap();\r\n\r\n    // Text direction has changed for one or more blocks. We must re-render.\r\n    if (prevDirectionMap !== nextDirectionMap) {\r\n      return true;\r\n    }\r\n\r\n    const didHaveFocus = prevEditorState.getSelection().getHasFocus();\r\n    const nowHasFocus = nextEditorState.getSelection().getHasFocus();\r\n\r\n    if (didHaveFocus !== nowHasFocus) {\r\n      return true;\r\n    }\r\n\r\n    const nextNativeContent = nextEditorState.getNativelyRenderedContent();\r\n\r\n    const wasComposing = prevEditorState.isInCompositionMode();\r\n    const nowComposing = nextEditorState.isInCompositionMode();\r\n\r\n    // If the state is unchanged or we're currently rendering a natively\r\n    // rendered state, there's nothing new to be done.\r\n    if (\r\n      prevEditorState === nextEditorState ||\r\n      (nextNativeContent !== null &&\r\n        nextEditorState.getCurrentContent() === nextNativeContent) ||\r\n      (wasComposing && nowComposing)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    const prevContent = prevEditorState.getCurrentContent();\r\n    const nextContent = nextEditorState.getCurrentContent();\r\n    const prevDecorator = prevEditorState.getDecorator();\r\n    const nextDecorator = nextEditorState.getDecorator();\r\n    return (\r\n      wasComposing !== nowComposing ||\r\n      prevContent !== nextContent ||\r\n      prevDecorator !== nextDecorator ||\r\n      nextEditorState.mustForceSelection()\r\n    );\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const {\r\n      blockRenderMap,\r\n      blockRendererFn,\r\n      blockStyleFn,\r\n      customStyleMap,\r\n      customStyleFn,\r\n      editorState,\r\n      editorKey,\r\n      textDirectionality,\r\n    } = this.props;\r\n\r\n    const content = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n    const forceSelection = editorState.mustForceSelection();\r\n    const decorator = editorState.getDecorator();\r\n    const directionMap = nullthrows(editorState.getDirectionMap());\r\n\r\n    const blocksAsArray = content.getBlocksAsArray();\r\n    const processedBlocks = [];\r\n\r\n    let currentDepth = null;\r\n    let lastWrapperTemplate = null;\r\n\r\n    for (let ii = 0; ii < blocksAsArray.length; ii++) {\r\n      const block = blocksAsArray[ii];\r\n      const key = block.getKey();\r\n      const blockType = block.getType();\r\n\r\n      const customRenderer:any = blockRendererFn(block);\r\n      let CustomComponent, customProps, customEditable;\r\n      if (customRenderer) {\r\n        CustomComponent = customRenderer.component;\r\n        customProps = customRenderer.props;\r\n        customEditable = customRenderer.editable;\r\n      }\r\n\r\n      const direction = textDirectionality\r\n        ? textDirectionality\r\n        : directionMap.get(key);\r\n      const offsetKey = DraftOffsetKey.encode(key, 0, 0);\r\n      const componentProps = {\r\n        contentState: content,\r\n        block,\r\n        blockProps: customProps,\r\n        blockStyleFn,\r\n        customStyleMap,\r\n        customStyleFn,\r\n        decorator,\r\n        direction,\r\n        forceSelection,\r\n        offsetKey,\r\n        selection,\r\n        tree: editorState.getBlockTree(key),\r\n      };\r\n\r\n      const configForType =\r\n        blockRenderMap.get(blockType) || blockRenderMap.get('unstyled');\r\n      const wrapperTemplate = configForType.wrapper;\r\n\r\n      const Element =\r\n        configForType.element || blockRenderMap.get('unstyled').element;\r\n\r\n      const depth = block.getDepth();\r\n      let className = '';\r\n      if (blockStyleFn) {\r\n        className = blockStyleFn(block);\r\n      }\r\n\r\n      // List items are special snowflakes, since we handle nesting and\r\n      // counters manually.\r\n      if (Element === 'li') {\r\n        const shouldResetCount =\r\n          lastWrapperTemplate !== wrapperTemplate ||\r\n          currentDepth === null ||\r\n          depth > currentDepth;\r\n        className = joinClasses(\r\n          className,\r\n          getListItemClasses(blockType, depth, shouldResetCount, direction),\r\n        );\r\n      }\r\n\r\n      const Component = CustomComponent || DraftEditorBlock;\r\n      let childProps:any = {\r\n        className,\r\n        'data-block': true,\r\n        'data-editor': editorKey,\r\n        'data-offset-key': offsetKey,\r\n        key,\r\n      };\r\n      if (customEditable !== undefined) {\r\n        childProps = {\r\n          ...childProps,\r\n          contentEditable: customEditable,\r\n          suppressContentEditableWarning: true,\r\n        };\r\n      }\r\n\r\n      const child = React.createElement(\r\n        Element,\r\n        childProps,\r\n        /* $FlowFixMe(>=0.112.0 site=mobile) This comment suppresses an error\r\n         * found when Flow v0.112 was deployed. To see the error delete this\r\n         * comment and run Flow. */\r\n        /* $FlowFixMe(>=0.112.0 site=www) This comment suppresses an error\r\n         * found when Flow v0.112 was deployed. To see the error delete this\r\n         * comment and run Flow. */\r\n        /* $FlowFixMe(>=0.112.0 site=www,mobile) This comment suppresses an\r\n         * error found when Flow v0.112 was deployed. To see the error delete\r\n         * this comment and run Flow. */\r\n        <Component {...componentProps} key={key} />,\r\n      );\r\n\r\n      processedBlocks.push({\r\n        block: child,\r\n        wrapperTemplate,\r\n        key,\r\n        offsetKey,\r\n      });\r\n\r\n      if (wrapperTemplate) {\r\n        currentDepth = block.getDepth();\r\n      } else {\r\n        currentDepth = null;\r\n      }\r\n      lastWrapperTemplate = wrapperTemplate;\r\n    }\r\n\r\n    // Group contiguous runs of blocks that have the same wrapperTemplate\r\n    const outputBlocks = [];\r\n    for (let ii = 0; ii < processedBlocks.length; ) {\r\n      const info: any = processedBlocks[ii];\r\n      if (info.wrapperTemplate) {\r\n        const blocks = [];\r\n        do {\r\n          blocks.push(processedBlocks[ii].block);\r\n          ii++;\r\n        } while (\r\n          ii < processedBlocks.length &&\r\n          processedBlocks[ii].wrapperTemplate === info.wrapperTemplate\r\n        );\r\n        const wrapperElement = React.cloneElement(\r\n          info.wrapperTemplate,\r\n          {\r\n            key: info.key + '-wrap',\r\n            'data-offset-key': info.offsetKey,\r\n          },\r\n          blocks,\r\n        );\r\n        outputBlocks.push(wrapperElement);\r\n      } else {\r\n        outputBlocks.push(info.block);\r\n        ii++;\r\n      }\r\n    }\r\n\r\n    return <div data-contents=\"true\">{outputBlocks}</div>;\r\n  }\r\n}\r\n\r\nexport default  DraftEditorContents;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport gkx from \"./gkx\";\r\n\r\nconst experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\r\nimport DraftEditorContentsExperimental from \"../component/contents/exploration/DraftEditorContentsExperimental.react\";\r\nimport DraftEditorContents from \"../component/contents/DraftEditorContents-core.react\";\r\n\r\nlet theExport = experimentalTreeDataSupport ? DraftEditorContentsExperimental : DraftEditorContents;\r\nexport default theExport;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst TEXT_CLIPPING_REGEX = /\\.textClipping$/;\r\n\r\nconst TEXT_TYPES = {\r\n  'text/plain': true,\r\n  'text/html': true,\r\n  'text/rtf': true,\r\n};\r\n\r\n// Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\r\nconst TEXT_SIZE_UPPER_BOUND = 5000;\r\n\r\n/**\r\n * Extract the text content from a file list.\r\n */\r\nfunction getTextContentFromFiles(\r\n  files: Array<File>,\r\n  callback: (contents: string) => void,\r\n): void {\r\n  let readCount = 0;\r\n  const results = [];\r\n  files.forEach(function(/*blob*/ file) {\r\n    readFile(file, function(/*string*/ text) {\r\n      readCount++;\r\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\r\n      if (readCount == files.length) {\r\n        callback(results.join('\\r'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * todo isaac: Do work to turn html/rtf into a content fragment.\r\n */\r\nfunction readFile(file: File, callback: (contents: string) => void): void {\r\n  if (!(global as any).FileReader || (file.type && !(file.type in TEXT_TYPES))) {\r\n    callback('');\r\n    return;\r\n  }\r\n\r\n  if (file.type === '') {\r\n    let contents = '';\r\n    // Special-case text clippings, which have an empty type but include\r\n    // `.textClipping` in the file name. `readAsText` results in an empty\r\n    // string for text clippings, so we force the file name to serve\r\n    // as the text value for the file.\r\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\r\n      contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\r\n    }\r\n    callback(contents);\r\n    return;\r\n  }\r\n\r\n  const reader = new FileReader();\r\n  reader.onload = function() {\r\n    const result:any = reader.result;\r\n    invariant(\r\n      typeof result === 'string',\r\n      'We should be calling \"FileReader.readAsText\" which returns a string',\r\n    );\r\n    callback(result);\r\n  };\r\n  reader.onerror = function() {\r\n    callback('');\r\n  };\r\n  reader.readAsText(file);\r\n}\r\n\r\nexport default  getTextContentFromFiles;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {DraftHandleValue} from '../../model/constants/DraftHandleValue';\r\n\r\n/**\r\n * Utility method for determining whether or not the value returned\r\n * from a handler indicates that it was handled.\r\n */\r\nfunction isEventHandled(value: DraftHandleValue): boolean {\r\n  return value === 'handled' || value === true;\r\n}\r\n\r\nexport default  isEventHandled;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\nimport  SelectionState from '../../../model/immutable/SelectionState';\r\n\r\nimport DataTransfer from 'fbjs/lib/DataTransfer';\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport findAncestorOffsetKey from '../../selection/findAncestorOffsetKey';\r\nimport getCorrectDocumentFromNode from '../../utils/getCorrectDocumentFromNode';\r\nimport getTextContentFromFiles from '../../utils/getTextContentFromFiles';\r\nimport getUpdatedSelectionState from '../../selection/getUpdatedSelectionState';\r\nimport getWindowForNode from '../../utils/getWindowForNode';\r\nimport isEventHandled from '../../utils/isEventHandled';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\n/**\r\n * Get a SelectionState for the supplied mouse event.\r\n */\r\nfunction getSelectionForEvent(\r\n  event: any,\r\n  editorState: EditorState,\r\n): SelectionState {\r\n  let node: Node = null;\r\n  let offset: number = null;\r\n\r\n  const eventTargetDocument = getCorrectDocumentFromNode(event.currentTarget);\r\n  /* $FlowFixMe(>=0.68.0 site=www,mobile) This comment suppresses an error\r\n   * found when Flow v0.68 was deployed. To see the error delete this comment\r\n   * and run Flow. */\r\n  if (typeof eventTargetDocument.caretRangeFromPoint === 'function') {\r\n    const dropRange = eventTargetDocument.caretRangeFromPoint(event.x, event.y);\r\n    node = dropRange.startContainer;\r\n    offset = dropRange.startOffset;\r\n  } else if (event.rangeParent) {\r\n    node = event.rangeParent;\r\n    offset = event.rangeOffset;\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n  node = nullthrows(node);\r\n  offset = nullthrows(offset);\r\n  const offsetKey = nullthrows(findAncestorOffsetKey(node));\r\n\r\n  return getUpdatedSelectionState(\r\n    editorState,\r\n    offsetKey,\r\n    offset,\r\n    offsetKey,\r\n    offset,\r\n  );\r\n}\r\n\r\nconst DraftEditorDragHandler = {\r\n  /**\r\n   * Drag originating from input terminated.\r\n   */\r\n  onDragEnd: function(editor: DraftEditor): void {\r\n    editor.exitCurrentMode();\r\n    endDrag(editor);\r\n  },\r\n\r\n  /**\r\n   * Handle data being dropped.\r\n   */\r\n  onDrop: function(editor: DraftEditor, e: any): void {\r\n    const data = new DataTransfer(e.nativeEvent.dataTransfer);\r\n\r\n    const editorState: EditorState = editor._latestEditorState;\r\n    const dropSelection: SelectionState = getSelectionForEvent(\r\n      e.nativeEvent,\r\n      editorState,\r\n    );\r\n\r\n    e.preventDefault();\r\n    editor._dragCount = 0;\r\n    editor.exitCurrentMode();\r\n\r\n    if (dropSelection == null) {\r\n      return;\r\n    }\r\n\r\n    /* $FlowFixMe This comment suppresses an error found DataTransfer was typed.\r\n     * getFiles() returns an array of <Files extends Blob>, not Blob */\r\n    const files: Array<Blob> = (data.getFiles() as any);\r\n    if (files.length > 0) {\r\n      if (\r\n        editor.props.handleDroppedFiles &&\r\n        isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      getTextContentFromFiles(files as any, fileText => {\r\n        fileText &&\r\n          editor.update(\r\n            insertTextAtSelection(editorState, dropSelection, fileText),\r\n          );\r\n      });\r\n      return;\r\n    }\r\n\r\n    const dragType = editor._internalDrag ? 'internal' : 'external';\r\n    if (\r\n      editor.props.handleDrop &&\r\n      isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))\r\n    ) {\r\n      // handled\r\n    } else if (editor._internalDrag) {\r\n      editor.update(moveText(editorState, dropSelection));\r\n    } else {\r\n      editor.update(\r\n        insertTextAtSelection(\r\n          editorState,\r\n          dropSelection,\r\n          (data.getText() as any),\r\n        ),\r\n      );\r\n    }\r\n    endDrag(editor);\r\n  },\r\n};\r\n\r\nfunction endDrag(editor) {\r\n  editor._internalDrag = false;\r\n\r\n  // Fix issue #1383\r\n  // Prior to React v16.5.0 onDrop breaks onSelect event:\r\n  // https://github.com/facebook/react/issues/11379.\r\n  // Dispatching a mouseup event on DOM node will make it go back to normal.\r\n  const editorNode = ReactDOM.findDOMNode(editor);\r\n  if (editorNode) {\r\n    const mouseUpEvent = new MouseEvent('mouseup', {\r\n      view: getWindowForNode(editorNode),\r\n      bubbles: true,\r\n      cancelable: true,\r\n    });\r\n    editorNode.dispatchEvent(mouseUpEvent);\r\n  }\r\n}\r\n\r\nfunction moveText(\r\n  editorState: EditorState,\r\n  targetSelection: SelectionState,\r\n): EditorState {\r\n  const newContentState = DraftModifier.moveText(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n    targetSelection,\r\n  );\r\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\r\n}\r\n\r\n/**\r\n * Insert text at a specified selection.\r\n */\r\nfunction insertTextAtSelection(\r\n  editorState: EditorState,\r\n  selection: SelectionState,\r\n  text: string,\r\n): EditorState {\r\n  const newContentState = DraftModifier.insertText(\r\n    editorState.getCurrentContent(),\r\n    selection,\r\n    text,\r\n    editorState.getCurrentInlineStyle(),\r\n  );\r\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\r\n}\r\n\r\nexport default  DraftEditorDragHandler;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\nimport React, {   } from 'react'\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\nimport  {DraftInlineStyle} from '../../../model/immutable/DraftInlineStyle';\r\n\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport getEntityKeyForSelection from '../../../model/entity/getEntityKeyForSelection';\r\nimport isEventHandled from '../../utils/isEventHandled';\r\nimport isSelectionAtLeafStart from '../../selection/isSelectionAtLeafStart';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\nimport setImmediate from 'fbjs/lib/setImmediate';\r\n\r\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\r\n// commands that should open and focus the \"quickfind\" search bar. This should\r\n// *never* happen while a contenteditable is focused, but as of v28, it\r\n// sometimes does, even when the keypress event target is the contenteditable.\r\n// This breaks the input. Special case these characters to ensure that when\r\n// they are typed, we prevent default on the event to make sure not to\r\n// trigger quickfind.\r\nconst FF_QUICKFIND_CHAR = \"'\";\r\nconst FF_QUICKFIND_LINK_CHAR = '/';\r\nconst isFirefox = UserAgent.isBrowser('Firefox');\r\n\r\nfunction mustPreventDefaultForCharacter(character: string): boolean {\r\n  return (\r\n    isFirefox &&\r\n    (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR)\r\n  );\r\n}\r\n\r\n/**\r\n * Replace the current selection with the specified text string, with the\r\n * inline style and entity key applied to the newly inserted text.\r\n */\r\nfunction replaceText(\r\n  editorState: EditorState,\r\n  text: string,\r\n  inlineStyle: DraftInlineStyle,\r\n  entityKey: string,\r\n  forceSelection: boolean,\r\n): EditorState {\r\n  const contentState = DraftModifier.replaceText(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n    text,\r\n    inlineStyle,\r\n    entityKey,\r\n  );\r\n  return EditorState.push(\r\n    editorState,\r\n    contentState,\r\n    'insert-characters',\r\n    forceSelection,\r\n  );\r\n}\r\n\r\n/**\r\n * When `onBeforeInput` executes, the browser is attempting to insert a\r\n * character into the editor. Apply this character data to the document,\r\n * allowing native insertion if possible.\r\n *\r\n * Native insertion is encouraged in order to limit re-rendering and to\r\n * preserve spellcheck highlighting, which disappears or flashes if re-render\r\n * occurs on the relevant text nodes.\r\n */\r\nfunction editOnBeforeInput(\r\n  editor: DraftEditor,\r\n  e: InputEvent,\r\n): void {\r\n  if (editor._pendingStateFromBeforeInput !== undefined) {\r\n    editor.update(editor._pendingStateFromBeforeInput as any);\r\n    editor._pendingStateFromBeforeInput = undefined;\r\n  }\r\n\r\n  const editorState = editor._latestEditorState;\r\n\r\n  const chars = e.data;\r\n\r\n  // In some cases (ex: IE ideographic space insertion) no character data\r\n  // is provided. There's nothing to do when this happens.\r\n  if (!chars) {\r\n    return;\r\n  }\r\n\r\n  // Allow the top-level component to handle the insertion manually. This is\r\n  // useful when triggering interesting behaviors for a character insertion,\r\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\r\n  // decorator, or setting a block to be a list item after typing '- ' at the\r\n  // start of the block.\r\n  if (\r\n    editor.props.handleBeforeInput &&\r\n    isEventHandled(\r\n      editor.props.handleBeforeInput(chars, editorState, e.timeStamp),\r\n    )\r\n  ) {\r\n    e.preventDefault();\r\n    return;\r\n  }\r\n\r\n  // If selection is collapsed, conditionally allow native behavior. This\r\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\r\n  // is not collapsed, we will re-render.\r\n  const selection = editorState.getSelection();\r\n  const selectionStart = selection.getStartOffset();\r\n  const anchorKey = selection.getAnchorKey();\r\n\r\n  if (!selection.isCollapsed()) {\r\n    e.preventDefault();\r\n    editor.update(\r\n      replaceText(\r\n        editorState,\r\n        chars,\r\n        editorState.getCurrentInlineStyle(),\r\n        getEntityKeyForSelection(\r\n          editorState.getCurrentContent(),\r\n          editorState.getSelection(),\r\n        ),\r\n        true,\r\n      ),\r\n    );\r\n    return;\r\n  }\r\n\r\n  let newEditorState = replaceText(\r\n    editorState,\r\n    chars,\r\n    editorState.getCurrentInlineStyle(),\r\n    getEntityKeyForSelection(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n    ),\r\n    false,\r\n  );\r\n\r\n  // Bunch of different cases follow where we need to prevent native insertion.\r\n  let mustPreventNative = false;\r\n  if (!mustPreventNative) {\r\n    // Browsers tend to insert text in weird places in the DOM when typing at\r\n    // the start of a leaf, so we'll handle it ourselves.\r\n    mustPreventNative = isSelectionAtLeafStart(\r\n      editor._latestCommittedEditorState,\r\n    );\r\n  }\r\n  if (!mustPreventNative) {\r\n    // Let's say we have a decorator that highlights hashtags. In many cases\r\n    // we need to prevent native behavior and rerender ourselves --\r\n    // particularly, any case *except* where the inserted characters end up\r\n    // anywhere except exactly where you put them.\r\n    //\r\n    // Using [] to denote a decorated leaf, some examples:\r\n    //\r\n    // 1. 'hi #' and append 'f'\r\n    // desired rendering: 'hi [#f]'\r\n    // native rendering would be: 'hi #f' (incorrect)\r\n    //\r\n    // 2. 'x [#foo]' and insert '#' before 'f'\r\n    // desired rendering: 'x #[#foo]'\r\n    // native rendering would be: 'x [##foo]' (incorrect)\r\n    //\r\n    // 3. '[#foobar]' and insert ' ' between 'foo' and 'bar'\r\n    // desired rendering: '[#foo] bar'\r\n    // native rendering would be: '[#foo bar]' (incorrect)\r\n    //\r\n    // 4. '[#foo]' and delete '#' [won't use this beforeinput codepath though]\r\n    // desired rendering: 'foo'\r\n    // native rendering would be: '[foo]' (incorrect)\r\n    //\r\n    // 5. '[#foo]' and append 'b'\r\n    // desired rendering: '[#foob]'\r\n    // native rendering would be: '[#foob]'\r\n    // (native insertion here would be ok for decorators like simple spans,\r\n    // but not more complex decorators. To be safe, we need to prevent it.)\r\n    //\r\n    // It is safe to allow native insertion if and only if the full list of\r\n    // decorator ranges matches what we expect native insertion to give, and\r\n    // the range lengths have not changed. We don't need to compare the content\r\n    // because the only possible mutation to consider here is inserting plain\r\n    // text and decorators can't affect text content.\r\n    const oldBlockTree = editorState.getBlockTree(anchorKey);\r\n    const newBlockTree = newEditorState.getBlockTree(anchorKey);\r\n    mustPreventNative =\r\n      oldBlockTree.size !== newBlockTree.size ||\r\n      oldBlockTree.zip(newBlockTree).some(([oldLeafSet, newLeafSet]) => {\r\n        // selectionStart is guaranteed to be selectionEnd here\r\n        const oldStart = oldLeafSet.get('start');\r\n        const adjustedStart =\r\n          oldStart + (oldStart >= selectionStart ? chars.length : 0);\r\n        const oldEnd = oldLeafSet.get('end');\r\n        const adjustedEnd =\r\n          oldEnd + (oldEnd >= selectionStart ? chars.length : 0);\r\n        const newStart = newLeafSet.get('start');\r\n        const newEnd = newLeafSet.get('end');\r\n        const newDecoratorKey = newLeafSet.get('decoratorKey');\r\n        return (\r\n          // Different decorators\r\n          oldLeafSet.get('decoratorKey') !== newDecoratorKey ||\r\n          // Different number of inline styles\r\n          oldLeafSet.get('leaves').size !== newLeafSet.get('leaves').size ||\r\n          // Different effective decorator position\r\n          adjustedStart !== newStart ||\r\n          adjustedEnd !== newEnd ||\r\n          // Decorator already existed and its length changed\r\n          (newDecoratorKey != null && newEnd - newStart !== oldEnd - oldStart)\r\n        );\r\n      });\r\n  }\r\n  if (!mustPreventNative) {\r\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\r\n  }\r\n  if (!mustPreventNative) {\r\n    mustPreventNative =\r\n      nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !==\r\n      nullthrows(editorState.getDirectionMap()).get(anchorKey);\r\n  }\r\n\r\n  if (mustPreventNative) {\r\n    e.preventDefault();\r\n    newEditorState = EditorState.set(newEditorState, {\r\n      forceSelection: true,\r\n    });\r\n    editor.update(newEditorState);\r\n    return;\r\n  }\r\n\r\n  // We made it all the way! Let the browser do its thing and insert the char.\r\n  newEditorState = EditorState.set(newEditorState, {\r\n    nativelyRenderedContent: newEditorState.getCurrentContent(),\r\n  });\r\n  // The native event is allowed to occur. To allow user onChange handlers to\r\n  // change the inserted text, we wait until the text is actually inserted\r\n  // before we actually update our state. That way when we rerender, the text\r\n  // we see in the DOM will already have been inserted properly.\r\n  editor._pendingStateFromBeforeInput = newEditorState;\r\n  setImmediate(() => {\r\n    if (editor._pendingStateFromBeforeInput !== undefined) {\r\n      editor.update(editor._pendingStateFromBeforeInput as any);\r\n      editor._pendingStateFromBeforeInput = undefined;\r\n    }\r\n  });\r\n}\r\n\r\nexport default  editOnBeforeInput;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../../../model/immutable/BlockMap';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport getContentStateFragment from '../../../model/transaction/getContentStateFragment';\r\n\r\nfunction getFragmentFromSelection(editorState: EditorState): BlockMap {\r\n  const selectionState = editorState.getSelection();\r\n\r\n  if (selectionState.isCollapsed()) {\r\n    return null;\r\n  }\r\n\r\n  return getContentStateFragment(\r\n    editorState.getCurrentContent(),\r\n    selectionState,\r\n  );\r\n}\r\n\r\nexport default  getFragmentFromSelection;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  EditorState from '../../../../model/immutable/EditorState';\r\nimport  SelectionState from '../../../../model/immutable/SelectionState';\r\n\r\nimport warning from 'fbjs/lib/warning';\r\n\r\n/**\r\n * Given a collapsed selection, move the focus `maxDistance` backward within\r\n * the selected block. If the selection will go beyond the start of the block,\r\n * move focus to the end of the previous block, but no further.\r\n *\r\n * This function is not Unicode-aware, so surrogate pairs will be treated\r\n * as having length 2.\r\n */\r\nfunction moveSelectionBackward(\r\n  editorState: EditorState,\r\n  maxDistance: number,\r\n): SelectionState {\r\n  const selection = editorState.getSelection();\r\n  // Should eventually make this an invariant\r\n  warning(\r\n    selection.isCollapsed(),\r\n    'moveSelectionBackward should only be called with a collapsed SelectionState',\r\n  );\r\n  const content = editorState.getCurrentContent();\r\n  const key = selection.getStartKey();\r\n  const offset = selection.getStartOffset();\r\n\r\n  let focusKey = key;\r\n  let focusOffset = 0;\r\n\r\n  if (maxDistance > offset) {\r\n    const keyBefore = content.getKeyBefore(key);\r\n    if (keyBefore == null) {\r\n      focusKey = key;\r\n    } else {\r\n      focusKey = keyBefore;\r\n      const blockBefore = content.getBlockForKey(keyBefore);\r\n      focusOffset = blockBefore.getText().length;\r\n    }\r\n  } else {\r\n    focusOffset = offset - maxDistance;\r\n  }\r\n\r\n  return selection.merge({\r\n    focusKey,\r\n    focusOffset,\r\n    isBackward: true,\r\n  }) as any;\r\n}\r\n\r\nexport default  moveSelectionBackward;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from '../../../../model/immutable/ContentState';\r\nimport  {DraftRemovalDirection} from '../../../../model/constants/DraftRemovalDirection';\r\nimport  EditorState from '../../../../model/immutable/EditorState';\r\nimport  SelectionState from '../../../../model/immutable/SelectionState';\r\n\r\nimport DraftModifier from '../../../../model/modifier/DraftModifier';\r\n\r\nimport gkx from '../../../../stubs/gkx';\r\n\r\nconst experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\n\r\n/**\r\n * For a collapsed selection state, remove text based on the specified strategy.\r\n * If the selection state is not collapsed, remove the entire selected range.\r\n */\r\nfunction removeTextWithStrategy(\r\n  editorState: EditorState,\r\n  strategy: (editorState: EditorState) => SelectionState,\r\n  direction: DraftRemovalDirection,\r\n): ContentState {\r\n  const selection = editorState.getSelection();\r\n  const content = editorState.getCurrentContent();\r\n  let target = selection;\r\n  const anchorKey = selection.getAnchorKey();\r\n  const focusKey = selection.getFocusKey();\r\n  const anchorBlock:any = content.getBlockForKey(anchorKey);\r\n  if (experimentalTreeDataSupport) {\r\n    if (direction === 'forward') {\r\n      if (anchorKey !== focusKey) {\r\n        // For now we ignore forward delete across blocks,\r\n        // if there is demand for this we will implement it.\r\n        return content;\r\n      }\r\n    }\r\n  }\r\n  if (selection.isCollapsed()) {\r\n    if (direction === 'forward') {\r\n      if (editorState.isSelectionAtEndOfContent()) {\r\n        return content;\r\n      }\r\n      if (experimentalTreeDataSupport) {\r\n        const isAtEndOfBlock =\r\n          selection.getAnchorOffset() ===\r\n          content.getBlockForKey(anchorKey).getLength();\r\n        if (isAtEndOfBlock) {\r\n          const anchorBlockSibling = content.getBlockForKey(\r\n            anchorBlock.nextSibling,\r\n          );\r\n          if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0) {\r\n            // For now we ignore forward delete at the end of a block,\r\n            // if there is demand for this we will implement it.\r\n            return content;\r\n          }\r\n        }\r\n      }\r\n    } else if (editorState.isSelectionAtStartOfContent()) {\r\n      return content;\r\n    }\r\n\r\n    target = strategy(editorState);\r\n    if (target === selection) {\r\n      return content;\r\n    }\r\n  }\r\n  return DraftModifier.removeRange(content, target, direction);\r\n}\r\n\r\nexport default  removeTextWithStrategy;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nimport moveSelectionBackward from './moveSelectionBackward';\r\nimport removeTextWithStrategy from './removeTextWithStrategy';\r\n\r\n/**\r\n * Remove the selected range. If the cursor is collapsed, remove the preceding\r\n * character. This operation is Unicode-aware, so removing a single character\r\n * will remove a surrogate pair properly as well.\r\n */\r\nfunction keyCommandPlainBackspace(editorState: EditorState): EditorState {\r\n  const afterRemoval = removeTextWithStrategy(\r\n    editorState,\r\n    strategyState => {\r\n      const selection = strategyState.getSelection();\r\n      const content = strategyState.getCurrentContent();\r\n      const key = selection.getAnchorKey();\r\n      const offset = selection.getAnchorOffset();\r\n      const charBehind = content.getBlockForKey(key).getText()[offset - 1];\r\n      return moveSelectionBackward(\r\n        strategyState,\r\n        charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1,\r\n      );\r\n    },\r\n    'backward',\r\n  );\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  const selection = editorState.getSelection();\r\n  return EditorState.push(\r\n    editorState,\r\n    afterRemoval.set('selectionBefore', selection) as any,\r\n    selection.isCollapsed() ? 'backspace-character' : 'remove-range',\r\n  );\r\n}\r\n\r\nexport default  keyCommandPlainBackspace;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport DraftOffsetKey from '../../selection/DraftOffsetKey';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport {notEmptyKey} from '../../utils/draftKeyUtils';\r\nimport findAncestorOffsetKey from '../../selection/findAncestorOffsetKey';\r\nimport keyCommandPlainBackspace from './commands/keyCommandPlainBackspace';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\nconst isGecko = UserAgent.isEngine('Gecko');\r\n\r\nconst DOUBLE_NEWLINE = '\\n\\n';\r\n\r\nfunction onInputType(inputType: string, editorState: EditorState): EditorState {\r\n  switch (inputType) {\r\n    case 'deleteContentBackward':\r\n      return keyCommandPlainBackspace(editorState);\r\n  }\r\n  return editorState;\r\n}\r\n\r\n/**\r\n * This function serves two purposes\r\n *\r\n * 1. To update the editorState and call onChange method with the new\r\n * editorState. This editorState is calculated in editOnBeforeInput but the\r\n * onChange method is not called with the new state until this method does it.\r\n * It is done to handle a specific case where certain character inputs might\r\n * be replaced with something else. E.g. snippets ('rc' might be replaced\r\n * with boilerplate code for react component). More information on the\r\n * exact problem can be found here -\r\n * https://github.com/facebook/draft-js/commit/07892ba479bd4dfc6afd1e0ed179aaf51cd138b1\r\n *\r\n * 2. intended to handle spellcheck and autocorrect changes,\r\n * which occur in the DOM natively without any opportunity to observe or\r\n * interpret the changes before they occur.\r\n *\r\n * The `input` event fires in contentEditable elements reliably for non-IE\r\n * browsers, immediately after changes occur to the editor DOM. Since our other\r\n * handlers override or otherwise handle cover other varieties of text input,\r\n * the DOM state should match the model in all controlled input cases. Thus,\r\n * when an `input` change leads to a DOM/model mismatch, the change should be\r\n * due to a spellcheck change, and we can incorporate it into our model.\r\n */\r\nfunction editOnInput(editor: DraftEditor, e:any): void {\r\n  if (editor._pendingStateFromBeforeInput !== undefined) {\r\n    editor.update(editor._pendingStateFromBeforeInput as any);\r\n    editor._pendingStateFromBeforeInput = undefined;\r\n  }\r\n  // at this point editor is not null for sure (after input)\r\n  const castedEditorElement: HTMLElement = (editor.editor as any);\r\n  const domSelection = castedEditorElement.ownerDocument.defaultView.getSelection();\r\n\r\n  const {anchorNode, isCollapsed} = domSelection;\r\n  const isNotTextOrElementNode =\r\n    anchorNode.nodeType !== Node.TEXT_NODE &&\r\n    anchorNode.nodeType !== Node.ELEMENT_NODE;\r\n\r\n  if (isNotTextOrElementNode) {\r\n    // TODO: (t16149272) figure out context for this change\r\n    return;\r\n  }\r\n\r\n  if (\r\n    anchorNode.nodeType === Node.TEXT_NODE &&\r\n    (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)\r\n  ) {\r\n    // When typing at the beginning of a visual line, Chrome splits the text\r\n    // nodes into two. Why? No one knows. This commit is suspicious:\r\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\r\n    // To work around, we'll merge the sibling text nodes back into this one.\r\n    const span = anchorNode.parentNode;\r\n    anchorNode.nodeValue = span.textContent;\r\n    for (\r\n      let child = span.firstChild;\r\n      child !== null;\r\n      child = child.nextSibling\r\n    ) {\r\n      if (child !== anchorNode) {\r\n        span.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  let domText = anchorNode.textContent;\r\n  const editorState = editor._latestEditorState;\r\n  const offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\r\n  const {blockKey, decoratorKey, leafKey} = DraftOffsetKey.decode(offsetKey);\r\n\r\n  const {start, end} = editorState\r\n    .getBlockTree(blockKey)\r\n    .getIn([decoratorKey, 'leaves', leafKey]);\r\n\r\n  const content = editorState.getCurrentContent();\r\n  const block = content.getBlockForKey(blockKey);\r\n  const modelText = block.getText().slice(start, end);\r\n\r\n  // Special-case soft newlines here. If the DOM text ends in a soft newline,\r\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\r\n  // We want to remove this extra newline for the purpose of our comparison\r\n  // of DOM and model text.\r\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\r\n    domText = domText.slice(0, -1);\r\n  }\r\n\r\n  // No change -- the DOM is up to date. Nothing to do here.\r\n  if (domText === modelText) {\r\n    // This can be buggy for some Android keyboards because they don't fire\r\n    // standard onkeydown/pressed events and only fired editOnInput\r\n    // so domText is already changed by the browser and ends up being equal\r\n    // to modelText unexpectedly.\r\n    // Newest versions of Android support the dom-inputevent-inputtype\r\n    // and we can use the `inputType` to properly apply the state changes.\r\n\r\n    /* $FlowFixMe inputType is only defined on a draft of a standard.\r\n     * https://w3c.github.io/input-events/#dom-inputevent-inputtype */\r\n    const {inputType} = e.nativeEvent;\r\n    if (inputType) {\r\n      const newEditorState = onInputType(inputType, editorState);\r\n      if (newEditorState !== editorState) {\r\n        editor.restoreEditorDOM();\r\n        editor.update(newEditorState);\r\n        return;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  const selection = editorState.getSelection();\r\n\r\n  // We'll replace the entire leaf with the text content of the target.\r\n  const targetRange = selection.merge({\r\n    anchorOffset: start,\r\n    focusOffset: end,\r\n    isBackward: false,\r\n  });\r\n\r\n  const entityKey = block.getEntityAt(start);\r\n  const entity = notEmptyKey(entityKey) ? content.getEntity(entityKey) : null;\r\n  const entityType = entity != null ? entity.getMutability() : null;\r\n  const preserveEntity = entityType === 'MUTABLE';\r\n\r\n  // Immutable or segmented entities cannot properly be handled by the\r\n  // default browser undo, so we have to use a different change type to\r\n  // force using our internal undo method instead of falling through to the\r\n  // native browser undo.\r\n  const changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\r\n\r\n  const newContent = DraftModifier.replaceText(\r\n    content,\r\n    targetRange as any,\r\n    domText,\r\n    block.getInlineStyleAt(start),\r\n    preserveEntity ? block.getEntityAt(start) : null,\r\n  );\r\n\r\n  let anchorOffset, focusOffset, startOffset, endOffset;\r\n\r\n  if (isGecko) {\r\n    // Firefox selection does not change while the context menu is open, so\r\n    // we preserve the anchor and focus values of the DOM selection.\r\n    anchorOffset = domSelection.anchorOffset;\r\n    focusOffset = domSelection.focusOffset;\r\n    startOffset = start + Math.min(anchorOffset, focusOffset);\r\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\r\n    anchorOffset = startOffset;\r\n    focusOffset = endOffset;\r\n  } else {\r\n    // Browsers other than Firefox may adjust DOM selection while the context\r\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\r\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\r\n    // and adjust it based on the number of characters changed during the\r\n    // mutation.\r\n    const charDelta = domText.length - modelText.length;\r\n    startOffset = selection.getStartOffset();\r\n    endOffset = selection.getEndOffset();\r\n\r\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\r\n    focusOffset = endOffset + charDelta;\r\n  }\r\n\r\n  // Segmented entities are completely or partially removed when their\r\n  // text content changes. For this case we do not want any text to be selected\r\n  // after the change, so we are not merging the selection.\r\n  const contentWithAdjustedDOMSelection:any = newContent.merge({\r\n    selectionBefore: content.getSelectionAfter(),\r\n    selectionAfter: selection.merge({anchorOffset, focusOffset}),\r\n  });\r\n\r\n  editor.update(\r\n    EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType),\r\n  );\r\n}\r\n\r\nexport default  editOnInput;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\nimport React, { KeyboardEvent } from 'react'\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport isSoftNewlineEvent from './isSoftNewlineEvent';\r\n\r\nconst isOSX = UserAgent.isPlatform('Mac OS X');\r\n\r\nconst KeyBindingUtil = {\r\n  /**\r\n   * Check whether the ctrlKey modifier is *not* being used in conjunction with\r\n   * the altKey modifier. If they are combined, the result is an `altGraph`\r\n   * key modifier, which should not be handled by this set of key bindings.\r\n   */\r\n  isCtrlKeyCommand: function(e: KeyboardEvent): boolean {\r\n    return !!e.ctrlKey && !e.altKey;\r\n  },\r\n\r\n  isOptionKeyCommand: function(e: KeyboardEvent): boolean {\r\n    return isOSX && e.altKey;\r\n  },\r\n\r\n  usesMacOSHeuristics: function(): boolean {\r\n    return isOSX;\r\n  },\r\n\r\n  hasCommandModifier: function(e: KeyboardEvent): boolean {\r\n    return isOSX\r\n      ? !!e.metaKey && !e.altKey\r\n      : KeyBindingUtil.isCtrlKeyCommand(e);\r\n  },\r\n\r\n  isSoftNewlineEvent,\r\n};\r\n\r\nexport default  KeyBindingUtil;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport Keys from 'fbjs/lib/Keys'\r\n\r\nfunction isSoftNewlineEvent(e: any): boolean {\r\n  return (\r\n    e.which === Keys.RETURN &&\r\n    (e.getModifierState('Shift') ||\r\n      e.getModifierState('Alt') ||\r\n      e.getModifierState('Control'))\r\n  );\r\n}\r\n\r\nexport default  isSoftNewlineEvent;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../../../../model/immutable/BlockMap';\r\nimport  SelectionState from '../../../../model/immutable/SelectionState';\r\n\r\nimport DraftModifier from '../../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nimport getContentStateFragment from '../../../../model/transaction/getContentStateFragment';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\nlet clipboard: BlockMap = null;\r\n\r\n/**\r\n * Some systems offer a \"secondary\" clipboard to allow quick internal cut\r\n * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).\r\n */\r\nconst SecondaryClipboard = {\r\n  cut: function(editorState: EditorState): EditorState {\r\n    const content = editorState.getCurrentContent();\r\n    const selection = editorState.getSelection();\r\n    let targetRange: SelectionState = null;\r\n\r\n    if (selection.isCollapsed()) {\r\n      const anchorKey = selection.getAnchorKey();\r\n      const blockEnd = content.getBlockForKey(anchorKey).getLength();\r\n\r\n      if (blockEnd === selection.getAnchorOffset()) {\r\n        const keyAfter = content.getKeyAfter(anchorKey);\r\n        if (keyAfter == null) {\r\n          return editorState;\r\n        }\r\n        targetRange = selection.set('focusKey', keyAfter).set('focusOffset', 0) as any;\r\n      } else {\r\n        targetRange = selection.set('focusOffset', blockEnd) as any;\r\n      }\r\n    } else {\r\n      targetRange = selection;\r\n    }\r\n\r\n    targetRange = nullthrows(targetRange);\r\n    // TODO: This should actually append to the current state when doing\r\n    // successive ^K commands without any other cursor movement\r\n    clipboard = getContentStateFragment(content, targetRange);\r\n\r\n    const afterRemoval = DraftModifier.removeRange(\r\n      content,\r\n      targetRange,\r\n      'forward',\r\n    );\r\n\r\n    if (afterRemoval === content) {\r\n      return editorState;\r\n    }\r\n\r\n    return EditorState.push(editorState, afterRemoval, 'remove-range');\r\n  },\r\n\r\n  paste: function(editorState: EditorState): EditorState {\r\n    if (!clipboard) {\r\n      return editorState;\r\n    }\r\n\r\n    const newContent = DraftModifier.replaceWithFragment(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n      clipboard,\r\n    );\r\n\r\n    return EditorState.push(editorState, newContent, 'insert-fragment');\r\n  },\r\n};\r\n\r\nexport default  SecondaryClipboard;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst isChrome = UserAgent.isBrowser('Chrome');\r\n\r\n// In Chrome, the client rects will include the entire bounds of all nodes that\r\n// begin (have a start tag) within the selection, even if the selection does\r\n// not overlap the entire node. To resolve this, we split the range at each\r\n// start tag and join the client rects together.\r\n// https://code.google.com/p/chromium/issues/detail?id=324437\r\n/* eslint-disable consistent-return */\r\nfunction getRangeClientRectsChrome(range: Range): Array<ClientRect> {\r\n  const tempRange = range.cloneRange();\r\n  const clientRects = [];\r\n\r\n  for (\r\n    let ancestor = range.endContainer;\r\n    ancestor != null;\r\n    ancestor = ancestor.parentNode\r\n  ) {\r\n    // If we've climbed up to the common ancestor, we can now use the\r\n    // original start point and stop climbing the tree.\r\n    const atCommonAncestor = ancestor === range.commonAncestorContainer;\r\n    if (atCommonAncestor) {\r\n      tempRange.setStart(range.startContainer, range.startOffset);\r\n    } else {\r\n      tempRange.setStart(tempRange.endContainer, 0);\r\n    }\r\n    const rects = Array.from(tempRange.getClientRects());\r\n    clientRects.push(rects);\r\n    if (atCommonAncestor) {\r\n      clientRects.reverse();\r\n      return [].concat(...clientRects);\r\n    }\r\n    tempRange.setEndBefore(ancestor);\r\n  }\r\n\r\n  invariant(\r\n    false,\r\n    'Found an unexpected detached subtree when getting range client rects.',\r\n  );\r\n}\r\n/* eslint-enable consistent-return */\r\n\r\n/**\r\n * Like range.getClientRects() but normalizes for browser bugs.\r\n */\r\nconst getRangeClientRects = (isChrome\r\n  ? getRangeClientRectsChrome\r\n  : function(range: Range): Array<ClientRect> {\r\n      return Array.from(range.getClientRects());\r\n    })\r\n\r\nexport default  getRangeClientRects;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nimport getCorrectDocumentFromNode from '../utils/getCorrectDocumentFromNode';\r\nimport getRangeClientRects from './getRangeClientRects';\r\nimport invariant from 'fbjs/lib/invariant';\r\n/**\r\n * Return the computed line height, in pixels, for the provided element.\r\n */\r\nfunction getLineHeightPx(element: Element): number {\r\n  const computed = getComputedStyle(element);\r\n  const correctDocument = getCorrectDocumentFromNode(element);\r\n  const div = correctDocument.createElement('div');\r\n  div.style.fontFamily = computed.fontFamily;\r\n  div.style.fontSize = computed.fontSize;\r\n  div.style.fontStyle = computed.fontStyle;\r\n  div.style.fontWeight = computed.fontWeight;\r\n  div.style.lineHeight = computed.lineHeight;\r\n  div.style.position = 'absolute';\r\n  div.textContent = 'M';\r\n\r\n  const documentBody = correctDocument.body;\r\n  invariant(documentBody, 'Missing document.body');\r\n\r\n  // forced layout here\r\n  documentBody.appendChild(div);\r\n  const rect = div.getBoundingClientRect();\r\n  documentBody.removeChild(div);\r\n\r\n  return rect.height;\r\n}\r\n\r\n/**\r\n * Return whether every ClientRect in the provided list lies on the same line.\r\n *\r\n * We assume that the rects on the same line all contain the baseline, so the\r\n * lowest top line needs to be above the highest bottom line (i.e., if you were\r\n * to project the rects onto the y-axis, their intersection would be nonempty).\r\n *\r\n * In addition, we requi re that no two boxes are lineHeight (or more) apart at\r\n * either top or bottom, which helps protect against false positives for fonts\r\n * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\r\n * produces rects of height 58px!).\r\n */\r\nfunction areRectsOnOneLine(\r\n  rects: Array<ClientRect>,\r\n  lineHeight: number,\r\n): boolean {\r\n  let minTop = Infinity;\r\n  let minBottom = Infinity;\r\n  let maxTop = -Infinity;\r\n  let maxBottom = -Infinity;\r\n\r\n  for (let ii = 0; ii < rects.length; ii++) {\r\n    const rect = rects[ii];\r\n    if (rect.width === 0 || rect.width === 1) {\r\n      // When a range starts or ends a soft wrap, many browsers (Chrome, IE,\r\n      // Safari) include an empty rect on the previous or next line. When the\r\n      // text lies in a container whose position is not integral (e.g., from\r\n      // margin: auto), Safari makes these empty rects have width 1 (instead of\r\n      // 0). Having one-pixel-wide characters seems unlikely (and most browsers\r\n      // report widths in subpixel precision anyway) so it's relatively safe to\r\n      // skip over them.\r\n      continue;\r\n    }\r\n    minTop = Math.min(minTop, rect.top);\r\n    minBottom = Math.min(minBottom, rect.bottom);\r\n    maxTop = Math.max(maxTop, rect.top);\r\n    maxBottom = Math.max(maxBottom, rect.bottom);\r\n  }\r\n\r\n  return (\r\n    maxTop <= minBottom &&\r\n    maxTop - minTop < lineHeight &&\r\n    maxBottom - minBottom < lineHeight\r\n  );\r\n}\r\n\r\n/**\r\n * Return the length of a node, as used by Range offsets.\r\n */\r\nfunction getNodeLength(node: Node): number {\r\n  // http://www.w3.org/TR/dom/#concept-node-length\r\n  switch (node.nodeType) {\r\n    case Node.DOCUMENT_TYPE_NODE:\r\n      return 0;\r\n    case Node.TEXT_NODE:\r\n    case Node.PROCESSING_INSTRUCTION_NODE:\r\n    case Node.COMMENT_NODE:\r\n      return (node as any).length;\r\n    default:\r\n      return node.childNodes.length;\r\n  }\r\n}\r\n\r\n/**\r\n * Given a collapsed range, move the start position backwards as far as\r\n * possible while the range still spans only a single line.\r\n */\r\nfunction expandRangeToStartOfLine(range: Range): Range {\r\n  invariant(\r\n    range.collapsed,\r\n    'expandRangeToStartOfLine: Provided range is not collapsed.',\r\n  );\r\n  range = range.cloneRange();\r\n\r\n  let containingElement = range.startContainer;\r\n  if (containingElement.nodeType !== 1) {\r\n    containingElement = containingElement.parentNode;\r\n  }\r\n  const lineHeight = getLineHeightPx((containingElement as any));\r\n\r\n  // Imagine our text looks like:\r\n  //   <div><span>once upon a time, there was a <em>boy\r\n  //   who lived</em> </span><q><strong>under^ the\r\n  //   stairs</strong> in a small closet.</q></div>\r\n  // where the caret represents the cursor. First, we crawl up the tree until\r\n  // the range spans multiple lines (setting the start point to before\r\n  // \"<strong>\", then before \"<div>\"), then at each level we do a search to\r\n  // find the latest point which is still on a previous line. We'll find that\r\n  // the break point is inside the span, then inside the <em>, then in its text\r\n  // node child, the actual break point before \"who\".\r\n\r\n  let bestContainer = range.endContainer;\r\n  let bestOffset = range.endOffset;\r\n  range.setStart(range.startContainer, 0);\r\n\r\n  while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\r\n    bestContainer = range.startContainer;\r\n    bestOffset = range.startOffset;\r\n    invariant(\r\n      bestContainer.parentNode,\r\n      'Found unexpected detached subtree when traversing.',\r\n    );\r\n    range.setStartBefore(bestContainer);\r\n    if (\r\n      bestContainer.nodeType === 1 &&\r\n      getComputedStyle((bestContainer as any)).display !== 'inline'\r\n    ) {\r\n      // The start of the line is never in a different block-level container.\r\n      break;\r\n    }\r\n  }\r\n\r\n  // In the above example, range now spans from \"<div>\" to \"under\",\r\n  // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].\r\n  // Picking out which child to recurse into here is a special case since we\r\n  // don't want to check past <q> -- once we find that the final range starts\r\n  // in <span>, we can look at all of its children (and all of their children)\r\n  // to find the break point.\r\n\r\n  // At all times, (bestContainer, bestOffset) is the latest single-line start\r\n  // point that we know of.\r\n  let currentContainer = bestContainer;\r\n  let maxIndexToConsider = bestOffset - 1;\r\n\r\n  do {\r\n    const nodeValue = currentContainer.nodeValue;\r\n    let ii = maxIndexToConsider;\r\n\r\n    for (; ii >= 0; ii--) {\r\n      if (\r\n        nodeValue != null &&\r\n        ii > 0 &&\r\n        UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)\r\n      ) {\r\n        // We're in the middle of a surrogate pair -- skip over so we never\r\n        // return a range with an endpoint in the middle of a code point.\r\n        continue;\r\n      }\r\n\r\n      range.setStart(currentContainer, ii);\r\n      if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\r\n        bestContainer = currentContainer;\r\n        bestOffset = ii;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (ii === -1 || currentContainer.childNodes.length === 0) {\r\n      // If ii === -1, then (bestContainer, bestOffset), which is equal to\r\n      // (currentContainer, 0), was a single-line start point but a start\r\n      // point before currentContainer wasn't, so the line break seems to\r\n      // have occurred immediately after currentContainer's start tag\r\n      //\r\n      // If currentContainer.childNodes.length === 0, we're already at a\r\n      // terminal node (e.g., text node) and should return our current best.\r\n      break;\r\n    }\r\n\r\n    currentContainer = currentContainer.childNodes[ii];\r\n    maxIndexToConsider = getNodeLength(currentContainer);\r\n  } while (true);\r\n\r\n  range.setStart(bestContainer, bestOffset);\r\n  return range;\r\n}\r\n\r\nexport default  expandRangeToStartOfLine;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport TokenizeUtil from 'fbjs/lib/TokenizeUtil';\r\n\r\nconst punctuation = TokenizeUtil.getPunctuation();\r\n\r\n// The apostrophe and curly single quotes behave in a curious way: when\r\n// surrounded on both sides by word characters, they behave as word chars; when\r\n// either neighbor is punctuation or an end of the string, they behave as\r\n// punctuation.\r\nconst CHAMELEON_CHARS = \"['\\u2018\\u2019]\";\r\n\r\n// Remove the underscore, which should count as part of the removable word. The\r\n// \"chameleon chars\" also count as punctuation in this regex.\r\nconst WHITESPACE_AND_PUNCTUATION = '\\\\s|(?![_])' + punctuation;\r\n\r\nconst DELETE_STRING =\r\n  '^' +\r\n  '(?:' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ')*' +\r\n  '(?:' +\r\n  CHAMELEON_CHARS +\r\n  '|(?!' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ').)*' +\r\n  '(?:(?!' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ').)';\r\nconst DELETE_REGEX = new RegExp(DELETE_STRING);\r\n\r\nconst BACKSPACE_STRING =\r\n  '(?:(?!' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ').)' +\r\n  '(?:' +\r\n  CHAMELEON_CHARS +\r\n  '|(?!' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ').)*' +\r\n  '(?:' +\r\n  WHITESPACE_AND_PUNCTUATION +\r\n  ')*' +\r\n  '$';\r\nconst BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);\r\n\r\nfunction getRemovableWord(text: string, isBackward: boolean): string {\r\n  const matches = isBackward\r\n    ? BACKSPACE_REGEX.exec(text)\r\n    : DELETE_REGEX.exec(text);\r\n  return matches ? matches[0] : text;\r\n}\r\n\r\nconst DraftRemovableWord = {\r\n  getBackward: function(text: string): string {\r\n    return getRemovableWord(text, true);\r\n  },\r\n\r\n  getForward: function(text: string): string {\r\n    return getRemovableWord(text, false);\r\n  },\r\n};\r\n\r\nexport default  DraftRemovableWord;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  EditorState from '../../../../model/immutable/EditorState';\r\nimport  SelectionState from '../../../../model/immutable/SelectionState';\r\n\r\nimport warning from 'fbjs/lib/warning';\r\n\r\n/**\r\n * Given a collapsed selection, move the focus `maxDistance` forward within\r\n * the selected block. If the selection will go beyond the end of the block,\r\n * move focus to the start of the next block, but no further.\r\n *\r\n * This function is not Unicode-aware, so surrogate pairs will be treated\r\n * as having length 2.\r\n */\r\nfunction moveSelectionForward(\r\n  editorState: EditorState,\r\n  maxDistance: number,\r\n): SelectionState {\r\n  const selection = editorState.getSelection();\r\n  // Should eventually make this an invariant\r\n  warning(\r\n    selection.isCollapsed(),\r\n    'moveSelectionForward should only be called with a collapsed SelectionState',\r\n  );\r\n  const key = selection.getStartKey();\r\n  const offset = selection.getStartOffset();\r\n  const content = editorState.getCurrentContent();\r\n\r\n  let focusKey = key;\r\n  let focusOffset;\r\n\r\n  const block = content.getBlockForKey(key);\r\n\r\n  if (maxDistance > block.getText().length - offset) {\r\n    focusKey = content.getKeyAfter(key);\r\n    focusOffset = 0;\r\n  } else {\r\n    focusOffset = offset + maxDistance;\r\n  }\r\n\r\n  return selection.merge({focusKey, focusOffset}) as any;\r\n}\r\n\r\nexport default  moveSelectionForward;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\nimport {DraftEditorCommand} from '../../../model/constants/DraftEditorCommand';\r\n\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport KeyBindingUtil from '../../utils/KeyBindingUtil';\r\nimport Keys from 'fbjs/lib/Keys'\r\nimport SecondaryClipboard from './commands/SecondaryClipboard';\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport isEventHandled from '../../utils/isEventHandled';\r\nimport keyCommandBackspaceToStartOfLine from './commands/keyCommandBackspaceToStartOfLine';\r\nimport keyCommandBackspaceWord from './commands/keyCommandBackspaceWord';\r\nimport keyCommandDeleteWord from './commands/keyCommandDeleteWord';\r\nimport keyCommandInsertNewline from './commands/keyCommandInsertNewline';\r\nimport keyCommandMoveSelectionToEndOfBlock from './commands/keyCommandMoveSelectionToEndOfBlock';\r\nimport keyCommandMoveSelectionToStartOfBlock from './commands/keyCommandMoveSelectionToStartOfBlock';\r\nimport keyCommandPlainBackspace from './commands/keyCommandPlainBackspace';\r\nimport keyCommandPlainDelete from './commands/keyCommandPlainDelete';\r\nimport keyCommandTransposeCharacters from './commands/keyCommandTransposeCharacters';\r\nimport keyCommandUndo from './commands/keyCommandUndo';\r\n\r\nconst {isOptionKeyCommand} = KeyBindingUtil;\r\nconst isChrome = UserAgent.isBrowser('Chrome');\r\n\r\n/**\r\n * Map a `DraftEditorCommand` command value to a corresponding function.\r\n */\r\nfunction onKeyCommand(\r\n  command: DraftEditorCommand | string,\r\n  editorState: EditorState,\r\n  e: any,\r\n): EditorState {\r\n  switch (command) {\r\n    case 'redo':\r\n      return EditorState.redo(editorState);\r\n    case 'delete':\r\n      return keyCommandPlainDelete(editorState);\r\n    case 'delete-word':\r\n      return keyCommandDeleteWord(editorState);\r\n    case 'backspace':\r\n      return keyCommandPlainBackspace(editorState);\r\n    case 'backspace-word':\r\n      return keyCommandBackspaceWord(editorState);\r\n    case 'backspace-to-start-of-line':\r\n      return keyCommandBackspaceToStartOfLine(editorState, e);\r\n    case 'split-block':\r\n      return keyCommandInsertNewline(editorState);\r\n    case 'transpose-characters':\r\n      return keyCommandTransposeCharacters(editorState);\r\n    case 'move-selection-to-start-of-block':\r\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\r\n    case 'move-selection-to-end-of-block':\r\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\r\n    case 'secondary-cut':\r\n      return SecondaryClipboard.cut(editorState);\r\n    case 'secondary-paste':\r\n      return SecondaryClipboard.paste(editorState);\r\n    default:\r\n      return editorState;\r\n  }\r\n}\r\n\r\n/**\r\n * Intercept keydown behavior to handle keys and commands manually, if desired.\r\n *\r\n * Keydown combinations may be mapped to `DraftCommand` values, which may\r\n * correspond to command functions that modify the editor or its contents.\r\n *\r\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\r\n * component may provide a custom mapping via the `keyBindingFn` prop.\r\n */\r\nfunction editOnKeyDown(\r\n  editor: DraftEditor,\r\n  e: any,\r\n): void {\r\n  const keyCode = e.which;\r\n  const editorState = editor._latestEditorState;\r\n  function callDeprecatedHandler(\r\n    handlerName:\r\n      | 'onDownArrow'\r\n      | 'onEscape'\r\n      | 'onLeftArrow'\r\n      | 'onRightArrow'\r\n      | 'onTab'\r\n      | 'onUpArrow',\r\n  ): boolean {\r\n    const deprecatedHandler = editor.props[handlerName];\r\n    if (deprecatedHandler) {\r\n      deprecatedHandler(e);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  switch (keyCode) {\r\n    case Keys.RETURN:\r\n      e.preventDefault();\r\n      // The top-level component may manually handle newline insertion. If\r\n      // no special handling is performed, fall through to command handling.\r\n      if (\r\n        editor.props.handleReturn &&\r\n        isEventHandled(editor.props.handleReturn(e, editorState))\r\n      ) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.ESC:\r\n      e.preventDefault();\r\n      if (callDeprecatedHandler('onEscape')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.TAB:\r\n      if (callDeprecatedHandler('onTab')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.UP:\r\n      if (callDeprecatedHandler('onUpArrow')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.RIGHT:\r\n      if (callDeprecatedHandler('onRightArrow')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.DOWN:\r\n      if (callDeprecatedHandler('onDownArrow')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.LEFT:\r\n      if (callDeprecatedHandler('onLeftArrow')) {\r\n        return;\r\n      }\r\n      break;\r\n    case Keys.SPACE:\r\n      // Prevent Chrome on OSX behavior where option + space scrolls.\r\n      if (isChrome && isOptionKeyCommand(e)) {\r\n        e.preventDefault();\r\n      }\r\n  }\r\n\r\n  const command = editor.props.keyBindingFn(e);\r\n\r\n  // If no command is specified, allow keydown event to continue.\r\n  if (command == null || command === '') {\r\n    if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\r\n      // The default keydown event has already been prevented in order to stop\r\n      // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\r\n      // other browsers.\r\n      const contentState = DraftModifier.replaceText(\r\n        editorState.getCurrentContent(),\r\n        editorState.getSelection(),\r\n        '\\u00a0',\r\n      );\r\n      editor.update(\r\n        EditorState.push(editorState, contentState, 'insert-characters'),\r\n      );\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (command === 'undo') {\r\n    // Since undo requir es some special updating behavior to keep the editor\r\n    // in sync, handle it separately.\r\n    keyCommandUndo(e, editorState, editor.update);\r\n    return;\r\n  }\r\n\r\n  // At this point, we know that we're handling a command of some kind, so\r\n  // we don't want to insert a character following the keydown.\r\n  e.preventDefault();\r\n\r\n  // Allow components higher up the tree to handle the command first.\r\n  if (\r\n    editor.props.handleKeyCommand &&\r\n    isEventHandled(\r\n      editor.props.handleKeyCommand(command, editorState, e.timeStamp),\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const newState = onKeyCommand(command, editorState, e);\r\n  if (newState !== editorState) {\r\n    editor.update(newState);\r\n  }\r\n}\r\n\r\nexport default  editOnKeyDown;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nimport moveSelectionForward from './moveSelectionForward';\r\nimport removeTextWithStrategy from './removeTextWithStrategy';\r\n\r\n/**\r\n * Remove the selected range. If the cursor is collapsed, remove the following\r\n * character. This operation is Unicode-aware, so removing a single character\r\n * will remove a surrogate pair properly as well.\r\n */\r\nfunction keyCommandPlainDelete(editorState: EditorState): EditorState {\r\n  const afterRemoval = removeTextWithStrategy(\r\n    editorState,\r\n    strategyState => {\r\n      const selection = strategyState.getSelection();\r\n      const content = strategyState.getCurrentContent();\r\n      const key = selection.getAnchorKey();\r\n      const offset = selection.getAnchorOffset();\r\n      const charAhead = content.getBlockForKey(key).getText()[offset];\r\n      return moveSelectionForward(\r\n        strategyState,\r\n        charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1,\r\n      );\r\n    },\r\n    'forward',\r\n  );\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  const selection = editorState.getSelection();\r\n\r\n  return EditorState.push(\r\n    editorState,\r\n    afterRemoval.set('selectionBefore', selection) as any,\r\n    selection.isCollapsed() ? 'delete-character' : 'remove-range',\r\n  );\r\n}\r\n\r\nexport default  keyCommandPlainDelete;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport DraftRemovableWord from '../../../../model/modifier/DraftRemovableWord';\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nimport moveSelectionForward from './moveSelectionForward';\r\nimport removeTextWithStrategy from './removeTextWithStrategy';\r\n\r\n/**\r\n * Delete the word that is right of the cursor, as well as any spaces or\r\n * punctuation before the word.\r\n */\r\nfunction keyCommandDeleteWord(editorState: EditorState): EditorState {\r\n  const afterRemoval = removeTextWithStrategy(\r\n    editorState,\r\n    strategyState => {\r\n      const selection = strategyState.getSelection();\r\n      const offset = selection.getStartOffset();\r\n      const key = selection.getStartKey();\r\n      const content = strategyState.getCurrentContent();\r\n      const text = content\r\n        .getBlockForKey(key)\r\n        .getText()\r\n        .slice(offset);\r\n      const toRemove = DraftRemovableWord.getForward(text);\r\n\r\n      // If there are no words in front of the cursor, remove the newline.\r\n      return moveSelectionForward(strategyState, toRemove.length || 1);\r\n    },\r\n    'forward',\r\n  );\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\r\n}\r\n\r\nexport default  keyCommandDeleteWord;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport DraftRemovableWord from '../../../../model/modifier/DraftRemovableWord';\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nimport moveSelectionBackward from './moveSelectionBackward';\r\nimport removeTextWithStrategy from './removeTextWithStrategy';\r\n\r\n/**\r\n * Delete the word that is left of the cursor, as well as any spaces or\r\n * punctuation after the word.\r\n */\r\nfunction keyCommandBackspaceWord(editorState: EditorState): EditorState {\r\n  const afterRemoval = removeTextWithStrategy(\r\n    editorState,\r\n    strategyState => {\r\n      const selection = strategyState.getSelection();\r\n      const offset = selection.getStartOffset();\r\n      // If there are no words before the cursor, remove the preceding newline.\r\n      if (offset === 0) {\r\n        return moveSelectionBackward(strategyState, 1);\r\n      }\r\n      const key = selection.getStartKey();\r\n      const content = strategyState.getCurrentContent();\r\n      const text = content\r\n        .getBlockForKey(key)\r\n        .getText()\r\n        .slice(0, offset);\r\n      const toRemove = DraftRemovableWord.getBackward(text);\r\n      return moveSelectionBackward(strategyState, toRemove.length || 1);\r\n    },\r\n    'backward',\r\n  );\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\r\n}\r\n\r\nexport default  keyCommandBackspaceWord;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\nimport React, { KeyboardEvent} from 'react'\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nimport expandRangeToStartOfLine from '../../../selection/expandRangeToStartOfLine';\r\nimport getDraftEditorSelectionWithNodes from '../../../selection/getDraftEditorSelectionWithNodes';\r\nimport moveSelectionBackward from './moveSelectionBackward';\r\nimport removeTextWithStrategy from './removeTextWithStrategy';\r\n\r\nfunction keyCommandBackspaceToStartOfLine(\r\n  editorState: EditorState,\r\n  e: KeyboardEvent<HTMLElement>,\r\n): EditorState {\r\n  const afterRemoval = removeTextWithStrategy(\r\n    editorState,\r\n    strategyState => {\r\n      const selection = strategyState.getSelection();\r\n      if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\r\n        return moveSelectionBackward(strategyState, 1);\r\n      }\r\n      const {ownerDocument} = e.currentTarget;\r\n      const domSelection = ownerDocument.defaultView.getSelection();\r\n      let range = domSelection.getRangeAt(0);\r\n      range = expandRangeToStartOfLine(range);\r\n\r\n      return getDraftEditorSelectionWithNodes(\r\n        strategyState,\r\n        null,\r\n        range.endContainer,\r\n        range.endOffset,\r\n        range.startContainer,\r\n        range.startOffset,\r\n      ).selectionState;\r\n    },\r\n    'backward',\r\n  );\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\r\n}\r\n\r\nexport default  keyCommandBackspaceToStartOfLine;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport DraftModifier from '../../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nfunction keyCommandInsertNewline(editorState: EditorState): EditorState {\r\n  const contentState = DraftModifier.splitBlock(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n  );\r\n  return EditorState.push(editorState, contentState, 'split-block');\r\n}\r\n\r\nexport default  keyCommandInsertNewline;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport DraftModifier from '../../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nimport getContentStateFragment from '../../../../model/transaction/getContentStateFragment';\r\n\r\n/**\r\n * Transpose the characters on either side of a collapsed cursor, or\r\n * if the cursor is at the end of the block, transpose the last two\r\n * characters.\r\n */\r\nfunction keyCommandTransposeCharacters(editorState: EditorState): EditorState {\r\n  const selection = editorState.getSelection();\r\n  if (!selection.isCollapsed()) {\r\n    return editorState;\r\n  }\r\n\r\n  const offset = selection.getAnchorOffset();\r\n  if (offset === 0) {\r\n    return editorState;\r\n  }\r\n\r\n  const blockKey = selection.getAnchorKey();\r\n  const content = editorState.getCurrentContent();\r\n  const block = content.getBlockForKey(blockKey);\r\n  const length = block.getLength();\r\n\r\n  // Nothing to transpose if there aren't two characters.\r\n  if (length <= 1) {\r\n    return editorState;\r\n  }\r\n\r\n  let removalRange;\r\n  let finalSelection;\r\n\r\n  if (offset === length) {\r\n    // The cursor is at the end of the block. Swap the last two characters.\r\n    removalRange = selection.set('anchorOffset', offset - 1);\r\n    finalSelection = selection;\r\n  } else {\r\n    removalRange = selection.set('focusOffset', offset + 1);\r\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\r\n  }\r\n\r\n  // Extract the character to move as a fragment. This preserves its\r\n  // styling and entity, if any.\r\n  const movedFragment = getContentStateFragment(content, removalRange);\r\n  const afterRemoval = DraftModifier.removeRange(\r\n    content,\r\n    removalRange,\r\n    'backward',\r\n  );\r\n\r\n  // After the removal, the insertion target is one character back.\r\n  const selectionAfter = afterRemoval.getSelectionAfter();\r\n  const targetOffset = selectionAfter.getAnchorOffset() - 1;\r\n  const targetRange:any = selectionAfter.merge({\r\n    anchorOffset: targetOffset,\r\n    focusOffset: targetOffset,\r\n  });\r\n\r\n  const afterInsert = DraftModifier.replaceWithFragment(\r\n    afterRemoval,\r\n    targetRange,\r\n    movedFragment,\r\n  );\r\n\r\n  const newEditorState = EditorState.push(\r\n    editorState,\r\n    afterInsert,\r\n    'insert-fragment',\r\n  );\r\n\r\n  return EditorState.acceptSelection(newEditorState, finalSelection);\r\n}\r\n\r\nexport default  keyCommandTransposeCharacters;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\n/**\r\n * Collapse selection at the start of the first selected block. This is used\r\n * for Firefox versions that attempt to navigate forward/backward instead of\r\n * moving the cursor. Other browsers are able to move the cursor natively.\r\n */\r\nfunction keyCommandMoveSelectionToStartOfBlock(\r\n  editorState: EditorState,\r\n): EditorState {\r\n  const selection = editorState.getSelection();\r\n  const startKey = selection.getStartKey();\r\n  return EditorState.set(editorState, {\r\n    selection: selection.merge({\r\n      anchorKey: startKey,\r\n      anchorOffset: 0,\r\n      focusKey: startKey,\r\n      focusOffset: 0,\r\n      isBackward: false,\r\n    }),\r\n    forceSelection: true,\r\n  });\r\n}\r\n\r\nexport default  keyCommandMoveSelectionToStartOfBlock;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\n/**\r\n * See comment for `moveSelectionToStartOfBlock`.\r\n */\r\nfunction keyCommandMoveSelectionToEndOfBlock(\r\n  editorState: EditorState,\r\n): EditorState {\r\n  const selection = editorState.getSelection();\r\n  const endKey = selection.getEndKey();\r\n  const content = editorState.getCurrentContent();\r\n  const textLength = content.getBlockForKey(endKey).getLength();\r\n  return EditorState.set(editorState, {\r\n    selection: selection.merge({\r\n      anchorKey: endKey,\r\n      anchorOffset: textLength,\r\n      focusKey: endKey,\r\n      focusOffset: textLength,\r\n      isBackward: false,\r\n    }),\r\n    forceSelection: true,\r\n  });\r\n}\r\n\r\nexport default  keyCommandMoveSelectionToEndOfBlock;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst isOldIE = UserAgent.isBrowser('IE <= 9');\r\n\r\n// Provides a dom node that will not execute scripts\r\n// https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument\r\n// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM\r\n\r\nfunction getSafeBodyFromHTML(html: string):  Element {\r\n  let doc;\r\n  let root = null;\r\n  // Provides a safe context\r\n  if (\r\n    !isOldIE &&\r\n    document.implementation &&\r\n    document.implementation.createHTMLDocument\r\n  ) {\r\n    doc = document.implementation.createHTMLDocument('foo');\r\n    invariant(doc.documentElement, 'Missing doc.documentElement');\r\n    doc.documentElement.innerHTML = html;\r\n    root = doc.getElementsByTagName('body')[0];\r\n  }\r\n  return root;\r\n}\r\n\r\nexport default  getSafeBodyFromHTML;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\nimport isElement from './isElement';\r\n\r\nfunction isHTMLAnchorElement(node: Node): boolean {\r\n  if (!node || !node.ownerDocument) {\r\n    return false;\r\n  }\r\n  return isElement(node) && node.nodeName === 'A';\r\n}\r\n\r\nexport default  isHTMLAnchorElement;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\nimport isElement from './isElement';\r\n\r\nfunction isHTMLImageElement(node: Node): boolean {\r\n  if (!node || !node.ownerDocument) {\r\n    return false;\r\n  }\r\n  return isElement(node) && node.nodeName === 'IMG';\r\n}\r\n\r\nexport default  isHTMLImageElement;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  {DraftBlockRenderMap} from '../immutable/DraftBlockRenderMap';\r\nimport  {DraftInlineStyle} from '../immutable/DraftInlineStyle';\r\nimport {EntityMap} from '../immutable/EntityMap';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport ContentBlock from '../immutable/ContentBlock';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport DefaultDraftBlockRenderMap  from '../immutable/DefaultDraftBlockRenderMap';\r\nimport DraftEntity from '../entity/DraftEntity';\r\nimport URI from 'fbjs/lib/URI'\r\nimport cx from 'fbjs/lib/cx'\r\n\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport getSafeBodyFromHTML from '../paste/getSafeBodyFromHTML';\r\nimport gkx from '../../stubs/gkx';\r\nimport {List, Map, OrderedSet} from 'immutable';\r\n\r\nimport isHTMLAnchorElement from '../../component/utils/isHTMLAnchorElement';\r\nimport isHTMLBRElement from '../../component/utils/isHTMLBRElement';\r\nimport isHTMLElement from '../../component/utils/isHTMLElement';\r\nimport isHTMLImageElement from '../../component/utils/isHTMLImageElement';\r\n\r\nconst experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\n\r\nconst NBSP = '&nbsp;';\r\nconst SPACE = ' ';\r\n\r\n// used for replacing characters in HTML\r\nconst REGEX_CR = new RegExp('\\r', 'g');\r\nconst REGEX_LF = new RegExp('\\n', 'g');\r\nconst REGEX_LEADING_LF = new RegExp('^\\n', 'g');\r\nconst REGEX_NBSP = new RegExp(NBSP, 'g');\r\nconst REGEX_CARRIAGE = new RegExp('&#13;?', 'g');\r\nconst REGEX_ZWS = new RegExp('&#8203;?', 'g');\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\nconst boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];\r\nconst notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];\r\n\r\nconst anchorAttr = ['className', 'href', 'rel', 'target', 'title'];\r\nconst imgAttr = ['alt', 'className', 'height', 'src', 'width'];\r\n\r\nconst knownListItemDepthClasses = {\r\n  [cx('public/DraftStyleDefault/depth0')]: 0,\r\n  [cx('public/DraftStyleDefault/depth1')]: 1,\r\n  [cx('public/DraftStyleDefault/depth2')]: 2,\r\n  [cx('public/DraftStyleDefault/depth3')]: 3,\r\n  [cx('public/DraftStyleDefault/depth4')]: 4,\r\n};\r\n\r\nconst HTMLTagToRawInlineStyleMap: Map<string, string> = Map({\r\n  b: 'BOLD',\r\n  code: 'CODE',\r\n  del: 'STRIKETHROUGH',\r\n  em: 'ITALIC',\r\n  i: 'ITALIC',\r\n  s: 'STRIKETHROUGH',\r\n  strike: 'STRIKETHROUGH',\r\n  strong: 'BOLD',\r\n  u: 'UNDERLINE',\r\n  mark: 'HIGHLIGHT',\r\n});\r\n\r\ntype BlockTypeMap = Map<string, string | Array<string>>;\r\n\r\n/**\r\n * Build a mapping from HTML tags to draftjs block types\r\n * out of a BlockRenderMap.\r\n *\r\n * The BlockTypeMap for the default BlockRenderMap looks like this:\r\n *   Map({\r\n *     h1: 'header-one',\r\n *     h2: 'header-two',\r\n *     h3: 'header-three',\r\n *     h4: 'header-four',\r\n *     h5: 'header-five',\r\n *     h6: 'header-six',\r\n *     blockquote: 'blockquote',\r\n *     figure: 'atomic',\r\n *     pre: ['code-block'],\r\n *     div: 'unstyled',\r\n *     p: 'unstyled',\r\n *     li: ['ordered-list-item', 'unordered-list-item'],\r\n *   })\r\n */\r\nconst buildBlockTypeMap = (\r\n  blockRenderMap: DraftBlockRenderMap,\r\n): BlockTypeMap => {\r\n  const blockTypeMap = {};\r\n\r\n  blockRenderMap.mapKeys((blockType, desc) => {\r\n    const elements = [desc.element];\r\n    if (desc.aliasedElements !== undefined) {\r\n      elements.push(...desc.aliasedElements);\r\n    }\r\n    elements.forEach(element => {\r\n      if (blockTypeMap[element] === undefined) {\r\n        blockTypeMap[element] = blockType;\r\n      } else if (typeof blockTypeMap[element] === 'string') {\r\n        blockTypeMap[element] = [blockTypeMap[element], blockType];\r\n      } else {\r\n        blockTypeMap[element].push(blockType);\r\n      }\r\n    });\r\n  });\r\n\r\n  return Map(blockTypeMap);\r\n};\r\n\r\n/**\r\n * If we're pasting from one DraftEditor to another we can check to see if\r\n * existing list item depth classes are being used and preserve this style\r\n */\r\nconst getListItemDepth = (node: HTMLElement, depth: number = 0): number => {\r\n  Object.keys(knownListItemDepthClasses).some(depthClass => {\r\n    if (node.classList.contains(depthClass)) {\r\n      depth = knownListItemDepthClasses[depthClass];\r\n    }\r\n  });\r\n  return depth;\r\n};\r\n\r\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible link.\r\n */\r\nconst isValidAnchor = (node: Node) => {\r\n  if (!isHTMLAnchorElement(node)) {\r\n    return false;\r\n  }\r\n  const anchorNode: HTMLAnchorElement = (node as any);\r\n  return !!(\r\n    anchorNode.href &&\r\n    (anchorNode.protocol === 'http:' ||\r\n      anchorNode.protocol === 'https:' ||\r\n      anchorNode.protocol === 'mailto:')\r\n  );\r\n};\r\n\r\n/**\r\n * Return true if the provided HTML Element can be used to build a\r\n * Draftjs-compatible image.\r\n */\r\nconst isValidImage = (node: Node): boolean => {\r\n  if (!isHTMLImageElement(node)) {\r\n    return false;\r\n  }\r\n  const imageNode: HTMLImageElement = node as any;\r\n  return !!(\r\n    imageNode.attributes.getNamedItem('src') &&\r\n    imageNode.attributes.getNamedItem('src').value\r\n  );\r\n};\r\n\r\n/**\r\n * Try to guess the inline style of an HTML element based on its css\r\n * styles (font-weight, font-style and text-decoration).\r\n */\r\nconst styleFromNodeAttributes = (node: Node): DraftInlineStyle => {\r\n  const style:any = OrderedSet();\r\n\r\n  if (!isHTMLElement(node)) {\r\n    return style as any;\r\n  }\r\n\r\n  const htmlElement: HTMLElement = node as any;\r\n  const fontWeight = htmlElement.style.fontWeight;\r\n  const fontStyle = htmlElement.style.fontStyle;\r\n  const textDecoration = htmlElement.style.textDecoration;\r\n\r\n  return style.withMutations(style => {\r\n    if (boldValues.indexOf(fontWeight) >= 0) {\r\n      style.add('BOLD');\r\n    } else if (notBoldValues.indexOf(fontWeight) >= 0) {\r\n      style.remove('BOLD');\r\n    }\r\n\r\n    if (fontStyle === 'italic') {\r\n      style.add('ITALIC');\r\n    } else if (fontStyle === 'normal') {\r\n      style.remove('ITALIC');\r\n    }\r\n\r\n    if (textDecoration === 'underline') {\r\n      style.add('UNDERLINE');\r\n    }\r\n    if (textDecoration === 'line-through') {\r\n      style.add('STRIKETHROUGH');\r\n    }\r\n    if (textDecoration === 'none') {\r\n      style.remove('UNDERLINE');\r\n      style.remove('STRIKETHROUGH');\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Determine if a nodeName is a list type, 'ul' or 'ol'\r\n */\r\nconst isListNode = (nodeName:string): boolean =>\r\n  nodeName === 'ul' || nodeName === 'ol';\r\n\r\n/**\r\n *  ContentBlockConfig is a mutable data structure that holds all\r\n *  the information requi red to build a ContentBlock and an array of\r\n *  all the child nodes (childConfigs).\r\n *  It is being used a temporary data structure by the\r\n *  ContentBlocksBuilder class.\r\n */\r\ntype ContentBlockConfig = {\r\n  characterList: List<CharacterMetadata>,\r\n  data?: Map<any, any>,\r\n  depth?: number,\r\n  key: string,\r\n  text: string,\r\n  type: string,\r\n  children: List<string>,\r\n  parent: string,\r\n  prevSibling: string,\r\n  nextSibling:string,\r\n  childConfigs: Array<ContentBlockConfig>,\r\n};\r\n\r\n/**\r\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\r\n * out of one (or several) HTMLElement(s).\r\n *\r\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\r\n * by walking through the HTML nodes and their children, then it walks the\r\n * ContentBlockConfigs tree to compute parents/siblings and create\r\n * the actual ContentBlocks.\r\n *\r\n * Typical usage is:\r\n *     new ContentBlocksBuilder()\r\n *        .addDOMNode(someHTMLNode)\r\n *        .addDOMNode(someOtherHTMLNode)\r\n *       .getContentBlocks();\r\n *\r\n */\r\nclass ContentBlocksBuilder {\r\n  // Most of the method in the class depend on the state of the content builder\r\n  // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\r\n  // be confusing at first, it made the code simpler than the alternative which\r\n  // is to pass those values around in every call.\r\n\r\n  // The following attributes are used to accumulate text and styles\r\n  // as we are walking the HTML node tree.\r\n  characterList: List<CharacterMetadata> = List();\r\n  currentBlockType: string = 'unstyled';\r\n  currentDepth: number = 0;\r\n  currentEntity: string = null;\r\n  currentStyle: DraftInlineStyle = OrderedSet();\r\n  currentText: string = '';\r\n  wrapper: string = null;\r\n\r\n  // Describes the future ContentState as a tree of content blocks\r\n  blockConfigs: Array<ContentBlockConfig> = [];\r\n\r\n  // The content blocks generated from the blockConfigs\r\n  contentBlocks: Array<BlockNodeRecord> = [];\r\n\r\n  // Entity map use to store links and images found in the HTML nodes\r\n  entityMap: EntityMap = DraftEntity;\r\n\r\n  // Map HTML tags to draftjs block types and disambiguation function\r\n  blockTypeMap: BlockTypeMap;\r\n  disambiguate: any;\r\n\r\n  constructor(\r\n    blockTypeMap: BlockTypeMap,\r\n    disambiguate: any\r\n  ) {\r\n    this.clear();\r\n    this.blockTypeMap = blockTypeMap;\r\n    this.disambiguate = disambiguate;\r\n  }\r\n\r\n  /**\r\n   * Clear the internal state of the ContentBlocksBuilder\r\n   */\r\n  clear(): void {\r\n    this.characterList = List();\r\n    this.blockConfigs = [];\r\n    this.currentBlockType = 'unstyled';\r\n    this.currentDepth = 0;\r\n    this.currentEntity = null;\r\n    this.currentStyle = OrderedSet();\r\n    this.currentText = '';\r\n    this.entityMap = DraftEntity;\r\n    this.wrapper = null;\r\n    this.contentBlocks = [];\r\n  }\r\n\r\n  /**\r\n   * Add an HTMLElement to the ContentBlocksBuilder\r\n   */\r\n  addDOMNode(node: Node): ContentBlocksBuilder {\r\n    this.contentBlocks = [];\r\n    this.currentDepth = 0;\r\n    // Converts the HTML node to block config\r\n    this.blockConfigs.push(...this._toBlockConfigs([node]));\r\n\r\n    // There might be some left over text in the builder's\r\n    // internal state, if so make a ContentBlock out of it.\r\n    this._trimCurrentText();\r\n    if (this.currentText !== '') {\r\n      this.blockConfigs.push(this._makeBlockConfig());\r\n    }\r\n\r\n    // for chaining\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return the ContentBlocks and the EntityMap that corresponds\r\n   * to the previously added HTML nodes.\r\n   */\r\n  getContentBlocks(): {\r\n    contentBlocks: Array<BlockNodeRecord>,\r\n    entityMap: EntityMap,\r\n  } {\r\n    if (this.contentBlocks.length === 0) {\r\n      if (experimentalTreeDataSupport) {\r\n        this._toContentBlocks(this.blockConfigs);\r\n      } else {\r\n        this._toFlatContentBlocks(this.blockConfigs);\r\n      }\r\n    }\r\n    return {\r\n      contentBlocks: this.contentBlocks,\r\n      entityMap: this.entityMap,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a new inline style to the upcoming nodes.\r\n   */\r\n  addStyle(inlineStyle: DraftInlineStyle): void {\r\n    this.currentStyle = this.currentStyle.union(inlineStyle);\r\n  }\r\n\r\n  /**\r\n   * Remove a currently applied inline style.\r\n   */\r\n  removeStyle(inlineStyle: DraftInlineStyle): void {\r\n    this.currentStyle = this.currentStyle.subtract(inlineStyle);\r\n  }\r\n\r\n  // ***********************************WARNING******************************\r\n  // The methods below this line are private - don't call them directly.\r\n\r\n  /**\r\n   * Generate a new ContentBlockConfig out of the current internal state\r\n   * of the builder, then clears the internal state.\r\n   */\r\n  _makeBlockConfig(config?: any): ContentBlockConfig {\r\n    const key = config.key || generateRandomKey();\r\n    const block = {\r\n      key,\r\n      type: this.currentBlockType,\r\n      text: this.currentText,\r\n      characterList: this.characterList,\r\n      depth: this.currentDepth,\r\n      parent: null,\r\n      children: List(),\r\n      prevSibling: null,\r\n      nextSibling: null,\r\n      childConfigs: [],\r\n      ...config,\r\n    };\r\n    this.characterList = List();\r\n    this.currentBlockType = 'unstyled';\r\n    this.currentText = '';\r\n    return block;\r\n  }\r\n\r\n  /**\r\n   * Converts an array of HTML elements to a multi-root tree of content\r\n   * block configs. Some text content may be left in the builders internal\r\n   * state to enable chaining sucessive calls.\r\n   */\r\n  _toBlockConfigs(nodes: Array<Node>): Array<ContentBlockConfig> {\r\n    const blockConfigs = [];\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n      const nodeName = node.nodeName.toLowerCase();\r\n\r\n      if (nodeName === 'body' || isListNode(nodeName)) {\r\n        // body, ol and ul are 'block' type nodes so create a block config\r\n        // with the text accumulated so far (if any)\r\n        this._trimCurrentText();\r\n        if (this.currentText !== '') {\r\n          blockConfigs.push(this._makeBlockConfig());\r\n        }\r\n\r\n        // body, ol and ul nodes are ignored, but their children are inlined in\r\n        // the parent block config.\r\n        const wasCurrentDepth = this.currentDepth;\r\n        const wasWrapper = this.wrapper;\r\n        if (isListNode(nodeName)) {\r\n          this.wrapper = nodeName;\r\n          if (isListNode(wasWrapper)) {\r\n            this.currentDepth++;\r\n          }\r\n        }\r\n        blockConfigs.push(...this._toBlockConfigs(Array.from(node.childNodes)));\r\n        this.currentDepth = wasCurrentDepth;\r\n        this.wrapper = wasWrapper;\r\n        continue;\r\n      }\r\n\r\n      let blockType = this.blockTypeMap.get(nodeName);\r\n      if (blockType !== undefined) {\r\n        // 'block' type node means we need to create a block config\r\n        // with the text accumulated so far (if any)\r\n        this._trimCurrentText();\r\n        if (this.currentText !== '') {\r\n          blockConfigs.push(this._makeBlockConfig());\r\n        }\r\n\r\n        const wasCurrentDepth = this.currentDepth;\r\n        const wasWrapper = this.wrapper;\r\n        this.wrapper = nodeName === 'pre' ? 'pre' : this.wrapper;\r\n\r\n        if (typeof blockType !== 'string') {\r\n          blockType =\r\n            this.disambiguate(nodeName, this.wrapper) ||\r\n            blockType[0] ||\r\n            'unstyled';\r\n        }\r\n\r\n        if (\r\n          !experimentalTreeDataSupport &&\r\n          isHTMLElement(node) &&\r\n          (blockType === 'unordered-list-item' ||\r\n            blockType === 'ordered-list-item')\r\n        ) {\r\n          const htmlElement: HTMLElement = (node as any);\r\n          this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\r\n        }\r\n\r\n        const key = generateRandomKey();\r\n        const childConfigs = this._toBlockConfigs(Array.from(node.childNodes));\r\n        this._trimCurrentText();\r\n        blockConfigs.push(\r\n          this._makeBlockConfig({\r\n            key,\r\n            childConfigs,\r\n            type: blockType,\r\n          }),\r\n        );\r\n\r\n        this.currentDepth = wasCurrentDepth;\r\n        this.wrapper = wasWrapper;\r\n        continue;\r\n      }\r\n\r\n      if (nodeName === '#text') {\r\n        this._addTextNode(node);\r\n        continue;\r\n      }\r\n\r\n      if (nodeName === 'br') {\r\n        this._addBreakNode(node);\r\n        continue;\r\n      }\r\n\r\n      if (isValidImage(node)) {\r\n        this._addImgNode(node);\r\n        continue;\r\n      }\r\n\r\n      if (isValidAnchor(node)) {\r\n        this._addAnchorNode(node, blockConfigs);\r\n        continue;\r\n      }\r\n\r\n      const inlineStyle:any = HTMLTagToRawInlineStyleMap.has(nodeName)\r\n        ? OrderedSet.of(HTMLTagToRawInlineStyleMap.get(nodeName))\r\n        : OrderedSet();\r\n      const attributesStyle = styleFromNodeAttributes(node);\r\n\r\n      this.addStyle(inlineStyle);\r\n      this.addStyle(attributesStyle);\r\n\r\n      blockConfigs.push(...this._toBlockConfigs(Array.from(node.childNodes)));\r\n\r\n      this.removeStyle(attributesStyle);\r\n      this.removeStyle(inlineStyle);\r\n    }\r\n\r\n    return blockConfigs;\r\n  }\r\n\r\n  /**\r\n   * Append a string of text to the internal buffer.\r\n   */\r\n  _appendText(text: string) {\r\n    this.currentText += text;\r\n    const characterMetadata = CharacterMetadata.create({\r\n      style: this.currentStyle,\r\n      entity: this.currentEntity,\r\n    });\r\n    this.characterList = this.characterList.push(\r\n      ...Array(text.length).fill(characterMetadata),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trim the text in the internal buffer.\r\n   */\r\n  _trimCurrentText() {\r\n    const l = this.currentText.length;\r\n    let begin = l - this.currentText.trimLeft().length;\r\n    let end = this.currentText.trimRight().length;\r\n\r\n    // We should not trim whitespaces for which an entity is defined.\r\n    let entity = this.characterList.findEntry(\r\n      characterMetadata => characterMetadata.getEntity() !== null,\r\n    );\r\n    begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\r\n\r\n    entity = this.characterList\r\n      .reverse()\r\n      .findEntry(characterMetadata => characterMetadata.getEntity() !== null);\r\n    end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\r\n\r\n    if (begin > end) {\r\n      this.currentText = '';\r\n      this.characterList = List();\r\n    } else {\r\n      this.currentText = this.currentText.slice(begin, end);\r\n      this.characterList = this.characterList.slice(begin, end) as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the content of an HTML text node to the internal state\r\n   */\r\n  _addTextNode(node: Node) {\r\n    let text = node.textContent;\r\n    const trimmedText = text.trim();\r\n\r\n    // If we are not in a pre block and the trimmed content is empty,\r\n    // normalize to a single space.\r\n    if (trimmedText === '' && this.wrapper !== 'pre') {\r\n      text = ' ';\r\n    }\r\n\r\n    if (this.wrapper !== 'pre') {\r\n      // Trim leading line feed, which is invisible in HTML\r\n      text = text.replace(REGEX_LEADING_LF, '');\r\n\r\n      // Can't use empty string because MSWord\r\n      text = text.replace(REGEX_LF, SPACE);\r\n    }\r\n\r\n    this._appendText(text);\r\n  }\r\n\r\n  _addBreakNode(node: Node) {\r\n    if (!isHTMLBRElement(node)) {\r\n      return;\r\n    }\r\n    this._appendText('\\n');\r\n  }\r\n\r\n  /**\r\n   * Add the content of an HTML img node to the internal state\r\n   */\r\n  _addImgNode(node: Node) {\r\n    if (!isHTMLImageElement(node)) {\r\n      return;\r\n    }\r\n    const image: HTMLImageElement = (node as any);\r\n    const entityConfig = {};\r\n\r\n    imgAttr.forEach(attr => {\r\n      const imageAttribute = image.getAttribute(attr);\r\n      if (imageAttribute) {\r\n        entityConfig[attr] = imageAttribute;\r\n      }\r\n    });\r\n\r\n    // TODO: T15530363 update this when we remove DraftEntity entirely\r\n    this.currentEntity = this.entityMap.__create(\r\n      'IMAGE',\r\n      'IMMUTABLE',\r\n      entityConfig,\r\n    );\r\n\r\n    // The child text node cannot just have a space or return as content (since\r\n    // we strip those out), unless the image is for presentation only.\r\n    // See https://github.com/facebook/draft-js/issues/231 for some context.\r\n    if (gkx('draftjs_fix_paste_for_img')) {\r\n      if (image.getAttribute('role') !== 'presentation') {\r\n        this._appendText('\\ud83d\\udcf7');\r\n      }\r\n    } else {\r\n      this._appendText('\\ud83d\\udcf7');\r\n    }\r\n\r\n    this.currentEntity = null;\r\n  }\r\n\r\n  /**\r\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\r\n   * (if any) are converted to Block Configs and appended to the provided\r\n   * blockConfig array.\r\n   */\r\n  _addAnchorNode(node: Node, blockConfigs: Array<ContentBlockConfig>) {\r\n    // The check has already been made by isValidAnchor but\r\n    // we have to do it again to keep flow happy.\r\n    if (!isHTMLAnchorElement(node)) {\r\n      return;\r\n    }\r\n    const anchor: HTMLAnchorElement = (node as any);\r\n    const entityConfig:any = {};\r\n\r\n    anchorAttr.forEach(attr => {\r\n      const anchorAttribute = anchor.getAttribute(attr);\r\n      if (anchorAttribute) {\r\n        entityConfig[attr] = anchorAttribute;\r\n      }\r\n    });\r\n\r\n    entityConfig.url = new URI(anchor.href).toString();\r\n    // TODO: T15530363 update this when we remove DraftEntity completely\r\n    this.currentEntity = this.entityMap.__create(\r\n      'LINK',\r\n      'MUTABLE',\r\n      entityConfig || {},\r\n    );\r\n\r\n    blockConfigs.push(...this._toBlockConfigs(Array.from(node.childNodes)));\r\n    this.currentEntity = null;\r\n  }\r\n\r\n  /**\r\n   * Walk the BlockConfig tree, compute parent/children/siblings,\r\n   * and generate the corresponding ContentBlockNode\r\n   */\r\n  _toContentBlocks(\r\n    blockConfigs: Array<ContentBlockConfig>,\r\n    parent: string = null,\r\n  ) {\r\n    const l = blockConfigs.length - 1;\r\n    for (let i = 0; i <= l; i++) {\r\n      const config = blockConfigs[i];\r\n      config.parent = parent;\r\n      config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\r\n      config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\r\n      config.children = List(config.childConfigs.map(child => child.key));\r\n      this.contentBlocks.push(new ContentBlockNode({...config}));\r\n      this._toContentBlocks(config.childConfigs, config.key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove 'useless' container nodes from the block config hierarchy, by\r\n   * replacing them with their children.\r\n   */\r\n\r\n  _hoistContainersInBlockConfigs(\r\n    blockConfigs: Array<ContentBlockConfig>,\r\n  ): List<ContentBlockConfig> {\r\n    const hoisted:any = List(blockConfigs).flatMap(blockConfig => {\r\n      // Don't mess with useful blocks\r\n      if (blockConfig.type !== 'unstyled' || blockConfig.text !== '') {\r\n        return [blockConfig];\r\n      }\r\n\r\n      return this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\r\n    });\r\n\r\n    return hoisted;\r\n  }\r\n\r\n  // ***********************************************************************\r\n  // The two methods below are used for backward compatibility when\r\n  // experimentalTreeDataSupport is disabled.\r\n\r\n  /**\r\n   * Same as _toContentBlocks but replaces nested blocks by their\r\n   * text content.\r\n   */\r\n  _toFlatContentBlocks(blockConfigs: Array<ContentBlockConfig>) {\r\n    const cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\r\n    cleanConfigs.forEach(config => {\r\n      const {text, characterList} = this._extractTextFromBlockConfigs(\r\n        config.childConfigs,\r\n      );\r\n      this.contentBlocks.push(\r\n        new ContentBlock({\r\n          ...config,\r\n          text: config.text + text,\r\n          characterList: config.characterList.concat(characterList) as any,\r\n        }),\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Extract the text and the associated inline styles form an\r\n   * array of content block configs.\r\n   */\r\n  _extractTextFromBlockConfigs(\r\n    blockConfigs: Array<ContentBlockConfig>,\r\n  ): {\r\n    text: string,\r\n    characterList: List<CharacterMetadata>,\r\n  } {\r\n    const l = blockConfigs.length - 1;\r\n    let text = '';\r\n    let characterList:any = List();\r\n    for (let i = 0; i <= l; i++) {\r\n      const config = blockConfigs[i];\r\n      text += config.text;\r\n      characterList = characterList.concat(config.characterList);\r\n      if (text !== '' && config.type !== 'unstyled') {\r\n        text += '\\n';\r\n        characterList = characterList.push(characterList.last());\r\n      }\r\n      const children = this._extractTextFromBlockConfigs(config.childConfigs);\r\n      text += children.text;\r\n      characterList = characterList.concat(children.characterList);\r\n    }\r\n    return {text, characterList};\r\n  }\r\n}\r\n\r\n/**\r\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\r\n * suitable to initialize the internal state of a Draftjs component.\r\n */\r\nconst convertFromHTMLToContentBlocks = (\r\n  html: string,\r\n  DOMBuilder: Function = getSafeBodyFromHTML,\r\n  blockRenderMap = DefaultDraftBlockRenderMap,\r\n): {contentBlocks: Array<BlockNodeRecord>, entityMap: EntityMap} => {\r\n  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\r\n  // arbitrary code in whatever environment you're running this in. For an\r\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\r\n\r\n  // Remove funky characters from the HTML string\r\n  html = html\r\n    .trim()\r\n    .replace(REGEX_CR, '')\r\n    .replace(REGEX_NBSP, SPACE)\r\n    .replace(REGEX_CARRIAGE, '')\r\n    .replace(REGEX_ZWS, '');\r\n\r\n  // Build a DOM tree out of the HTML string\r\n  const safeBody = DOMBuilder(html);\r\n  if (!safeBody) {\r\n    return null;\r\n  }\r\n\r\n  // Build a BlockTypeMap out of the BlockRenderMap\r\n  const blockTypeMap = buildBlockTypeMap(blockRenderMap);\r\n\r\n  // Select the proper block type for the cases where the blockRenderMap\r\n  // uses multiple block types for the same html tag.\r\n  const disambiguate = (tag: string, wrapper: string): string => {\r\n    if (tag === 'li') {\r\n      return wrapper === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return new ContentBlocksBuilder(blockTypeMap, disambiguate)\r\n    .addDOMNode(safeBody)\r\n    .getContentBlocks();\r\n};\r\n\r\nexport default  convertFromHTMLToContentBlocks;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport { BlockNodeRecord } from '../immutable/BlockNodeRecord';\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport { DraftBlockRenderMap } from '../immutable/DraftBlockRenderMap';\r\nimport { DraftBlockType } from '../constants/DraftBlockType';\r\nimport { EntityMap } from '../immutable/EntityMap';\r\n\r\nimport ContentBlock from '../immutable/ContentBlock';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\n\r\nimport convertFromHTMLToContentBlocks from '../encoding/convertFromHTMLToContentBlocks';\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport getSafeBodyFromHTML from './getSafeBodyFromHTML';\r\nimport gkx from '../../stubs/gkx';\r\nimport { List, Repeat } from 'immutable';\r\nimport sanitizeDraftText from '../encoding/sanitizeDraftText';\r\n\r\nconst experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\nconst ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\r\n\r\nconst DraftPasteProcessor = {\r\n    processHTML(html: string, blockRenderMap?: DraftBlockRenderMap): { contentBlocks: Array<BlockNodeRecord>; entityMap: EntityMap } {\r\n        return convertFromHTMLToContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\r\n    },\r\n\r\n    processText(textBlocks: Array<string>, character: CharacterMetadata, type: DraftBlockType): Array<BlockNodeRecord> {\r\n        return textBlocks.reduce((acc, textLine, index) => {\r\n            textLine = sanitizeDraftText(textLine);\r\n            const key = generateRandomKey();\r\n\r\n            let blockNodeConfig = {\r\n                key,\r\n                type,\r\n                text: textLine,\r\n                characterList: List(Repeat(character, textLine.length))\r\n            };\r\n\r\n            // next block updates previous block\r\n            if (experimentalTreeDataSupport && index !== 0) {\r\n                const prevSiblingIndex = index - 1;\r\n                // update previous block\r\n                const previousBlock = (acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\r\n                    nextSibling: key\r\n                }));\r\n                blockNodeConfig = {\r\n                    ...blockNodeConfig,\r\n                    prevSibling: previousBlock.getKey()\r\n                } as any;\r\n            }\r\n\r\n            acc.push(new ContentBlockRecord(blockNodeConfig));\r\n\r\n            return acc;\r\n        }, []);\r\n    }\r\n};\r\n\r\nexport default DraftPasteProcessor;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  {DraftBlockType} from '../constants/DraftBlockType';\r\nimport {DraftEditorCommand} from '../constants/DraftEditorCommand';\r\nimport  {DataObjectForLink, RichTextUtils} from './RichTextUtils';\r\nimport  SelectionState from '../immutable/SelectionState';\r\nimport  URI from 'fbjs/lib/URI';\r\n\r\nimport DraftModifier from './DraftModifier';\r\nimport EditorState from '../immutable/EditorState';\r\n\r\nimport adjustBlockDepthForContentState from '../transaction/adjustBlockDepthForContentState';\r\nimport nullthrows from 'fbjs/lib/nullthrows';\r\n\r\nconst RichTextEditorUtil: RichTextUtils = {\r\n  currentBlockContainsLink: function(editorState: EditorState): boolean {\r\n    const selection = editorState.getSelection();\r\n    const contentState = editorState.getCurrentContent();\r\n    const entityMap = contentState.getEntityMap();\r\n    return contentState\r\n      .getBlockForKey(selection.getAnchorKey())\r\n      .getCharacterList()\r\n      .slice(selection.getStartOffset(), selection.getEndOffset())\r\n      .some(v => {\r\n        const entity = v.getEntity();\r\n        return !!entity && entityMap.__get(entity).getType() === 'LINK';\r\n      });\r\n  },\r\n\r\n  getCurrentBlockType: function(editorState: EditorState): DraftBlockType {\r\n    const selection = editorState.getSelection();\r\n    return editorState\r\n      .getCurrentContent()\r\n      .getBlockForKey(selection.getStartKey())\r\n      .getType();\r\n  },\r\n\r\n  getDataObjectForLinkURL: function(uri: URI): DataObjectForLink {\r\n    return {url: uri.toString()};\r\n  },\r\n\r\n  handleKeyCommand: function(\r\n    editorState: EditorState,\r\n    command: DraftEditorCommand | string\r\n  ): EditorState {\r\n    switch (command) {\r\n      case 'bold':\r\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\r\n      case 'italic':\r\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\r\n      case 'underline':\r\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\r\n      case 'code':\r\n        return RichTextEditorUtil.toggleCode(editorState);\r\n      case 'backspace':\r\n      case 'backspace-word':\r\n      case 'backspace-to-start-of-line':\r\n        return RichTextEditorUtil.onBackspace(editorState);\r\n      case 'delete':\r\n      case 'delete-word':\r\n      case 'delete-to-end-of-block':\r\n        return RichTextEditorUtil.onDelete(editorState);\r\n      default:\r\n        // they may have custom editor commands; ignore those\r\n        return null;\r\n    }\r\n  },\r\n\r\n  insertSoftNewline: function(editorState: EditorState): EditorState {\r\n    const contentState = DraftModifier.insertText(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n      '\\n',\r\n      editorState.getCurrentInlineStyle(),\r\n      null,\r\n    );\r\n\r\n    const newEditorState = EditorState.push(\r\n      editorState,\r\n      contentState,\r\n      'insert-characters',\r\n    );\r\n\r\n    return EditorState.forceSelection(\r\n      newEditorState,\r\n      contentState.getSelectionAfter(),\r\n    );\r\n  },\r\n\r\n  /**\r\n   * For collapsed selections at the start of styled blocks, backspace should\r\n   * just remove the existing style.\r\n   */\r\n  onBackspace: function(editorState: EditorState): EditorState {\r\n    const selection = editorState.getSelection();\r\n    if (\r\n      !selection.isCollapsed() ||\r\n      selection.getAnchorOffset() ||\r\n      selection.getFocusOffset()\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    // First, try to remove a preceding atomic block.\r\n    const content = editorState.getCurrentContent();\r\n    const startKey = selection.getStartKey();\r\n    const blockBefore = content.getBlockBefore(startKey);\r\n\r\n    if (blockBefore && blockBefore.getType() === 'atomic') {\r\n      const blockMap = content.getBlockMap().delete(blockBefore.getKey());\r\n      const withoutAtomicBlock:any = content.merge({\r\n        blockMap,\r\n        selectionAfter: selection,\r\n      });\r\n      if (withoutAtomicBlock !== content) {\r\n        return EditorState.push(\r\n          editorState,\r\n          withoutAtomicBlock,\r\n          'remove-range',\r\n        );\r\n      }\r\n    }\r\n\r\n    // If that doesn't succeed, try to remove the current block style.\r\n    const withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(\r\n      editorState,\r\n    );\r\n\r\n    if (withoutBlockStyle) {\r\n      return EditorState.push(\r\n        editorState,\r\n        withoutBlockStyle,\r\n        'change-block-type',\r\n      );\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  onDelete: function(editorState: EditorState): EditorState {\r\n    const selection = editorState.getSelection();\r\n    if (!selection.isCollapsed()) {\r\n      return null;\r\n    }\r\n\r\n    const content = editorState.getCurrentContent();\r\n    const startKey = selection.getStartKey();\r\n    const block = content.getBlockForKey(startKey);\r\n    const length = block.getLength();\r\n\r\n    // The cursor is somewhere within the text. Behave normally.\r\n    if (selection.getStartOffset() < length) {\r\n      return null;\r\n    }\r\n\r\n    const blockAfter = content.getBlockAfter(startKey);\r\n\r\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\r\n      return null;\r\n    }\r\n\r\n    const atomicBlockTarget:any = selection.merge({\r\n      focusKey: blockAfter.getKey(),\r\n      focusOffset: blockAfter.getLength(),\r\n    });\r\n\r\n    const withoutAtomicBlock = DraftModifier.removeRange(\r\n      content,\r\n      atomicBlockTarget,\r\n      'forward',\r\n    );\r\n\r\n    if (withoutAtomicBlock !== content) {\r\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  onTab: function(\r\n    event: KeyboardEvent,\r\n    editorState: EditorState,\r\n    maxDepth: number,\r\n  ): EditorState {\r\n    const selection = editorState.getSelection();\r\n    const key = selection.getAnchorKey();\r\n    if (key !== selection.getFocusKey()) {\r\n      return editorState;\r\n    }\r\n\r\n    const content = editorState.getCurrentContent();\r\n    const block = content.getBlockForKey(key);\r\n    const type = block.getType();\r\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\r\n      return editorState;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    const depth = block.getDepth();\r\n    if (!event.shiftKey && depth === maxDepth) {\r\n      return editorState;\r\n    }\r\n\r\n    const withAdjustment = adjustBlockDepthForContentState(\r\n      content,\r\n      selection,\r\n      event.shiftKey ? -1 : 1,\r\n      maxDepth,\r\n    );\r\n\r\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\r\n  },\r\n\r\n  toggleBlockType: function(\r\n    editorState: EditorState,\r\n    blockType: DraftBlockType,\r\n  ): EditorState {\r\n    const selection = editorState.getSelection();\r\n    const startKey = selection.getStartKey();\r\n    let endKey = selection.getEndKey();\r\n    const content = editorState.getCurrentContent();\r\n    let target:any = selection;\r\n\r\n    // Triple-click can lead to a selection that includes offset 0 of the\r\n    // following block. The `SelectionState` for this case is accurate, but\r\n    // we should avoid toggling block type for the trailing block because it\r\n    // is a confusing interaction.\r\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\r\n      const blockBefore = nullthrows(content.getBlockBefore(endKey));\r\n      endKey = blockBefore.getKey();\r\n      target = target.merge({\r\n        anchorKey: startKey,\r\n        anchorOffset: selection.getStartOffset(),\r\n        focusKey: endKey,\r\n        focusOffset: blockBefore.getLength(),\r\n        isBackward: false,\r\n      });\r\n    }\r\n\r\n    const hasAtomicBlock = content\r\n      .getBlockMap()\r\n      .skipWhile((_, k) => k !== startKey)\r\n      .reverse()\r\n      .skipWhile((_, k) => k !== endKey)\r\n      .some(v => v.getType() === 'atomic');\r\n\r\n    if (hasAtomicBlock) {\r\n      return editorState;\r\n    }\r\n\r\n    const typeToSet =\r\n      content.getBlockForKey(startKey).getType() === blockType\r\n        ? 'unstyled'\r\n        : blockType;\r\n\r\n    return EditorState.push(\r\n      editorState,\r\n      DraftModifier.setBlockType(content, target, typeToSet),\r\n      'change-block-type',\r\n    );\r\n  },\r\n\r\n  toggleCode: function(editorState: EditorState): EditorState {\r\n    const selection = editorState.getSelection();\r\n    const anchorKey = selection.getAnchorKey();\r\n    const focusKey = selection.getFocusKey();\r\n\r\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\r\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\r\n    }\r\n\r\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\r\n  },\r\n\r\n  /**\r\n   * Toggle the specified inline style for the selection. If the\r\n   * user's selection is collapsed, apply or remove the style for the\r\n   * internal state. If it is not collapsed, apply the change directly\r\n   * to the document state.\r\n   */\r\n  toggleInlineStyle: function(\r\n    editorState: EditorState,\r\n    inlineStyle: string,\r\n  ): EditorState {\r\n    const selection = editorState.getSelection();\r\n    const currentStyle = editorState.getCurrentInlineStyle();\r\n\r\n    // If the selection is collapsed, toggle the specified style on or off and\r\n    // set the result as the new inline style override. This will then be\r\n    // used as the inline style for the next character to be inserted.\r\n    if (selection.isCollapsed()) {\r\n      return EditorState.setInlineStyleOverride(\r\n        editorState,\r\n        currentStyle.has(inlineStyle)\r\n          ? currentStyle.remove(inlineStyle)\r\n          : currentStyle.add(inlineStyle),\r\n      );\r\n    }\r\n\r\n    // If characters are selected, immediately apply or remove the\r\n    // inline style on the document state itself.\r\n    const content = editorState.getCurrentContent();\r\n    let newContent;\r\n\r\n    // If the style is already present for the selection range, remove it.\r\n    // Otherwise, apply it.\r\n    if (currentStyle.has(inlineStyle)) {\r\n      newContent = DraftModifier.removeInlineStyle(\r\n        content,\r\n        selection,\r\n        inlineStyle,\r\n      );\r\n    } else {\r\n      newContent = DraftModifier.applyInlineStyle(\r\n        content,\r\n        selection,\r\n        inlineStyle,\r\n      );\r\n    }\r\n\r\n    return EditorState.push(editorState, newContent, 'change-inline-style');\r\n  },\r\n\r\n  toggleLink: function(\r\n    editorState: EditorState,\r\n    targetSelection: SelectionState,\r\n    entityKey: string,\r\n  ): EditorState {\r\n    const withoutLink = DraftModifier.applyEntity(\r\n      editorState.getCurrentContent(),\r\n      targetSelection,\r\n      entityKey,\r\n    );\r\n\r\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\r\n  },\r\n\r\n  /**\r\n   * When a collapsed cursor is at the start of a styled block, changes block\r\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\r\n   */\r\n  tryToRemoveBlockStyle: function(editorState: EditorState): ContentState {\r\n    const selection = editorState.getSelection();\r\n    const offset = selection.getAnchorOffset();\r\n    if (selection.isCollapsed() && offset === 0) {\r\n      const key = selection.getAnchorKey();\r\n      const content = editorState.getCurrentContent();\r\n      const block = content.getBlockForKey(key);\r\n\r\n      const type = block.getType();\r\n      const blockBefore = content.getBlockBefore(key);\r\n      if (\r\n        type === 'code-block' &&\r\n        blockBefore &&\r\n        blockBefore.getType() === 'code-block' &&\r\n        blockBefore.getLength() !== 0\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      if (type !== 'unstyled') {\r\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default  RichTextEditorUtil;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  ContentState from '../immutable/ContentState';\r\nimport  SelectionState from '../immutable/SelectionState';\r\n\r\nfunction adjustBlockDepthForContentState(\r\n  contentState: ContentState,\r\n  selectionState: SelectionState,\r\n  adjustment: number,\r\n  maxDepth: number,\r\n): ContentState {\r\n  const startKey = selectionState.getStartKey();\r\n  const endKey = selectionState.getEndKey();\r\n  let blockMap = contentState.getBlockMap();\r\n  const blocks:any = blockMap\r\n    .toSeq()\r\n    .skipUntil((_, k) => k === startKey)\r\n    .takeUntil((_, k) => k === endKey)\r\n    .concat([[endKey, blockMap.get(endKey)]])\r\n    .map(block => {\r\n      let depth = block.getDepth() + adjustment;\r\n      depth = Math.max(0, Math.min(depth, maxDepth));\r\n      return block.set('depth', depth);\r\n    });\r\n\r\n  blockMap = blockMap.merge(blocks);\r\n\r\n  return contentState.merge({\r\n    blockMap,\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState,\r\n  }) as ContentState;\r\n}\r\n\r\nexport default  adjustBlockDepthForContentState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nconst NEWLINE_REGEX = /\\r\\n?|\\n/g;\r\n\r\nfunction splitTextIntoTextBlocks(text: string): Array<string> {\r\n  return text.split(NEWLINE_REGEX);\r\n}\r\n\r\nexport default  splitTextIntoTextBlocks;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../../../model/immutable/BlockMap';\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\nimport {EntityMap} from '../../../model/immutable/EntityMap';\r\n\r\nimport BlockMapBuilder from '../../../model/immutable/BlockMapBuilder';\r\nimport CharacterMetadata from '../../../model/immutable/CharacterMetadata';\r\nimport DataTransfer from 'fbjs/lib/DataTransfer';\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport DraftPasteProcessor from '../../../model/paste/DraftPasteProcessor';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport RichTextEditorUtil from '../../../model/modifier/RichTextEditorUtil';\r\n\r\nimport getEntityKeyForSelection from '../../../model/entity/getEntityKeyForSelection';\r\nimport getTextContentFromFiles from '../../utils/getTextContentFromFiles';\r\nimport isEventHandled from '../../utils/isEventHandled';\r\nimport splitTextIntoTextBlocks from '../../utils/splitTextIntoTextBlocks';\r\n\r\n/**\r\n * Paste content.\r\n */\r\nfunction editOnPaste(editor: DraftEditor, e: any): void {\r\n  e.preventDefault();\r\n  const data = new DataTransfer(e.clipboardData);\r\n\r\n  // Get files, unless this is likely to be a string the user wants inline.\r\n  if (!data.isRichText()) {\r\n    /* $FlowFixMe This comment suppresses an error found DataTransfer was typed.\r\n     * getFiles() returns an array of <Files extends Blob>, not Blob */\r\n    const files: Array<Blob> = (data.getFiles() as any);\r\n    const defaultFileText = data.getText();\r\n    if (files.length > 0) {\r\n      // Allow customized paste handling for images, etc. Otherwise, fall\r\n      // through to insert text contents into the editor.\r\n      if (\r\n        editor.props.handlePastedFiles &&\r\n        isEventHandled(editor.props.handlePastedFiles(files))\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      getTextContentFromFiles(files as any, (/*string*/ fileText) => {\r\n        fileText = fileText || defaultFileText;\r\n        if (!fileText) {\r\n          return;\r\n        }\r\n\r\n        const editorState = editor._latestEditorState;\r\n        const blocks = splitTextIntoTextBlocks(fileText);\r\n        const character = CharacterMetadata.create({\r\n          style: editorState.getCurrentInlineStyle(),\r\n          entity: getEntityKeyForSelection(\r\n            editorState.getCurrentContent(),\r\n            editorState.getSelection(),\r\n          ),\r\n        });\r\n        const currentBlockType = RichTextEditorUtil.getCurrentBlockType(\r\n          editorState,\r\n        );\r\n\r\n        const text = DraftPasteProcessor.processText(\r\n          blocks,\r\n          character,\r\n          currentBlockType,\r\n        );\r\n        const fragment = BlockMapBuilder.createFromArray(text);\r\n\r\n        const withInsertedText = DraftModifier.replaceWithFragment(\r\n          editorState.getCurrentContent(),\r\n          editorState.getSelection(),\r\n          fragment,\r\n        );\r\n\r\n        editor.update(\r\n          EditorState.push(editorState, withInsertedText, 'insert-fragment'),\r\n        );\r\n      });\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  let textBlocks: Array<string> = [];\r\n  const text: string = (data.getText() as any);\r\n  const html: string = (data.getHTML() as any);\r\n  const editorState = editor._latestEditorState;\r\n\r\n  if (\r\n    editor.props.handlePastedText &&\r\n    isEventHandled(editor.props.handlePastedText(text, html, editorState))\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (text) {\r\n    textBlocks = splitTextIntoTextBlocks(text);\r\n  }\r\n\r\n  if (!editor.props.stripPastedStyles) {\r\n    // If the text from the paste event is rich content that matches what we\r\n    // already have on the internal clipboard, assume that we should just use\r\n    // the clipboard fragment for the paste. This will allow us to preserve\r\n    // styling and entities, if any are present. Note that newlines are\r\n    // stripped during comparison -- this is because copy/paste within the\r\n    // editor in Firefox and IE will not include empty lines. The resulting\r\n    // paste will preserve the newlines correctly.\r\n    const internalClipboard = editor.getClipboard();\r\n    if (data.isRichText() && internalClipboard) {\r\n      if (\r\n        // If the editorKey is present in the pasted HTML, it should be safe to\r\n        // assume this is an internal paste.\r\n        html.indexOf(editor.getEditorKey()) !== -1 ||\r\n        // The copy may have been made within a single block, in which case the\r\n        // editor key won't be part of the paste. In this case, just check\r\n        // whether the pasted text matches the internal clipboard.\r\n        (textBlocks.length === 1 &&\r\n          internalClipboard.size === 1 &&\r\n          internalClipboard.first().getText() === text)\r\n      ) {\r\n        editor.update(\r\n          insertFragment(editor._latestEditorState, internalClipboard),\r\n        );\r\n        return;\r\n      }\r\n    } else if (\r\n      internalClipboard &&\r\n      data.types.includes('com.apple.webarchive') &&\r\n      !data.types.includes('text/html') &&\r\n      areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)\r\n    ) {\r\n      // Safari does not properly store text/html in some cases.\r\n      // Use the internalClipboard if present and equal to what is on\r\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\r\n      editor.update(\r\n        insertFragment(editor._latestEditorState, internalClipboard),\r\n      );\r\n      return;\r\n    }\r\n\r\n    // If there is html paste data, try to parse that.\r\n    if (html) {\r\n      const htmlFragment = DraftPasteProcessor.processHTML(\r\n        html,\r\n        editor.props.blockRenderMap,\r\n      );\r\n      if (htmlFragment) {\r\n        const {contentBlocks, entityMap} = htmlFragment;\r\n        if (contentBlocks) {\r\n          const htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\r\n          editor.update(\r\n            insertFragment(editor._latestEditorState, htmlMap, entityMap),\r\n          );\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Otherwise, create a new fragment from our pasted text. Also\r\n    // empty the internal clipboard, since it's no longer valid.\r\n    editor.setClipboard(null);\r\n  }\r\n\r\n  if (textBlocks.length) {\r\n    const character = CharacterMetadata.create({\r\n      style: editorState.getCurrentInlineStyle(),\r\n      entity: getEntityKeyForSelection(\r\n        editorState.getCurrentContent(),\r\n        editorState.getSelection(),\r\n      ),\r\n    });\r\n\r\n    const currentBlockType = RichTextEditorUtil.getCurrentBlockType(\r\n      editorState,\r\n    );\r\n\r\n    const textFragment = DraftPasteProcessor.processText(\r\n      textBlocks,\r\n      character,\r\n      currentBlockType,\r\n    );\r\n\r\n    const textMap = BlockMapBuilder.createFromArray(textFragment);\r\n    editor.update(insertFragment(editor._latestEditorState, textMap));\r\n  }\r\n}\r\n\r\nfunction insertFragment(\r\n  editorState: EditorState,\r\n  fragment: BlockMap,\r\n  entityMap?:EntityMap,\r\n): EditorState {\r\n  const newContent = DraftModifier.replaceWithFragment(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n    fragment,\r\n  );\r\n  // TODO: merge the entity map once we stop using DraftEntity\r\n  // like this:\r\n  // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\r\n\r\n  return EditorState.push(\r\n    editorState,\r\n    newContent.set('entityMap', entityMap) as any,\r\n    'insert-fragment',\r\n  );\r\n}\r\n\r\nfunction areTextBlocksAndClipboardEqual(\r\n  textBlocks: Array<string>,\r\n  blockMap: BlockMap,\r\n): boolean {\r\n  return (\r\n    textBlocks.length === blockMap.size &&\r\n    blockMap.valueSeq().every((block, ii) => block.getText() === textBlocks[ii])\r\n  );\r\n}\r\n\r\nexport default  editOnPaste;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nimport onBeforeInput from './editOnBeforeInput';\r\nimport onBlur from './editOnBlur';\r\nimport onCompositionStart from './editOnCompositionStart';\r\nimport onCopy from './editOnCopy';\r\nimport onCut from './editOnCut';\r\nimport onDragOver from './editOnDragOver';\r\nimport onDragStart from './editOnDragStart';\r\nimport onFocus from './editOnFocus';\r\nimport onInput from './editOnInput';\r\nimport onKeyDown from './editOnKeyDown';\r\nimport onPaste from './editOnPaste';\r\nimport onSelect from './editOnSelect';\r\n\r\nconst isChrome = UserAgent.isBrowser('Chrome');\r\n\r\nconst selectionHandler: (e: DraftEditor, event?) => void = isChrome\r\n  ? onSelect\r\n  : e => {};\r\n\r\nconst DraftEditorEditHandler = {\r\n  onBeforeInput,\r\n  onBlur,\r\n  onCompositionStart,\r\n  onCopy,\r\n  onCut,\r\n  onDragOver,\r\n  onDragStart,\r\n  onFocus,\r\n  onInput,\r\n  onKeyDown,\r\n  onPaste,\r\n  onSelect,\r\n  // In certain cases, contenteditable on chrome does not fire the onSelect\r\n  // event, causing problems with cursor positioning. Therefore, the selection\r\n  // state update handler is added to more events to ensure that the selection\r\n  // state is always synced with the actual cursor positions.\r\n  onMouseUp: selectionHandler,\r\n  onKeyUp: selectionHandler,\r\n};\r\n\r\nexport default  DraftEditorEditHandler;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  EditorState from '../../model/immutable/EditorState';\r\n\r\nfunction isSelectionAtLeafStart(editorState: EditorState): boolean {\r\n  const selection = editorState.getSelection();\r\n  const anchorKey = selection.getAnchorKey();\r\n  const blockTree = editorState.getBlockTree(anchorKey);\r\n  const offset = selection.getStartOffset();\r\n\r\n  let isAtStart = false;\r\n\r\n  blockTree.some(leafSet => {\r\n    if (offset === leafSet.get('start')) {\r\n      isAtStart = true;\r\n      return true;\r\n    }\r\n\r\n    if (offset < leafSet.get('end')) {\r\n      return leafSet.get('leaves').some(leaf => {\r\n        const leafStart = leaf.get('start');\r\n        if (offset === leafStart) {\r\n          isAtStart = true;\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      });\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  return isAtStart;\r\n}\r\n\r\nexport default  isSelectionAtLeafStart;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport containsNode from 'fbjs/lib/containsNode';\r\nimport getActiveElement from 'fbjs/lib/getActiveElement';\r\n\r\nfunction editOnBlur(editor: DraftEditor, e: any): void {\r\n  // In a contentEditable element, when you select a range and then click\r\n  // another active element, this does trigger a `blur` event but will not\r\n  // remove the DOM selection from the contenteditable.\r\n  // This is consistent across all browsers, but we prefer that the editor\r\n  // behave like a textarea, where a `blur` event clears the DOM selection.\r\n  // We therefore force the issue to be certain, checking whether the active\r\n  // element is `body` to force it when blurring occurs within the window (as\r\n  // opposed to clicking to another tab or window).\r\n  const {ownerDocument} = e.currentTarget;\r\n  if (\r\n    !Boolean(editor.props.preserveSelectionOnBlur) &&\r\n    getActiveElement(ownerDocument) === ownerDocument.body\r\n  ) {\r\n    const selection = ownerDocument.defaultView.getSelection();\r\n    const editorNode = editor.editor;\r\n    if (\r\n      selection.rangeCount === 1 &&\r\n      containsNode(editorNode, selection.anchorNode) &&\r\n      containsNode(editorNode, selection.focusNode)\r\n    ) {\r\n      selection.removeAllRanges();\r\n    }\r\n  }\r\n\r\n  const editorState = editor._latestEditorState;\r\n  const currentSelection = editorState.getSelection();\r\n  if (!currentSelection.getHasFocus()) {\r\n    return;\r\n  }\r\n\r\n  const selection:any = currentSelection.set('hasFocus', false);\r\n  editor.props.onBlur && editor.props.onBlur(e);\r\n  editor.update(EditorState.acceptSelection(editorState, selection));\r\n}\r\n\r\nexport default  editOnBlur;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\n\r\n/**\r\n * The user has begun using an IME input system. Switching to `composite` mode\r\n * allows handling composition input and disables other edit behavior.\r\n */\r\nfunction editOnCompositionStart(\r\n  editor: DraftEditor,\r\n  e: any,\r\n): void {\r\n  editor.setMode('composite');\r\n  editor.update(\r\n    EditorState.set(editor._latestEditorState, {inCompositionMode: true}),\r\n  );\r\n  // Allow composition handler to interpret the compositionstart event\r\n  editor._onCompositionStart(e);\r\n}\r\n\r\nexport default  editOnCompositionStart;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport getFragmentFromSelection from './getFragmentFromSelection';\r\n\r\n/**\r\n * If we have a selection, create a ContentState fragment and store\r\n * it in our internal clipboard. Subsequent paste events will use this\r\n * fragment if no external clipboard data is supplied.\r\n */\r\nfunction editOnCopy(editor: DraftEditor, e: any): void {\r\n  const editorState = editor._latestEditorState;\r\n  const selection = editorState.getSelection();\r\n\r\n  // No selection, so there's nothing to copy.\r\n  if (selection.isCollapsed()) {\r\n    e.preventDefault();\r\n    return;\r\n  }\r\n\r\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\r\n}\r\n\r\nexport default  editOnCopy;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport DraftModifier from '../../../model/modifier/DraftModifier';\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport Style from 'fbjs/lib/Style';\r\n\r\nimport getFragmentFromSelection from './getFragmentFromSelection';\r\nimport getScrollPosition from 'fbjs/lib/getScrollPosition';\r\nimport isNode from '../../utils/isInstanceOfNode';\r\n\r\n/**\r\n * On `cut` events, native behavior is allowed to occur so that the system\r\n * clipboard is set properly. This means that we need to take steps to recover\r\n * the editor DOM state after the `cut` has occurred in order to maintain\r\n * control of the component.\r\n *\r\n * In addition, we can keep a copy of the removed fragment, including all\r\n * styles and entities, for use as an internal paste.\r\n */\r\nfunction editOnCut(editor: DraftEditor, e: any): void {\r\n  const editorState = editor._latestEditorState;\r\n  const selection = editorState.getSelection();\r\n  const element = e.target;\r\n  let scrollPosition;\r\n\r\n  // No selection, so there's nothing to cut.\r\n  if (selection.isCollapsed()) {\r\n    e.preventDefault();\r\n    return;\r\n  }\r\n\r\n  // Track the current scroll position so that it can be forced back in place\r\n  // after the editor regains control of the DOM.\r\n  if (isNode(element)) {\r\n    const node: Node = (element as any);\r\n    scrollPosition = getScrollPosition(Style.getScrollParent(node));\r\n  }\r\n\r\n  const fragment = getFragmentFromSelection(editorState);\r\n  editor.setClipboard(fragment);\r\n\r\n  // Set `cut` mode to disable all event handling temporarily.\r\n  editor.setMode('cut');\r\n\r\n  // Let native `cut` behavior occur, then recover control.\r\n  setTimeout(() => {\r\n    editor.restoreEditorDOM(scrollPosition);\r\n    editor.exitCurrentMode();\r\n    editor.update(removeFragment(editorState));\r\n  }, 0);\r\n}\r\n\r\nfunction removeFragment(editorState: EditorState): EditorState {\r\n  const newContent = DraftModifier.removeRange(\r\n    editorState.getCurrentContent(),\r\n    editorState.getSelection(),\r\n    'forward',\r\n  );\r\n  return EditorState.push(editorState, newContent, 'remove-range');\r\n}\r\n\r\nexport default  editOnCut;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\nfunction isInstanceOfNode(target: EventTarget): boolean {\r\n  // we changed the name because of having duplicate module provider (fbjs)\r\n  if (!target || !('ownerDocument' in target)) {\r\n    return false;\r\n  }\r\n  if ('ownerDocument' in target) {\r\n    const node: Node = (target as any);\r\n    if (!node.ownerDocument.defaultView) {\r\n      return node instanceof Node;\r\n    }\r\n    // $FlowFixMe https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\r\n    if (node instanceof (node.ownerDocument.defaultView as any).Node) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default  isInstanceOfNode;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\n/**\r\n * Drag behavior has begun from outside the editor element.\r\n */\r\nfunction editOnDragOver(editor: DraftEditor, e: any): void {\r\n  editor.setMode('drag');\r\n  e.preventDefault();\r\n}\r\n\r\nexport default  editOnDragOver;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\n/**\r\n * A `dragstart` event has begun within the text editor component.\r\n */\r\nfunction editOnDragStart(editor: DraftEditor): void {\r\n  editor._internalDrag = true;\r\n  editor.setMode('drag');\r\n}\r\n\r\nexport default  editOnDragStart;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  DraftEditor from '../../base/DraftEditor.react';\r\n\r\nimport EditorState from '../../../model/immutable/EditorState';\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nfunction editOnFocus(editor: DraftEditor, e: any): void {\r\n  const editorState = editor._latestEditorState;\r\n  const currentSelection = editorState.getSelection();\r\n  if (currentSelection.getHasFocus()) {\r\n    return;\r\n  }\r\n\r\n  const selection:any = currentSelection.set('hasFocus', true);\r\n  editor.props.onFocus && editor.props.onFocus(e);\r\n\r\n  // When the tab containing this text editor is hidden and the user does a\r\n  // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the\r\n  // selection was right after sending this focus event and (if you let it)\r\n  // moves the cursor back to the beginning of the editor, so we force the\r\n  // selection here instead of simply accepting it in order to preserve the\r\n  // old cursor position. See https://crbug.com/540004.\r\n  // But it looks like this is fixed in Chrome 60.0.3081.0.\r\n  // Other browsers also don't have this bug, so we prefer to acceptSelection\r\n  // when possible, to ensure that unfocusing and refocusing a Draft editor\r\n  // doesn't preserve the selection, matching how textareas work.\r\n  if (UserAgent.isBrowser('Chrome < 60.0.3081.0')) {\r\n    editor.update(EditorState.forceSelection(editorState, selection));\r\n  } else {\r\n    editor.update(EditorState.acceptSelection(editorState, selection));\r\n  }\r\n}\r\n\r\nexport default  editOnFocus;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport EditorState from '../../../../model/immutable/EditorState';\r\n\r\nfunction keyCommandUndo(\r\n  e: KeyboardEvent,\r\n  editorState: EditorState,\r\n  updateFn: (editorState: EditorState) => void,\r\n): void {\r\n  const undoneState = EditorState.undo(editorState);\r\n\r\n  // If the last change to occur was a spellcheck change, allow the undo\r\n  // event to fall through to the browser. This allows the browser to record\r\n  // the unwanted change, which should soon lead it to learn not to suggest\r\n  // the correction again.\r\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\r\n    const nativelyRenderedContent = undoneState.getCurrentContent();\r\n    updateFn(EditorState.set(undoneState, {nativelyRenderedContent}));\r\n    return;\r\n  }\r\n\r\n  // Otheriwse, manage the undo behavior manually.\r\n  e.preventDefault();\r\n  if (!editorState.getNativelyRenderedContent()) {\r\n    updateFn(undoneState);\r\n    return;\r\n  }\r\n\r\n  // Trigger a re-render with the current content state to ensure that the\r\n  // component tree has up-to-date props for comparison.\r\n  updateFn(EditorState.set(editorState, {nativelyRenderedContent: null}));\r\n\r\n  // Wait to ensure that the re-render has occurred before performing\r\n  // the undo action.\r\n  setTimeout(() => {\r\n    updateFn(undoneState);\r\n  }, 0);\r\n}\r\n\r\nexport default  keyCommandUndo;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {DraftTextAlignment} from './DraftTextAlignment';\r\nimport  EditorState from '../../model/immutable/EditorState';\r\n\r\nimport React from 'react'\r\n\r\nimport cx from 'fbjs/lib/cx'\r\n\r\ntype Props = {\r\n  accessibilityID: string,\r\n  editorState: EditorState,\r\n  text: string,\r\n  textAlignment: DraftTextAlignment,\r\n};\r\n\r\n/**\r\n * This component is responsible for rendering placeholder text for the\r\n * `DraftEditor` component.\r\n *\r\n * Override placeholder style via CSS.\r\n */\r\nclass DraftEditorPlaceholder extends React.Component<Props> {\r\n  shouldComponentUpdate(nextProps: Props): boolean {\r\n    return (\r\n      this.props.text !== nextProps.text ||\r\n      this.props.editorState.getSelection().getHasFocus() !==\r\n        nextProps.editorState.getSelection().getHasFocus()\r\n    );\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const hasFocus = this.props.editorState.getSelection().getHasFocus();\r\n\r\n    const className = cx({\r\n      'public/DraftEditorPlaceholder/root': true,\r\n      'public/DraftEditorPlaceholder/hasFocus': hasFocus,\r\n    });\r\n\r\n    const contentStyle:any = {\r\n      whiteSpace: 'pre-wrap',\r\n    };\r\n\r\n    return (\r\n      <div className={className}>\r\n        <div\r\n          className={cx('public/DraftEditorPlaceholder/inner')}\r\n          id={this.props.accessibilityID}\r\n          style={contentStyle}>\r\n          {this.props.text}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  DraftEditorPlaceholder;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\nimport React, {KeyboardEvent} from 'react'\r\n\r\nimport  {DraftEditorCommand} from '../../model/constants/DraftEditorCommand';\r\n\r\nimport KeyBindingUtil from './KeyBindingUtil';\r\nimport Keys from 'fbjs/lib/Keys'\r\n\r\nimport UserAgent from 'fbjs/lib/UserAgent'\r\n\r\nconst isOSX = UserAgent.isPlatform('Mac OS X');\r\n\r\n// Firefox on OSX had a bug resulting in navigation instead of cursor movement.\r\n// This bug was fixed in Firefox 29. Feature detection is virtually impossible\r\n// so we just check the version number. See #342765.\r\nconst shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser('Firefox < 29');\r\n\r\nconst {hasCommandModifier, isCtrlKeyCommand} = KeyBindingUtil;\r\n\r\nfunction shouldRemoveWord(e: KeyboardEvent): boolean {\r\n  return (isOSX && e.altKey) || isCtrlKeyCommand(e);\r\n}\r\n\r\n/**\r\n * Get the appropriate undo/redo command for a Z key command.\r\n */\r\nfunction getZCommand(e: KeyboardEvent): DraftEditorCommand {\r\n  if (!hasCommandModifier(e)) {\r\n    return null;\r\n  }\r\n  return e.shiftKey ? 'redo' : 'undo';\r\n}\r\n\r\nfunction getDeleteCommand(e: KeyboardEvent): DraftEditorCommand {\r\n  // Allow default \"cut\" behavior for PCs on Shift + Delete.\r\n  if (!isOSX && e.shiftKey) {\r\n    return null;\r\n  }\r\n  return shouldRemoveWord(e) ? 'delete-word' : 'delete';\r\n}\r\n\r\nfunction getBackspaceCommand(e: KeyboardEvent): DraftEditorCommand {\r\n  if (hasCommandModifier(e) && isOSX) {\r\n    return 'backspace-to-start-of-line';\r\n  }\r\n  return shouldRemoveWord(e) ? 'backspace-word' : 'backspace';\r\n}\r\n\r\n/**\r\n * Retrieve a bound key command for the given event.\r\n */\r\nfunction getDefaultKeyBinding(\r\n  e: KeyboardEvent,\r\n): DraftEditorCommand {\r\n  switch (e.keyCode) {\r\n    case 66: // B\r\n      return hasCommandModifier(e) ? 'bold' : null;\r\n    case 68: // D\r\n      return isCtrlKeyCommand(e) ? 'delete' : null;\r\n    case 72: // H\r\n      return isCtrlKeyCommand(e) ? 'backspace' : null;\r\n    case 73: // I\r\n      return hasCommandModifier(e) ? 'italic' : null;\r\n    case 74: // J\r\n      return hasCommandModifier(e) ? 'code' : null;\r\n    case 75: // K\r\n      return isOSX && isCtrlKeyCommand(e) ? 'secondary-cut' : null;\r\n    case 77: // M\r\n      return isCtrlKeyCommand(e) ? 'split-block' : null;\r\n    case 79: // O\r\n      return isCtrlKeyCommand(e) ? 'split-block' : null;\r\n    case 84: // T\r\n      return isOSX && isCtrlKeyCommand(e) ? 'transpose-characters' : null;\r\n    case 85: // U\r\n      return hasCommandModifier(e) ? 'underline' : null;\r\n    case 87: // W\r\n      return isOSX && isCtrlKeyCommand(e) ? 'backspace-word' : null;\r\n    case 89: // Y\r\n      if (isCtrlKeyCommand(e)) {\r\n        return isOSX ? 'secondary-paste' : 'redo';\r\n      }\r\n      return null;\r\n    case 90: // Z\r\n      return getZCommand(e) || null;\r\n    case Keys.RETURN:\r\n      return 'split-block';\r\n    case Keys.DELETE:\r\n      return getDeleteCommand(e);\r\n    case Keys.BACKSPACE:\r\n      return getBackspaceCommand(e);\r\n    // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.\r\n    case Keys.LEFT:\r\n      return shouldFixFirefoxMovement && hasCommandModifier(e)\r\n        ? 'move-selection-to-start-of-block'\r\n        : null;\r\n    case Keys.RIGHT:\r\n      return shouldFixFirefoxMovement && hasCommandModifier(e)\r\n        ? 'move-selection-to-end-of-block'\r\n        : null;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default  getDefaultKeyBinding;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @preventMunge\r\n * @emails oncall+draft_js\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { BlockMap } from \"../../model/immutable/BlockMap\";\r\nimport { DraftEditorModes } from \"../handlers/DraftEditorModes\";\r\nimport { DraftEditorDefaultProps, DraftEditorProps } from \"./DraftEditorProps\";\r\nimport { DraftScrollPosition } from \"./DraftScrollPosition\";\r\n\r\nimport DefaultDraftBlockRenderMap from \"../../model/immutable/DefaultDraftBlockRenderMap\";\r\nimport DefaultDraftInlineStyle from \"../../model/immutable/DefaultDraftInlineStyle\";\r\nimport DraftEditorCompositionHandler from \"../handlers/composition/DraftEditorCompositionHandler\";\r\nimport DraftEditorContents from \"../../stubs/DraftEditorContents.react\";\r\nimport DraftEditorDragHandler from \"../handlers/drag/DraftEditorDragHandler\";\r\nimport DraftEditorEditHandler from \"../handlers/edit/DraftEditorEditHandler\";\r\nimport DraftEditorPlaceholder from \"./DraftEditorPlaceholder.react\";\r\nimport DraftEffects from \"../../stubs/DraftEffects\";\r\nimport EditorState from \"../../model/immutable/EditorState\";\r\nimport React, { ReactNode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Scroll from \"fbjs/lib/Scroll\";\r\nimport Style from \"fbjs/lib/Style\";\r\nimport UserAgent from \"fbjs/lib/UserAgent\";\r\n\r\nimport cx from \"fbjs/lib/cx\";\r\nimport generateRandomKey from \"../../model/keys/generateRandomKey\";\r\nimport getDefaultKeyBinding from \"../utils/getDefaultKeyBinding\";\r\nimport getScrollPosition from \"fbjs/lib/getScrollPosition\";\r\nimport gkx from \"../../stubs/gkx\";\r\nimport invariant from \"fbjs/lib/invariant\";\r\nimport isHTMLElement from \"../utils/isHTMLElement\";\r\nimport nullthrows from \"fbjs/lib/nullthrows\";\r\n\r\nconst isIE = UserAgent.isBrowser(\"IE\");\r\n\r\n// IE does not support the `input` event on contentEditable, so we can't\r\n// observe spellcheck behavior.\r\nconst allowSpellCheck = !isIE;\r\n\r\n// Define a set of handler objects to correspond to each possible `mode`\r\n// of editor behavior.\r\nconst handlerMap = {\r\n    edit: DraftEditorEditHandler,\r\n    composite: DraftEditorCompositionHandler,\r\n    drag: DraftEditorDragHandler,\r\n    cut: null,\r\n    render: null\r\n};\r\n\r\ntype State = {\r\n    contentsKey: number;\r\n};\r\n\r\nlet didInitODS = false;\r\n\r\nclass UpdateDraftEditorFlags extends React.Component<{\r\n    editor: DraftEditor;\r\n    editorState: EditorState;\r\n}> {\r\n    render(): ReactNode {\r\n        return null;\r\n    }\r\n    componentDidMount(): void {\r\n        this._update();\r\n    }\r\n    componentDidUpdate(): void {\r\n        this._update();\r\n    }\r\n    _update() {\r\n        const editor = this.props.editor;\r\n        /**\r\n         * Sometimes a render triggers a 'focus' or other event, and that will\r\n         * schedule a second render pass.\r\n         * In order to make sure the second render pass gets the latest editor\r\n         * state, we updat e it here.\r\n         * Example:\r\n         * render #1\r\n         * +\r\n         * |\r\n         * | cWU -> Nothing ... latestEditorState = STALE_STATE :(\r\n         * |\r\n         * | render -> this.props.editorState = FRESH_STATE\r\n         * | +         *and* set latestEditorState = FRESH_STATE\r\n         *   |\r\n         * | |\r\n         * | +--> triggers 'focus' event, calling 'handleFocus' with latestEditorState\r\n         * |                                                +\r\n         * |                                                |\r\n         * +>cdU -> latestEditorState = FRESH_STATE         | the 'handleFocus' call schedules render #2\r\n         *                                                  | with latestEditorState, which is FRESH_STATE\r\n         *                                                  |\r\n         * render #2 <--------------------------------------+\r\n         * +\r\n         * |\r\n         * | cwU -> nothing updates\r\n         * |\r\n         * | render -> this.props.editorState = FRESH_STATE which was passed in above\r\n         * |\r\n         * +>cdU fires and resets latestEditorState = FRESH_STATE\r\n         * ---\r\n         * Note that if we don't set latestEditorState in 'render' in the above\r\n         * diagram, then STALE_STATE gets passed to render #2.\r\n         */\r\n        editor._latestEditorState = this.props.editorState;\r\n\r\n        /**\r\n         * The reason we set this 'blockSelectEvents' flag is that  IE will fire a\r\n         * 'selectionChange' event when we programmatically change the selection,\r\n         * meaning it would trigger a new select event while we are in the middle\r\n         * of updating.\r\n         * We found that the 'selection.addRange' was what triggered the stray\r\n         * selectionchange event in IE.\r\n         * To be clear - we have not been able to reproduce specific bugs related\r\n         * to this stray selection event, but have recorded logs that some\r\n         * conditions do cause it to get bumped into during editOnSelect.\r\n         */\r\n        editor._blockSelectEvents = true;\r\n    }\r\n}\r\n\r\n/**\r\n * `DraftEditor` is the root editor component. It composes a `contentEditable`\r\n * div, and provides a wide variety of useful function props for managing the\r\n * state of the editor. See `DraftEditorProps` for details.\r\n */\r\nclass DraftEditor extends React.Component<DraftEditorProps, State> {\r\n    static defaultProps: DraftEditorDefaultProps = {\r\n        blockRenderMap: DefaultDraftBlockRenderMap,\r\n        blockRendererFn: function() {\r\n            return null;\r\n        },\r\n        blockStyleFn: function() {\r\n            return \"\";\r\n        },\r\n        keyBindingFn: getDefaultKeyBinding as any,\r\n        readOnly: false,\r\n        spellCheck: false,\r\n        stripPastedStyles: false\r\n    };\r\n\r\n    _blockSelectEvents: boolean;\r\n    _clipboard: BlockMap;\r\n    _handler: Object;\r\n    _dragCount: number;\r\n    _internalDrag: boolean;\r\n    _editorKey: string;\r\n    _placeholderAccessibilityID: string;\r\n    _latestEditorState: EditorState;\r\n    _latestCommittedEditorState: EditorState;\r\n    _pendingStateFromBeforeInput: void | EditorState;\r\n\r\n    /**\r\n     * Define proxies that can route events to the current handler.\r\n     */\r\n    _onBeforeInput: Function;\r\n    _onBlur: Function;\r\n    _onCharacterData: Function;\r\n    _onCompositionEnd: Function;\r\n    _onCompositionStart: Function;\r\n    _onCopy: Function;\r\n    _onCut: Function;\r\n    _onDragEnd: Function;\r\n    _onDragOver: Function;\r\n    _onDragStart: Function;\r\n    _onDrop: Function;\r\n    _onInput: Function;\r\n    _onFocus: Function;\r\n    _onKeyDown: Function;\r\n    _onKeyPress: Function;\r\n    _onKeyUp: Function;\r\n    _onMouseDown: Function;\r\n    _onMouseUp: Function;\r\n    _onPaste: Function;\r\n    _onSelect: Function;\r\n\r\n    editor: HTMLElement;\r\n    editorContainer: HTMLElement;\r\n    // focus: () => void;\r\n    // blur: () => void;\r\n    //setMode: (mode: DraftEditorModes) => void;\r\n    // exitCurrentMode: () => void;\r\n    // restoreEditorDOM: (scrollPosition?: DraftScrollPosition) => void;\r\n    // setClipboard: (clipboard: ?BlockMap) => void;\r\n    // getClipboard: () => ?BlockMap;\r\n    getEditorKey: () => string;\r\n    // updat e: (editorState: EditorState) => void;\r\n    // onDragEnter: () => void;\r\n    // onDragLeave: () => void;\r\n\r\n    constructor(props: DraftEditorProps) {\r\n        super(props);\r\n\r\n        this._blockSelectEvents = false;\r\n        this._clipboard = null;\r\n        this._handler = null;\r\n        this._dragCount = 0;\r\n        this._editorKey = props.editorKey || generateRandomKey();\r\n        this._placeholderAccessibilityID = \"placeholder-\" + this._editorKey;\r\n        this._latestEditorState = props.editorState;\r\n        this._latestCommittedEditorState = props.editorState;\r\n\r\n        this._onBeforeInput = this._buildHandler(\"onBeforeInput\");\r\n        this._onBlur = this._buildHandler(\"onBlur\");\r\n        this._onCharacterData = this._buildHandler(\"onCharacterData\");\r\n        this._onCompositionEnd = this._buildHandler(\"onCompositionEnd\");\r\n        this._onCompositionStart = this._buildHandler(\"onCompositionStart\");\r\n        this._onCopy = this._buildHandler(\"onCopy\");\r\n        this._onCut = this._buildHandler(\"onCut\");\r\n        this._onDragEnd = this._buildHandler(\"onDragEnd\");\r\n        this._onDragOver = this._buildHandler(\"onDragOver\");\r\n        this._onDragStart = this._buildHandler(\"onDragStart\");\r\n        this._onDrop = this._buildHandler(\"onDrop\");\r\n        this._onInput = this._buildHandler(\"onInput\");\r\n        this._onFocus = this._buildHandler(\"onFocus\");\r\n        this._onKeyDown = this._buildHandler(\"onKeyDown\");\r\n        this._onKeyPress = this._buildHandler(\"onKeyPress\");\r\n        this._onKeyUp = this._buildHandler(\"onKeyUp\");\r\n        this._onMouseDown = this._buildHandler(\"onMouseDown\");\r\n        this._onMouseUp = this._buildHandler(\"onMouseUp\");\r\n        this._onPaste = this._buildHandler(\"onPaste\");\r\n        this._onSelect = this._buildHandler(\"onSelect\");\r\n\r\n        this.getEditorKey = () => this._editorKey;\r\n\r\n        if (window[\"__DEV__\"]) {\r\n            [\"onDownArrow\", \"onEscape\", \"onLeftArrow\", \"onRightArrow\", \"onTab\", \"onUpArrow\"].forEach(propName => {\r\n                if (props.hasOwnProperty(propName)) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.warn(\r\n                        `Supplying an \\`${propName}\\` prop to \\`DraftEditor\\` has ` +\r\n                            \"been deprecated. If your handler needs access to the keyboard \" +\r\n                            \"event, supply a custom `keyBindingFn` prop that falls back to \" +\r\n                            \"the default one (eg. https://is.gd/RG31RJ).\"\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // See `restoreEditorDOM()`.\r\n        this.state = { contentsKey: 0 };\r\n    }\r\n\r\n    /**\r\n     * Build a method that will pass the event to the specified handler method.\r\n     * This allows us to look up the correct handler function for the current\r\n     * editor mode, if any has been specified.\r\n     */\r\n    _buildHandler(eventName: string): Function {\r\n        const flushControlled: (fn: Function) => void =\r\n            /* $FlowFixMe(>=0.79.1 site=www) This comment suppresses an error found\r\n             * when Flow v0.79 was deployed. To see the error delete this comment and\r\n             * run Flow. */\r\n            // @ts-ignore\r\n            ReactDOM.unstable_flushControlled;\r\n        // Wrap event handlers in `flushControlled`. In sync mode, this is\r\n        // effectively a no-op. In async mode, this ensures all updates scheduled\r\n        // inside the handler are flushed before React yields to the browser.\r\n        return e => {\r\n            if (!this.props.readOnly) {\r\n                const method = this._handler && this._handler[eventName];\r\n                if (method) {\r\n                    if (flushControlled) {\r\n                        flushControlled(() => method(this, e));\r\n                    } else {\r\n                        method(this, e);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    _showPlaceholder(): boolean {\r\n        return !!this.props.placeholder && !this.props.editorState.isInCompositionMode() && !this.props.editorState.getCurrentContent().hasText();\r\n    }\r\n\r\n    _renderPlaceholder(): ReactNode {\r\n        if (this._showPlaceholder()) {\r\n            const placeHolderProps = {\r\n                text: nullthrows(this.props.placeholder),\r\n                editorState: this.props.editorState,\r\n                textAlignment: this.props.textAlignment,\r\n                accessibilityID: this._placeholderAccessibilityID\r\n            };\r\n\r\n            /* $FlowFixMe(>=0.112.0 site=mobile) This comment suppresses an error\r\n             * found when Flow v0.112 was deployed. To see the error delete this\r\n             * comment and run Flow. */\r\n            /* $FlowFixMe(>=0.112.0 site=www) This comment suppresses an error found\r\n             * when Flow v0.112 was deployed. To see the error delete this comment\r\n             * and run Flow. */\r\n            /* $FlowFixMe(>=0.112.0 site=www,mobile) This comment suppresses an error\r\n             * found when Flow v0.112 was deployed. To see the error delete this\r\n             * comment and run Flow. */\r\n            // @ts-ignore\r\n            return <DraftEditorPlaceholder {...placeHolderProps} />;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { blockRenderMap, blockRendererFn, blockStyleFn, customStyleFn, customStyleMap, editorState, readOnly, textAlignment, textDirectionality } = this.props;\r\n        console.log('ffffffffffffff')\r\n        const rootClass = cx({\r\n            \"DraftEditor/root\": true,\r\n            \"DraftEditor/alignLeft\": textAlignment === \"left\",\r\n            \"DraftEditor/alignRight\": textAlignment === \"right\",\r\n            \"DraftEditor/alignCenter\": textAlignment === \"center\"\r\n        });\r\n\r\n        const contentStyle = {\r\n            outline: \"none\",\r\n            // fix parent-draggable Safari bug. #1326\r\n            userSelect: \"text\",\r\n            WebkitUserSelect: \"text\",\r\n            whiteSpace: \"pre-wrap\",\r\n            wordWrap: \"break-word\"\r\n        };\r\n\r\n        // The aria-expanded and aria-haspopup properties should only be rendered\r\n        // for a combobox.\r\n        /* $FlowFixMe(>=0.68.0 site=www,mobile) This comment suppresses an error\r\n         * found when Flow v0.68 was deployed. To see the error delete this comment\r\n         * and run Flow. */\r\n        const ariaRole = (this.props as any).role || \"textbox\";\r\n        const ariaExpanded = ariaRole === \"combobox\" ? !!this.props.ariaExpanded : null;\r\n\r\n        const editorContentsProps = {\r\n            blockRenderMap,\r\n            blockRendererFn,\r\n            blockStyleFn,\r\n            customStyleMap: {\r\n                ...DefaultDraftInlineStyle,\r\n                ...customStyleMap\r\n            },\r\n            customStyleFn,\r\n            editorKey: this._editorKey,\r\n            editorState,\r\n            textDirectionality\r\n        };\r\n\r\n        return (\r\n            <div className={rootClass}>\r\n                {this._renderPlaceholder()}\r\n                <div className={cx(\"DraftEditor/editorContainer\")} ref={ref => (this.editorContainer = ref)}>\r\n                    <div\r\n                        aria-activedescendant={readOnly ? null : this.props.ariaActiveDescendantID}\r\n                        aria-autocomplete={(readOnly ? null : this.props.ariaAutoComplete) as any}\r\n                        aria-controls={readOnly ? null : this.props.ariaControls}\r\n                        aria-describedby={this.props.ariaDescribedBy || this._placeholderAccessibilityID}\r\n                        aria-expanded={readOnly ? null : ariaExpanded}\r\n                        aria-label={this.props.ariaLabel}\r\n                        aria-labelledby={this.props.ariaLabelledBy}\r\n                        aria-multiline={this.props.ariaMultiline}\r\n                        aria-owns={readOnly ? null : this.props.ariaOwneeID}\r\n                        autoCapitalize={this.props.autoCapitalize}\r\n                        // autoComplete={this.props.autoComplete}\r\n                        autoCorrect={this.props.autoCorrect}\r\n                        className={cx({\r\n                            // Chrome's built-in translation feature mutates the DOM in ways\r\n                            // that Draft doesn't expect (ex: adding <font> tags inside\r\n                            // DraftEditorLeaf spans) and causes problems. We add notranslate\r\n                            // here which makes its autotranslation skip over this subtree.\r\n                            notranslate: !readOnly,\r\n                            \"public/DraftEditor/content\": true\r\n                        })}\r\n                        contentEditable={!readOnly}\r\n                        data-testid={this.props.webDriverTestID}\r\n                        onBeforeInput={this._onBeforeInput as any}\r\n                        onBlur={this._onBlur as any}\r\n                        onCompositionEnd={this._onCompositionEnd as any}\r\n                        onCompositionStart={this._onCompositionStart as any}\r\n                        onCopy={this._onCopy as any}\r\n                        onCut={this._onCut as any}\r\n                        onDragEnd={this._onDragEnd as any}\r\n                        onDragEnter={this.onDragEnter}\r\n                        onDragLeave={this.onDragLeave}\r\n                        onDragOver={this._onDragOver as any}\r\n                        onDragStart={this._onDragStart as any}\r\n                        onDrop={this._onDrop as any}\r\n                        onFocus={this._onFocus as any}\r\n                        onInput={this._onInput as any}\r\n                        onKeyDown={this._onKeyDown as any}\r\n                        onKeyPress={this._onKeyPress as any}\r\n                        onKeyUp={this._onKeyUp as any}\r\n                        onMouseUp={this._onMouseUp as any}\r\n                        onPaste={this._onPaste as any}\r\n                        onSelect={this._onSelect as any}\r\n                        ref={ref => (this.editor = ref)}\r\n                        role={readOnly ? null : ariaRole}\r\n                        spellCheck={allowSpellCheck && this.props.spellCheck}\r\n                        style={contentStyle as any}\r\n                        suppressContentEditableWarning\r\n                        tabIndex={this.props.tabIndex}\r\n                    >\r\n                        {/*\r\n              Needs to come earlier in the tree as a sibling (not ancestor) of\r\n              all DraftEditorLeaf nodes so it's first in postorder traversal.\r\n            */}\r\n                        <UpdateDraftEditorFlags editor={this} editorState={editorState} />\r\n                        <DraftEditorContents {...editorContentsProps} key={\"contents\" + this.state.contentsKey} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this._blockSelectEvents = false;\r\n        if (!didInitODS && gkx(\"draft_ods_enabled\")) {\r\n            didInitODS = true;\r\n            DraftEffects.initODS();\r\n        }\r\n        this.setMode(\"edit\");\r\n\r\n        /**\r\n         * IE has a hardcoded \"feature\" that attempts to convert link text into\r\n         * anchors in contentEditable DOM. This breaks the editor's expectations of\r\n         * the DOM, and control is lost. Disable it to make IE behave.\r\n         * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/\r\n         * ie9-beta-minor-change-list.aspx\r\n         */\r\n        if (isIE) {\r\n            // editor can be null after mounting\r\n            // https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback\r\n            if (!this.editor) {\r\n                global[\"execCommand\"](\"AutoUrlDetect\", false, false);\r\n            } else {\r\n                this.editor.ownerDocument[\"execCommand\"](\"AutoUrlDetect\", false, false as any);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        this._blockSelectEvents = false;\r\n        this._latestEditorState = this.props.editorState;\r\n        this._latestCommittedEditorState = this.props.editorState;\r\n    }\r\n\r\n    /**\r\n     * Used via `this.focus()`.\r\n     *\r\n     * Force focus back onto the editor node.\r\n     *\r\n     * We attempt to preserve scroll position when focusing. You can also pass\r\n     * a specified scroll position (for cases like `cut` behavior where it should\r\n     * be restored to a known position).\r\n     */\r\n    focus: (scrollPosition?: DraftScrollPosition) => void = (scrollPosition?: DraftScrollPosition): void => {\r\n        const { editorState } = this.props;\r\n        const alreadyHasFocus = editorState.getSelection().getHasFocus();\r\n        const editorNode = this.editor;\r\n\r\n        if (!editorNode) {\r\n            // once in a while people call 'focus' in a setTimeout, and the node has\r\n            // been deleted, so it can be null in that case.\r\n            return;\r\n        }\r\n\r\n        const scrollParent = Style.getScrollParent(editorNode);\r\n        const { x, y } = scrollPosition || getScrollPosition(scrollParent);\r\n\r\n        invariant(isHTMLElement(editorNode), \"editorNode is not an HTMLElement\");\r\n\r\n        editorNode.focus();\r\n\r\n        // Restore scroll position\r\n        if (scrollParent === window) {\r\n            window.scrollTo(x, y);\r\n        } else {\r\n            Scroll.setTop(scrollParent, y);\r\n        }\r\n\r\n        // On Chrome and Safari, calling focus on contenteditable focuses the\r\n        // cursor at the first character. This is something you don't expect when\r\n        // you're clicking on an input element but not directly on a character.\r\n        // Put the cursor back where it was before the blur.\r\n        if (!alreadyHasFocus) {\r\n            this.update(EditorState.forceSelection(editorState, editorState.getSelection()));\r\n        }\r\n    };\r\n\r\n    blur: () => void = (): void => {\r\n        const editorNode = this.editor;\r\n        if (!editorNode) {\r\n            return;\r\n        }\r\n        invariant(isHTMLElement(editorNode), \"editorNode is not an HTMLElement\");\r\n        editorNode.blur();\r\n    };\r\n\r\n    /**\r\n     * Used via `this.setMode(...)`.\r\n     *\r\n     * Set the behavior mode for the editor component. This switches the current\r\n     * handler module to ensure that DOM events are managed appropriately for\r\n     * the active mode.\r\n     */\r\n    setMode = (mode: DraftEditorModes): void => {\r\n        const { onPaste, onCut, onCopy } = this.props;\r\n        const editHandler = { ...handlerMap.edit };\r\n\r\n        if (onPaste) {\r\n            /* $FlowFixMe(>=0.111.0) This comment suppresses an error found when Flow\r\n             * v0.111.0 was deployed. To see the error, delete this comment and run\r\n             * Flow. */\r\n            editHandler.onPaste = onPaste;\r\n        }\r\n\r\n        if (onCut) {\r\n            editHandler.onCut = onCut;\r\n        }\r\n\r\n        if (onCopy) {\r\n            editHandler.onCopy = onCopy;\r\n        }\r\n\r\n        const handler = {\r\n            ...handlerMap,\r\n            edit: editHandler\r\n        };\r\n        this._handler = handler[mode];\r\n    };\r\n\r\n    exitCurrentMode: () => void = (): void => {\r\n        this.setMode(\"edit\");\r\n    };\r\n\r\n    /**\r\n     * Used via `this.restoreEditorDOM()`.\r\n     *\r\n     * Force a complete re-render of the DraftEditorContents based on the current\r\n     * EditorState. This is useful when we know we are going to lose control of\r\n     * the DOM state (cut command, IME) and we want to make sure that\r\n     * reconciliation occurs on a version of the DOM that is synchronized with\r\n     * our EditorState.\r\n     */\r\n    restoreEditorDOM: (scrollPosition?: DraftScrollPosition) => void = (scrollPosition?: DraftScrollPosition): void => {\r\n        this.setState({ contentsKey: this.state.contentsKey + 1 }, () => {\r\n            this.focus(scrollPosition);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Used via `this.setClipboard(...)`.\r\n     *\r\n     * Set the clipboard state for a cut/copy event.\r\n     */\r\n    setClipboard = (clipboard: BlockMap): void => {\r\n        this._clipboard = clipboard;\r\n    };\r\n\r\n    /**\r\n     * Used via `this.getClipboard()`.\r\n     *\r\n     * Retrieve the clipboard state for a cut/copy event.\r\n     */\r\n    getClipboard: () => BlockMap = (): BlockMap => {\r\n        return this._clipboard;\r\n    };\r\n\r\n    /**\r\n     * Used via `this.updat e(...)`.\r\n     *\r\n     * Propagate a new `EditorState` object to higher-level components. This is\r\n     * the method by which event handlers inform the `DraftEditor` component of\r\n     * state changes. A component that composes a `DraftEditor` **must** provide\r\n     * an `onChange` prop to receive state updates passed along from this\r\n     * function.\r\n     */\r\n    update = (editorState: EditorState) => {\r\n        this._latestEditorState = editorState;\r\n        this.props.onChange(editorState);\r\n    };\r\n\r\n    /**\r\n     * Used in conjunction with `onDragLeave()`, by counting the number of times\r\n     * a dragged element enters and leaves the editor (or any of its children),\r\n     * to determine when the dragged element absolutely leaves the editor.\r\n     */\r\n    onDragEnter: () => void = (): void => {\r\n        this._dragCount++;\r\n    };\r\n\r\n    /**\r\n     * See `onDragEnter()`.\r\n     */\r\n    onDragLeave: () => void = (): void => {\r\n        this._dragCount--;\r\n        if (this._dragCount === 0) {\r\n            this.exitCurrentMode();\r\n        }\r\n    };\r\n}\r\n\r\nexport default DraftEditor;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nconst DraftStringKey = {\r\n  stringify: function(key: string): string {\r\n    return '_' + String(key);\r\n  },\r\n\r\n  unstringify: function(key: string): string {\r\n    return key.slice(1);\r\n  },\r\n};\r\n\r\nexport default  DraftStringKey;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  {EntityRange} from './EntityRange';\r\n\r\nimport DraftStringKey  from './DraftStringKey';\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nconst {strlen} = UnicodeUtils;\r\n\r\n/**\r\n * Convert to UTF-8 character counts for storage.\r\n */\r\nfunction encodeEntityRanges(\r\n  block: BlockNodeRecord,\r\n  storageMap: Object,\r\n): Array<EntityRange> {\r\n  const encoded = [];\r\n  block.findEntityRanges(\r\n    character => !!character.getEntity(),\r\n    (/*number*/ start, /*number*/ end) => {\r\n      const text = block.getText();\r\n      const key = block.getEntityAt(start);\r\n      encoded.push({\r\n        offset: strlen(text.slice(0, start)),\r\n        length: strlen(text.slice(start, end)),\r\n        // Encode the key as a number for range storage.\r\n        key: Number(storageMap[DraftStringKey.stringify(key)]),\r\n      });\r\n    },\r\n  );\r\n  return encoded;\r\n}\r\n\r\nexport default  encodeEntityRanges;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport  {DraftInlineStyle} from '../immutable/DraftInlineStyle';\r\nimport  {InlineStyleRange} from './InlineStyleRange';\r\nimport  {List} from 'immutable';\r\n\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nimport findRangesImmutable from '../immutable/findRangesImmutable';\r\n\r\nconst areEqual = (a, b) => a === b;\r\nconst isTruthy = a => !!a;\r\nconst EMPTY_ARRAY = [];\r\n\r\n/**\r\n * Helper function for getting encoded styles for each inline style. Convert\r\n * to UTF-8 character counts for storage.\r\n */\r\nfunction getEncodedInlinesForType(\r\n  block: BlockNodeRecord,\r\n  styleList: List<DraftInlineStyle>,\r\n  styleToEncode: string,\r\n): Array<InlineStyleRange> {\r\n  const ranges = [];\r\n\r\n  // Obtain an array with ranges for only the specified style.\r\n  const filteredInlines = styleList\r\n    .map(style => style.has(styleToEncode))\r\n    .toList();\r\n\r\n  findRangesImmutable(\r\n    filteredInlines,\r\n    areEqual,\r\n    // We only want to keep ranges with nonzero style values.\r\n    isTruthy,\r\n    (start, end) => {\r\n      const text = block.getText();\r\n      ranges.push({\r\n        offset: UnicodeUtils.strlen(text.slice(0, start)),\r\n        length: UnicodeUtils.strlen(text.slice(start, end)),\r\n        style: styleToEncode,\r\n      });\r\n    },\r\n  );\r\n\r\n  return ranges;\r\n}\r\n\r\n/*\r\n * Retrieve the encoded arrays of inline styles, with each individual style\r\n * treated separately.\r\n */\r\nfunction encodeInlineStyleRanges(\r\n  block: BlockNodeRecord,\r\n): Array<InlineStyleRange> {\r\n  const styleList = block\r\n    .getCharacterList()\r\n    .map(c => c.getStyle())\r\n    .toList();\r\n  const ranges = styleList\r\n    .flatten()\r\n    .toSet()\r\n    .map(style => getEncodedInlinesForType(block, styleList, style));\r\n\r\n  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\r\n}\r\n\r\nexport default  encodeInlineStyleRanges;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockNodeRecord} from '../immutable/BlockNodeRecord';\r\nimport ContentState from '../immutable/ContentState';\r\nimport  {RawDraftContentBlock} from './RawDraftContentBlock';\r\nimport  {RawDraftContentState} from './RawDraftContentState';\r\n\r\nimport ContentBlock from '../immutable/ContentBlock';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\nimport DraftStringKey from './DraftStringKey';\r\n\r\nimport encodeEntityRanges from './encodeEntityRanges';\r\nimport encodeInlineStyleRanges from './encodeInlineStyleRanges';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst createRawBlock = (block: BlockNodeRecord, entityStorageMap: any) => {\r\n  return {\r\n    key: block.getKey(),\r\n    text: block.getText(),\r\n    type: block.getType(),\r\n    depth: block.getDepth(),\r\n    inlineStyleRanges: encodeInlineStyleRanges(block),\r\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\r\n    data: block.getData().toObject(),\r\n  };\r\n};\r\n\r\nconst insertRawBlock = (\r\n  block: BlockNodeRecord,\r\n  entityMap: any,\r\n  rawBlocks: Array<RawDraftContentBlock>,\r\n  blockCacheRef: any,\r\n) => {\r\n  if (block instanceof ContentBlock) {\r\n    rawBlocks.push(createRawBlock(block, entityMap));\r\n    return;\r\n  }\r\n\r\n  invariant(block instanceof ContentBlockNode, 'block is not a BlockNode');\r\n\r\n  const parentKey = (block as ContentBlockNode).getParentKey();\r\n  const rawBlock = (blockCacheRef[block.getKey()] = {\r\n    ...createRawBlock(block, entityMap),\r\n    children: [],\r\n  });\r\n\r\n  if (parentKey) {\r\n    blockCacheRef[parentKey].children.push(rawBlock);\r\n    return;\r\n  }\r\n\r\n  rawBlocks.push(rawBlock);\r\n};\r\n\r\nconst encodeRawBlocks = (\r\n  contentState: ContentState,\r\n  rawState: RawDraftContentState,\r\n): RawDraftContentState => {\r\n  const {entityMap} = rawState;\r\n\r\n  const rawBlocks = [];\r\n\r\n  const blockCacheRef = {};\r\n  const entityCacheRef = {};\r\n  let entityStorageKey = 0;\r\n\r\n  contentState.getBlockMap().forEach(block => {\r\n    block.findEntityRanges(\r\n      character => character.getEntity() !== null,\r\n      start => {\r\n        const entityKey = block.getEntityAt(start);\r\n        // Stringify to maintain order of otherwise numeric keys.\r\n        const stringifiedEntityKey = DraftStringKey.stringify(entityKey);\r\n        // This makes this function resilient to two entities\r\n        // erroneously having the same key\r\n        if (entityCacheRef[stringifiedEntityKey]) {\r\n          return;\r\n        }\r\n        entityCacheRef[stringifiedEntityKey] = entityKey;\r\n        // we need the `any` casting here since this is a temporary state\r\n        // where we will later on flip the entity map and populate it with\r\n        // real entity, at this stage we just need to map back the entity\r\n        // key used by the BlockNode\r\n        entityMap[stringifiedEntityKey] = `${entityStorageKey}` as any\r\n        entityStorageKey++;\r\n      },\r\n    );\r\n\r\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\r\n  });\r\n\r\n  return {\r\n    blocks: rawBlocks,\r\n    entityMap,\r\n  };\r\n};\r\n\r\n// Flip storage map so that our storage keys map to global\r\n// DraftEntity keys.\r\nconst encodeRawEntityMap = (\r\n  contentState: ContentState,\r\n  rawState: RawDraftContentState,\r\n): RawDraftContentState => {\r\n  const {blocks, entityMap} = rawState;\r\n\r\n  const rawEntityMap = {};\r\n\r\n  Object.keys(entityMap).forEach((key, index) => {\r\n    const entity = contentState.getEntity(DraftStringKey.unstringify(key));\r\n    rawEntityMap[index] = {\r\n      type: entity.getType(),\r\n      mutability: entity.getMutability(),\r\n      data: entity.getData(),\r\n    };\r\n  });\r\n\r\n  return {\r\n    blocks,\r\n    entityMap: rawEntityMap,\r\n  };\r\n};\r\n\r\nconst convertFromDraftStateToRaw = (\r\n  contentState: ContentState,\r\n): RawDraftContentState => {\r\n  let rawDraftContentState = {\r\n    entityMap: {},\r\n    blocks: [],\r\n  };\r\n\r\n  // add blocks\r\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\r\n\r\n  // add entities\r\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\r\n\r\n  return rawDraftContentState;\r\n};\r\n\r\nexport default  convertFromDraftStateToRaw;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\nimport {RawDraftContentBlock} from '../../../model/encoding/RawDraftContentBlock';\r\nimport  {RawDraftContentState} from '../../../model/encoding/RawDraftContentState';\r\n\r\nimport generateRandomKey from '../../../model/keys/generateRandomKey';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst traverseInDepthOrder = (\r\n  blocks: Array<RawDraftContentBlock>,\r\n  fn: (block: RawDraftContentBlock) => void,\r\n) => {\r\n  let stack = [...blocks].reverse();\r\n  while (stack.length) {\r\n    const block = stack.pop();\r\n\r\n    fn(block);\r\n\r\n    const children = block.children;\r\n\r\n    invariant(Array.isArray(children), 'Invalid tree raw block');\r\n\r\n    stack = stack.concat([...children.reverse()]);\r\n  }\r\n};\r\n\r\nconst isListBlock = (block?: RawDraftContentBlock): boolean => {\r\n  if (!(block && block.type)) {\r\n    return false;\r\n  }\r\n  const {type} = block;\r\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\r\n};\r\n\r\nconst addDepthToChildren = (block: RawDraftContentBlock) => {\r\n  if (Array.isArray(block.children)) {\r\n    block.children = block.children.map(child =>\r\n      child.type === block.type\r\n        ? {...child, depth: (block.depth || 0) + 1}\r\n        : child,\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This adapter is intended to be be used as an adapter to draft tree data\r\n *\r\n * draft state <=====> draft tree state\r\n */\r\nconst DraftTreeAdapter = {\r\n  /**\r\n   * Converts from a tree raw state back to draft raw state\r\n   */\r\n  fromRawTreeStateToRawState(\r\n    draftTreeState: RawDraftContentState,\r\n  ): RawDraftContentState {\r\n    const {blocks} = draftTreeState;\r\n    const transformedBlocks = [];\r\n\r\n    invariant(Array.isArray(blocks), 'Invalid raw state');\r\n\r\n    if (!Array.isArray(blocks) || !blocks.length) {\r\n      return draftTreeState;\r\n    }\r\n\r\n    traverseInDepthOrder(blocks, block => {\r\n      const newBlock = {\r\n        ...block,\r\n      };\r\n\r\n      if (isListBlock(block)) {\r\n        newBlock.depth = newBlock.depth || 0;\r\n        addDepthToChildren(block);\r\n\r\n        // if it's a non-leaf node, we don't do anything else\r\n        if (block.children != null && block.children.length > 0) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      delete newBlock.children;\r\n\r\n      transformedBlocks.push(newBlock);\r\n    });\r\n\r\n    draftTreeState.blocks = transformedBlocks;\r\n\r\n    return {\r\n      ...draftTreeState,\r\n      blocks: transformedBlocks,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Converts from draft raw state to tree draft state\r\n   */\r\n  fromRawStateToRawTreeState(\r\n    draftState: RawDraftContentState,\r\n  ): RawDraftContentState {\r\n    const transformedBlocks = [];\r\n    const parentStack = [];\r\n\r\n    draftState.blocks.forEach(block => {\r\n      const isList = isListBlock(block);\r\n      const depth = block.depth || 0;\r\n      const treeBlock = {\r\n        ...block,\r\n        children: [],\r\n      };\r\n\r\n      if (!isList) {\r\n        transformedBlocks.push(treeBlock);\r\n        return;\r\n      }\r\n\r\n      let lastParent = parentStack[0];\r\n      // block is non-nested & there are no nested blocks, directly push block\r\n      if (lastParent == null && depth === 0) {\r\n        transformedBlocks.push(treeBlock);\r\n        // block is first nested block or previous nested block is at a lower level\r\n      } else if (lastParent == null || lastParent.depth < depth - 1) {\r\n        // create new parent block\r\n        const newParent = {\r\n          key: generateRandomKey(),\r\n          text: '',\r\n          depth: depth - 1,\r\n          type: block.type,\r\n          children: [],\r\n          entityRanges: [],\r\n          inlineStyleRanges: [],\r\n        };\r\n\r\n        parentStack.unshift(newParent);\r\n        if (depth === 1) {\r\n          // add as a root-level block\r\n          transformedBlocks.push(newParent);\r\n        } else if (lastParent != null) {\r\n          // depth > 1 => also add as previous parent's child\r\n          lastParent.children.push(newParent);\r\n        }\r\n        newParent.children.push(treeBlock);\r\n      } else if (lastParent.depth === depth - 1) {\r\n        // add as child of last parent\r\n        lastParent.children.push(treeBlock);\r\n      } else {\r\n        // pop out parents at levels above this one from the parent stack\r\n        while (lastParent != null && lastParent.depth >= depth) {\r\n          parentStack.shift();\r\n          lastParent = parentStack[0];\r\n        }\r\n        if (depth > 0) {\r\n          lastParent.children.push(treeBlock);\r\n        } else {\r\n          transformedBlocks.push(treeBlock);\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      ...draftState,\r\n      blocks: transformedBlocks,\r\n    };\r\n  },\r\n};\r\n\r\nexport default  DraftTreeAdapter;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\nimport  {BlockMap} from '../../../model/immutable/BlockMap';\r\nimport  ContentBlockNode from '../../../model/immutable/ContentBlockNode';\r\n\r\nimport warning from 'fbjs/lib/warning';\r\n\r\nconst DraftTreeInvariants = {\r\n  /**\r\n   * Check if the block is valid\r\n   */\r\n  isValidBlock(block: ContentBlockNode, blockMap: BlockMap): boolean {\r\n    const key = block.getKey();\r\n    // is its parent's child\r\n    const parentKey = block.getParentKey();\r\n    if (parentKey != null) {\r\n      const parent:any = blockMap.get(parentKey);\r\n      if (!parent.getChildKeys().includes(key)) {\r\n        warning(true, 'Tree is missing parent -> child pointer on %s', key);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // is its children's parent\r\n    const children = block.getChildKeys().map(k => blockMap.get(k));\r\n    if (!children.every(c => c.getParentKey() === key)) {\r\n      warning(true, 'Tree is missing child -> parent pointer on %s', key);\r\n      return false;\r\n    }\r\n\r\n    // is its previous sibling's next sibling\r\n    const prevSiblingKey = block.getPrevSiblingKey();\r\n    if (prevSiblingKey != null) {\r\n      const prevSibling = blockMap.get(prevSiblingKey);\r\n      if (prevSibling.getNextSiblingKey() !== key) {\r\n        warning(\r\n          true,\r\n          \"Tree is missing nextSibling pointer on %s's prevSibling\",\r\n          key,\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // is its next sibling's previous sibling\r\n    const nextSiblingKey = block.getNextSiblingKey();\r\n    if (nextSiblingKey != null) {\r\n      const nextSibling = blockMap.get(nextSiblingKey);\r\n      if (nextSibling.getPrevSiblingKey() !== key) {\r\n        warning(\r\n          true,\r\n          \"Tree is missing prevSibling pointer on %s's nextSibling\",\r\n          key,\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // no 2-node cycles\r\n    if (nextSiblingKey !== null && prevSiblingKey !== null) {\r\n      if (prevSiblingKey === nextSiblingKey) {\r\n        warning(true, 'Tree has a two-node cycle at %s', key);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // if it's a leaf node, it has text but no children\r\n    if ((block as any).text != '') {\r\n      if (block.getChildKeys().size > 0) {\r\n        warning(true, 'Leaf node %s has children', key);\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Checks that this is a connected tree on all the blocks\r\n   * starting from the first block, traversing nextSibling and child pointers\r\n   * should be a tree (preorder traversal - parent, then children)\r\n   * num of connected node === number of blocks\r\n   */\r\n  isConnectedTree(blockMap: BlockMap): boolean {\r\n    // exactly one node has no previous sibling + no parent\r\n    const eligibleFirstNodes = blockMap\r\n      .toArray()\r\n      .filter(\r\n        block =>\r\n          block.getParentKey() == null && block.getPrevSiblingKey() == null,\r\n      );\r\n    if (eligibleFirstNodes.length !== 1) {\r\n      warning(true, 'Tree is not connected. More or less than one first node');\r\n      return false;\r\n    }\r\n    const firstNode = eligibleFirstNodes.shift();\r\n    let nodesSeen = 0;\r\n    let currentKey = firstNode.getKey();\r\n    const visitedStack = [];\r\n    while (currentKey != null) {\r\n      const currentNode:any = blockMap.get(currentKey);\r\n      const childKeys = currentNode.getChildKeys();\r\n      const nextSiblingKey = currentNode.getNextSiblingKey();\r\n      // if the node has children, add parent's next sibling to stack and go to children\r\n      if (childKeys.size > 0) {\r\n        if (nextSiblingKey != null) {\r\n          visitedStack.unshift(nextSiblingKey);\r\n        }\r\n        const children = childKeys.map(k => blockMap.get(k));\r\n        const firstNode = children.find(\r\n          block => block.getPrevSiblingKey() == null,\r\n        );\r\n        if (firstNode == null) {\r\n          warning(true, '%s has no first child', currentKey);\r\n          return false;\r\n        }\r\n        currentKey = firstNode.getKey();\r\n        // TODO(T32490138): Deal with multi-node cycles here\r\n      } else {\r\n        if (currentNode.getNextSiblingKey() != null) {\r\n          currentKey = currentNode.getNextSiblingKey();\r\n        } else {\r\n          currentKey = visitedStack.shift();\r\n        }\r\n      }\r\n      nodesSeen++;\r\n    }\r\n\r\n    if (nodesSeen !== blockMap.size) {\r\n      warning(\r\n        true,\r\n        'Tree is not connected. %s nodes were seen instead of %s',\r\n        nodesSeen,\r\n        blockMap.size,\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Checks that the block map is a connected tree with valid blocks\r\n   */\r\n  isValidTree(blockMap: BlockMap): boolean {\r\n    const blocks = blockMap.toArray();\r\n    if (!blocks.every(block => this.isValidBlock(block, blockMap))) {\r\n      return false;\r\n    }\r\n    return this.isConnectedTree(blockMap);\r\n  },\r\n};\r\n\r\nexport default  DraftTreeInvariants;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nconst {substr} = UnicodeUtils;\r\n\r\n/**\r\n * Convert to native JavaScript string lengths to determine ranges.\r\n */\r\nfunction decodeEntityRanges(\r\n  text: string,\r\n  ranges: Array<any>,\r\n): Array<string> {\r\n  const entities = Array(text.length).fill(null);\r\n  if (ranges) {\r\n    ranges.forEach(range => {\r\n      // Using Unicode-enabled substrings converted to JavaScript lengths,\r\n      // fill the output array with entity keys.\r\n      const start = substr(text, 0, range.offset).length;\r\n      const end = start + substr(text, range.offset, range.length).length;\r\n      for (let ii = start; ii < end; ii++) {\r\n        entities[ii] = range.key;\r\n      }\r\n    });\r\n  }\r\n  return entities;\r\n}\r\n\r\nexport default  decodeEntityRanges;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {DraftInlineStyle} from '../immutable/DraftInlineStyle';\r\nimport  {InlineStyleRange} from './InlineStyleRange';\r\n\r\nimport UnicodeUtils from 'fbjs/lib/UnicodeUtils';\r\n\r\nimport {OrderedSet} from 'immutable';\r\nconst {substr} = UnicodeUtils;\r\n\r\nconst EMPTY_SET = OrderedSet();\r\n\r\n/**\r\n * Convert to native JavaScript string lengths to determine ranges.\r\n */\r\nfunction decodeInlineStyleRanges(\r\n  text: string,\r\n  ranges?: Array<InlineStyleRange>,\r\n): Array<DraftInlineStyle> {\r\n  const styles = Array(text.length).fill(EMPTY_SET);\r\n  if (ranges) {\r\n    ranges.forEach(range => {\r\n      let cursor = substr(text, 0, range.offset).length;\r\n      const end = cursor + substr(text, range.offset, range.length).length;\r\n      while (cursor < end) {\r\n        styles[cursor] = styles[cursor].add(range.style);\r\n        cursor++;\r\n      }\r\n    });\r\n  }\r\n  return styles;\r\n}\r\n\r\nexport default  decodeInlineStyleRanges;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {BlockMap} from '../immutable/BlockMap';\r\nimport {BlockNodeConfig} from '../immutable/BlockNode';\r\nimport  CharacterMetadata from '../immutable/CharacterMetadata';\r\nimport  {RawDraftContentBlock} from './RawDraftContentBlock';\r\nimport  {RawDraftContentState} from './RawDraftContentState';\r\n\r\nimport ContentBlock from '../immutable/ContentBlock';\r\nimport ContentBlockNode from '../immutable/ContentBlockNode';\r\nimport ContentState from '../immutable/ContentState';\r\nimport DraftEntity from '../entity/DraftEntity';\r\nimport DraftTreeAdapter from '../../component/utils/exploration/DraftTreeAdapter';\r\nimport DraftTreeInvariants from '../../component/utils/exploration/DraftTreeInvariants';\r\nimport SelectionState from '../immutable/SelectionState';\r\n\r\nimport createCharacterList from './createCharacterList';\r\nimport decodeEntityRanges from './decodeEntityRanges';\r\nimport decodeInlineStyleRanges from './decodeInlineStyleRanges';\r\nimport generateRandomKey from '../keys/generateRandomKey';\r\nimport gkx from '../../stubs/gkx';\r\nimport {List, Map, OrderedMap} from 'immutable';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\nconst experimentalTreeDataSupport = gkx('draft_tree_data_support');\r\n\r\nconst decodeBlockNodeConfig = (\r\n  block: RawDraftContentBlock,\r\n  entityMap: any,\r\n): BlockNodeConfig => {\r\n  const {key, type, data, text, depth} = block;\r\n\r\n  const blockNodeConfig: BlockNodeConfig = {\r\n    text,\r\n    depth: depth || 0,\r\n    type: type || 'unstyled',\r\n    key: key || generateRandomKey(),\r\n    data: Map(data),\r\n    characterList: decodeCharacterList(block, entityMap),\r\n  };\r\n\r\n  return blockNodeConfig;\r\n};\r\n\r\nconst decodeCharacterList = (\r\n  block: RawDraftContentBlock,\r\n  entityMap: any,\r\n): List<CharacterMetadata> => {\r\n  const {\r\n    text,\r\n    entityRanges: rawEntityRanges,\r\n    inlineStyleRanges: rawInlineStyleRanges,\r\n  } = block;\r\n\r\n  const entityRanges = rawEntityRanges || [];\r\n  const inlineStyleRanges = rawInlineStyleRanges || [];\r\n\r\n  // Translate entity range keys to the DraftEntity map.\r\n  return createCharacterList(\r\n    decodeInlineStyleRanges(text, inlineStyleRanges),\r\n    decodeEntityRanges(\r\n      text,\r\n      entityRanges\r\n        .filter(range => entityMap.hasOwnProperty(range.key))\r\n        .map(range => ({...range, key: entityMap[range.key]})),\r\n    ),\r\n  );\r\n};\r\n\r\nconst addKeyIfMissing = (block: RawDraftContentBlock): RawDraftContentBlock => {\r\n  return {\r\n    ...block,\r\n    key: block.key || generateRandomKey(),\r\n  };\r\n};\r\n\r\n/**\r\n * Node stack is responsible to ensure we traverse the tree only once\r\n * in depth order, while also providing parent refs to inner nodes to\r\n * construct their links.\r\n */\r\nconst updateNodeStack = (\r\n  stack: Array<any>,\r\n  nodes: Array<any>,\r\n  parentRef: ContentBlockNode,\r\n): Array<any> => {\r\n  const nodesWithParentRef = nodes.map(block => {\r\n    return {\r\n      ...block,\r\n      parentRef,\r\n    };\r\n  });\r\n\r\n  // since we pop nodes from the stack we need to insert them in reverse\r\n  return stack.concat(nodesWithParentRef.reverse());\r\n};\r\n\r\n/**\r\n * This will build a tree draft content state by creating the node\r\n * reference links into a single tree walk. Each node has a link\r\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\r\n * blockMap will be created using depth ordering.\r\n */\r\nconst decodeContentBlockNodes = (\r\n  blocks: Array<RawDraftContentBlock>,\r\n  entityMap: any,\r\n): BlockMap => {\r\n  return (\r\n    blocks\r\n      // ensure children have valid keys to enable sibling links\r\n      .map(addKeyIfMissing)\r\n      .reduce(\r\n        (blockMap: BlockMap, block: RawDraftContentBlock, index: number) => {\r\n          invariant(\r\n            Array.isArray(block.children),\r\n            'invalid RawDraftContentBlock can not be converted to ContentBlockNode',\r\n          );\r\n\r\n          // ensure children have valid keys to enable sibling links\r\n          const children = block.children.map(addKeyIfMissing);\r\n\r\n          // root level nodes\r\n          const contentBlockNode = new ContentBlockNode({\r\n            ...decodeBlockNodeConfig(block, entityMap),\r\n            prevSibling: index === 0 ? null : blocks[index - 1].key,\r\n            nextSibling:\r\n              index === blocks.length - 1 ? null : blocks[index + 1].key,\r\n            children: List(children.map((child: any) => child.key)),\r\n          });\r\n\r\n          // push root node to blockMap\r\n          blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode);\r\n\r\n          // this stack is used to ensure we visit all nodes respecting depth ordering\r\n          let stack = updateNodeStack([], children, contentBlockNode);\r\n\r\n          // start computing children nodes\r\n          while (stack.length > 0) {\r\n            // we pop from the stack and start processing this node\r\n            const node: any = stack.pop();\r\n\r\n            // parentRef already points to a converted ContentBlockNode\r\n            const parentRef: ContentBlockNode = node.parentRef;\r\n            const siblings = parentRef.getChildKeys();\r\n            const index = siblings.indexOf(node.key);\r\n            const isValidBlock = Array.isArray(node.children);\r\n\r\n            if (!isValidBlock) {\r\n              invariant(\r\n                isValidBlock,\r\n                'invalid RawDraftContentBlock can not be converted to ContentBlockNode',\r\n              );\r\n              break;\r\n            }\r\n\r\n            // ensure children have valid keys to enable sibling links\r\n            const children = node.children.map(addKeyIfMissing);\r\n\r\n            const contentBlockNode = new ContentBlockNode({\r\n              ...decodeBlockNodeConfig(node, entityMap),\r\n              parent: parentRef.getKey(),\r\n              children: List(children.map((child: any) => child.key)),\r\n              prevSibling: index === 0 ? null : siblings.get(index - 1),\r\n              nextSibling:\r\n                index === siblings.size - 1 ? null : siblings.get(index + 1),\r\n            });\r\n\r\n            // push node to blockMap\r\n            blockMap = blockMap.set(\r\n              contentBlockNode.getKey(),\r\n              contentBlockNode,\r\n            );\r\n\r\n            // this stack is used to ensure we visit all nodes respecting depth ordering\r\n            stack = updateNodeStack(stack, children, contentBlockNode);\r\n          }\r\n\r\n          return blockMap;\r\n        },\r\n        OrderedMap(),\r\n      )\r\n  );\r\n};\r\n\r\nconst decodeContentBlocks = (\r\n  blocks: Array<RawDraftContentBlock>,\r\n  entityMap: any,\r\n): BlockMap => {\r\n  return OrderedMap(\r\n    blocks.map((block: RawDraftContentBlock) => {\r\n      const contentBlock = new ContentBlock(\r\n        decodeBlockNodeConfig(block, entityMap),\r\n      );\r\n      return [contentBlock.getKey(), contentBlock];\r\n    }),\r\n  );\r\n};\r\n\r\nconst decodeRawBlocks = (\r\n  rawState: RawDraftContentState,\r\n  entityMap: any,\r\n): BlockMap => {\r\n  const isTreeRawBlock = rawState.blocks.find(\r\n    block => Array.isArray(block.children) && block.children.length > 0,\r\n  );\r\n  const rawBlocks =\r\n    experimentalTreeDataSupport && !isTreeRawBlock\r\n      ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks\r\n      : rawState.blocks;\r\n\r\n  if (!experimentalTreeDataSupport) {\r\n    return decodeContentBlocks(\r\n      isTreeRawBlock\r\n        ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks\r\n        : rawBlocks,\r\n      entityMap,\r\n    );\r\n  }\r\n\r\n  const blockMap = decodeContentBlockNodes(rawBlocks, entityMap);\r\n  // in dev mode, check that the tree invariants are met\r\n  if (window['__DEV__']) {\r\n    invariant(\r\n      DraftTreeInvariants.isValidTree(blockMap),\r\n      'Should be a valid tree',\r\n    );\r\n  }\r\n  return blockMap;\r\n};\r\n\r\nconst decodeRawEntityMap = (rawState: RawDraftContentState): any => {\r\n  const {entityMap: rawEntityMap} = rawState;\r\n  const entityMap = {};\r\n\r\n  // TODO: Update this once we completely remove DraftEntity\r\n  Object.keys(rawEntityMap).forEach(rawEntityKey => {\r\n    const {type, mutability, data} = rawEntityMap[rawEntityKey];\r\n\r\n    // get the key reference to created entity\r\n    entityMap[rawEntityKey] = DraftEntity.__create(\r\n      type,\r\n      mutability,\r\n      data || {},\r\n    );\r\n  });\r\n\r\n  return entityMap;\r\n};\r\n\r\nconst convertFromRawToDraftState = (\r\n  rawState: RawDraftContentState,\r\n): ContentState => {\r\n  invariant(Array.isArray(rawState.blocks), 'invalid RawDraftContentState');\r\n\r\n  // decode entities\r\n  const entityMap = decodeRawEntityMap(rawState);\r\n\r\n  // decode blockMap\r\n  const blockMap = decodeRawBlocks(rawState, entityMap);\r\n\r\n  // create initial selection\r\n  const selectionState = blockMap.isEmpty()\r\n    ? new SelectionState()\r\n    : SelectionState.createEmpty(blockMap.first().getKey());\r\n\r\n  return new ContentState({\r\n    blockMap,\r\n    entityMap,\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState,\r\n  });\r\n};\r\n\r\nexport default  convertFromRawToDraftState;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport  {DraftInlineStyle} from '../immutable/DraftInlineStyle';\r\n\r\nimport CharacterMetadata from '../immutable/CharacterMetadata';\r\n\r\nimport {List}from 'immutable';\r\n\r\nfunction createCharacterList(\r\n  inlineStyles: Array<DraftInlineStyle>,\r\n  entities: Array<string>,\r\n): List<CharacterMetadata> {\r\n  const characterArray = inlineStyles.map((style, ii) => {\r\n    const entity = entities[ii];\r\n    return CharacterMetadata.create({style, entity});\r\n  });\r\n  return List(characterArray);\r\n}\r\n\r\nexport default  createCharacterList;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport {FakeClientRect} from './getRangeBoundingClientRect';\r\n\r\nimport getRangeBoundingClientRect from './getRangeBoundingClientRect';\r\n\r\n/**\r\n * Return the bounding ClientRect for the visible DOM selection, if any.\r\n * In cases where there are no selected ranges or the bounding rect is\r\n * temporarily invalid, return null.\r\n *\r\n * When using from an iframe, you should pass the iframe window object\r\n */\r\nfunction getVisibleSelectionRect(global: any): FakeClientRect {\r\n  const selection = global.getSelection();\r\n  if (!selection.rangeCount) {\r\n    return null;\r\n  }\r\n\r\n  const range = selection.getRangeAt(0);\r\n  const boundingRect = getRangeBoundingClientRect(range);\r\n  const {top, right, bottom, left} = boundingRect;\r\n\r\n  // When a re-render leads to a node being removed, the DOM selection will\r\n  // temporarily be placed on an ancestor node, which leads to an invalid\r\n  // bounding rect. Discard this state.\r\n  if (top === 0 && right === 0 && bottom === 0 && left === 0) {\r\n    return null;\r\n  }\r\n\r\n  return boundingRect;\r\n}\r\n\r\nexport default  getVisibleSelectionRect;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n * @emails oncall+draft_js\r\n */\r\n\r\n'use strict';\r\n\r\nimport getRangeClientRects from './getRangeClientRects';\r\n\r\nexport type FakeClientRect = {\r\n  left: number,\r\n  width: number,\r\n  right: number,\r\n  top: number,\r\n  bottom: number,\r\n  height: number,\r\n};\r\n\r\n/**\r\n * Like range.getBoundingClientRect() but normalizes for browser bugs.\r\n */\r\nfunction getRangeBoundingClientRect(range: Range): FakeClientRect {\r\n  // \"Return a DOMRect object describing the smallest rectangle that includes\r\n  // the first rectangle in list and all of the remaining rectangles of which\r\n  // the height or width is not zero.\"\r\n  // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect\r\n  const rects = getRangeClientRects(range);\r\n  let top = 0;\r\n  let right = 0;\r\n  let bottom = 0;\r\n  let left = 0;\r\n\r\n  if (rects.length) {\r\n    // If the first rectangle has 0 width, we use the second, this is needed\r\n    // because Chrome renders a 0 width rectangle when the selection contains\r\n    // a line break.\r\n    if (rects.length > 1 && rects[0].width === 0) {\r\n      ({top, right, bottom, left} = rects[1]);\r\n    } else {\r\n      ({top, right, bottom, left} = rects[0]);\r\n    }\r\n\r\n    for (let ii = 1; ii < rects.length; ii++) {\r\n      const rect = rects[ii];\r\n      if (rect.height !== 0 && rect.width !== 0) {\r\n        top = Math.min(top, rect.top);\r\n        right = Math.max(right, rect.right);\r\n        bottom = Math.max(bottom, rect.bottom);\r\n        left = Math.min(left, rect.left);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    top,\r\n    right,\r\n    bottom,\r\n    left,\r\n    width: right - left,\r\n    height: bottom - top,\r\n  };\r\n}\r\n\r\nexport default  getRangeBoundingClientRect;\r\n"],"names":["BlockMapBuilder","createFromArray","blocks","OrderedMap","map","block","getKey","EMPTY_SET","OrderedSet","defaultRecord","style","entity","__extends","CharacterMetadata","this","get","getStyle","includes","record","withStyle","set","add","create","withoutStyle","remove","entityKey","withEntity","getEntity","config","EMPTY","defaultConfig","configMap","Map","merge","existing","pool","newCharacter","Record","findRangesImmutable","haystack","areEqualFn","filterFn","foundFn","size","cursor","reduce","value","nextValue","nextIndex","last","count","key","type","text","characterList","List","depth","data","ContentBlockRecord","_super","Repeat","length","decorateCharacterList","ContentBlock","getText","offset","character","getCharacterList","callback","haveEqualStyle","haveEqualEntity","charA","charB","parent","children","prevSibling","nextSibling","props","ContentBlockNode","ContentStateInlineStyle","contentState","selectionState","inlineStyle","modifyInlineStyle","addOrRemove","blockMap","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","newBlocks","skipUntil","_","k","takeUntil","concat","blockKey","sliceStart","sliceEnd","getLength","current","chars","applyStyle","removeStyle","selectionBefore","selectionAfter","applyEntityToContentState","toOrderedMap","contentBlock","start","end","applyEntity","applyEntityToContentBlock","DraftEntitySegments","selectionStart","selectionEnd","entityStart","direction","segments","split","segment","ii","segmentEnd","segmentStart","removalStart","removalEnd","jj","entityEnd","atStart","atEnd","getEntityRemovalRange","entityMap","isEntireSelectionWithinEntity","isEntityAtStart","mutability","__get","getMutability","sideToConsider","entityRanges","ranges","findEntityRanges","c","push","invariant","getRangesForDraftEntity","filter","range","entityRange","anchorOffset","focusOffset","isBackward","removalRange","slice","seenKeys","MULTIPLIER","Math","pow","generateRandomKey","undefined","hasOwnProperty","isNaN","floor","random","toString","randomizeBlockMapKeys","first","lastRootBlock","newKeysRef","withMutations","blockMapState","forEach","index","oldKey","nextKey","getNextSiblingKey","prevKey","getPrevSiblingKey","childrenKeys","getChildKeys","parentKey","getParentKey","setIn","parentChildrenList","indexOf","childKey","child","toArray","randomizeContentBlockNodeKeys","randomizeContentBlockKeys","removeEntitiesAtEdges","getEntityMap","updatedBlocks","startBlock","updatedStart","removeForBlock","endBlock","updatedEnd","Object","keys","charBefore","charAfter","entityBeforeCursor","entityAfterCursor","_a","characters","a","b","element","getContentStateFragment","blockKeys","keySeq","startIndex","endIndex","insertIntoList","targetListArg","toInsert","targetList","reverse","unshift","head","tail","toList","insertFragment","fragment","targetKey","targetOffset","isTreeBasedBlockMap","newBlockArr","fragmentSize","target","finalOffset","finalKey","shouldNotUpdateFromFragmentBlock","isEmpty","headText","headCharacters","appendToHead","getType","getData","updateHead","fragmentBlock","blockSize","tailText","tailCharacters","prependToTail","updateTail","updatedBlockMap","originalBlockMap","targetBlock","fragmentHeadBlock","headKey","targetNextKey","targetParentKey","fragmentRootBlocks","rootBlock","rootBlocks","lastSiblingKey","getRootBlocks","lastRootFragmentBlockKey","originalTargetParentChildKeys","insertionIndex","newChildrenKeysArray","splice","updateBlockMapLinks","anchorKey","focusKey","insertFragmentIntoContentState","fragmentBlockMap","mergeBlockData","isCollapsed","newBlock","updateExistingBlock","modifyBlockForContentState","operation","toSeq","getNextDelimiterBlockKey","nextSiblingKey","nextNonDescendantBlock","transformBlock","func","getAncestorsKeys","parents","blockNode","getNextValidSibling","nextValidSiblingKey","getPrevValidSibling","prevValidSiblingKey","nextDelimiters","nextDelimiter","block_1","getNextDelimitersBlockKeys","delimiterKey","prevSiblingKey_1","newParentKey_1","newParent_1","find","removeRangeFromContentState","isExperimentalTreeBlock","parentAncestors","endBlockchildrenKeys","endBlockAncestors","removeFromList","modifiedStart","shift","pop","splitBlockInContentState","getAnchorKey","blockToSplit","blockType","getAnchorOffset","keyBelow","blockAbove","blockBelow","blocksBefore","v","blocksAfter","rest","originalBlock","belowBlock","originalBlockKey","belowBlockKey","newChildrenArray","DraftModifier","replaceText","rangeToReplace","withoutEntities","withoutText","characterMetadata","len","blockText","newOffset","insertTextIntoContentState","getSelectionAfter","insertText","targetRange","moveText","movedFragment","afterRemoval","removeRange","replaceWithFragment","rangeToRemove","removalDirection","getIsBackward","getFocusKey","getFocusOffset","getBlockForKey","startEntityKey","getEntityAt","endEntityKey","adjustedRemovalRange","newSelectionState","startSelectionState","endSelectionState","getCharacterRemovalRange","splitBlock","applyInlineStyle","removeInlineStyle","setBlockType","setBlockData","blockData","returnTrue","LeafRange","DecoratorRange","decoratorKey","leaves","BlockTree","decorator","textLength","of","leafSets","decorations","getDecorations","areEqual","generateLeaves","DraftEntityInstance","instances","instanceKey","logWarning","oldMethodCall","newMethodCall","console","warn","DraftEntity","getLastCreatedEntityKey","__getLastCreatedEntityKey","__create","instance","__add","mergeData","toMerge","__mergeData","replaceData","newData","__replaceData","newInstance","SelectionState","String","getHasFocus","offsetToCheck","hasFocus","name","window","__DRAFT_GKX","REGEX_BLOCK_DELIMITER","RegExp","sanitizeDraftText","input","replace","bidiService","ContentState","skip","delimiter","join","escape","theBlocks","Array","isArray","contentBlocks","createEmpty","gkx","createFromBlockArray","EditorBidiService","content","prevBidiMap","reset","UnicodeBidiService","nextBidi","valueSeq","nullthrows","getDirection","bidiMap","zip","is","allowUndo","currentContent","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","Stack","selection","treeMap","undoStack","EditorStateRecord","immutable","_immutable","EditorState","createWithContent","createFromText","firstKey","recordConfig","generateNewTreeMap","editorState","put","getImmutable","state","existingDecorator","newContent","getCurrentContent","newTreeMap","previousTreeMap","regenerateTreeForNewDecorator","newBlockMap","newEntityMap","prevBlockMap","regenerateTreeForNewBlocks","toJS","override","getInlineStyleOverride","getSelection","getInlineStyleAt","lookUpwardForInlineStyle","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getIn","hasEdgeWithin","updateSelection","lastBlock","getLastBlock","lastKey","acceptSelection","afterSelectionMove","moveSelectionToEnd","changeType","getDirectionMap","getAllowUndo","getUndoStack","getLastChangeType","mustBecomeBoundary","getSelectionBefore","editorStateChanges","newCurrentContent","peek","getRedoStack","fromKey","lastNonEmpty","originalBlockToBeMoved","originalTargetBlock","insertionMode","isInsertedAfterTarget","originalTargetKey","originalParentKey","originalNextSiblingKey","originalPrevSiblingKey","newParentKey","newNextSiblingKey","newPrevSiblingKey","newParentChildrenList","targetBlockIndex","moveBlockInContentState","blockToBeMoved","blocksToBeMoved","blockMapWithoutBlocksToBeMoved","nextDelimiterBlockKey","takeWhile","isBlockToBeMoved","hasNextSiblingAndIsNotNextSibling","doesNotHaveNextSiblingAndIsNotDelimiter","slicedBlocks","blockBefore","getBlockBefore","blockAfter","getBlockAfter","experimentalTreeDataSupport","AtomicBlockUtils","insertAtomicBlock","targetSelection","afterSplit","insertionTarget","asAtomicBlock","charData","atomicBlockConfig","atomicDividerBlockConfig","fragmentArray","withAtomicBlock","moveAtomicBlock","atomicBlock","withMovedAtomicBlock","selectionAfterRemoval","selectionAfterSplit","targetBlock_1","decorators","_decorators","CompositeDraftDecorator","fill","counter","strategy","canOccupySlice","targetArr","componentKey","occupySlice","parseInt","component","UL_WRAP","React","className","cx","OL_WRAP","PRE_WRAP","DefaultDraftBlockRenderMap","header-one","header-two","header-three","header-four","header-five","header-six","section","article","unordered-list-item","wrapper","ordered-list-item","blockquote","atomic","code-block","unstyled","aliasedElements","BOLD","fontWeight","CODE","fontFamily","wordWrap","ITALIC","fontStyle","STRIKETHROUGH","textDecoration","UNDERLINE","getCorrectDocumentFromNode","node","ownerDocument","document","isElement","nodeType","Node","ELEMENT_NODE","getSelectionOffsetKeyForNode","castedNode","offsetKey","getAttribute","childNodes","childOffsetKey","findAncestorOffsetKey","searchNode","documentElement","parentNode","getWindowForNode","defaultView","DOM_OBSERVER_OPTIONS","subtree","characterData","childList","characterDataOldValue","attributes","USE_CHAR_DATA","UserAgent","isBrowser","container","mutations","containerWindow","MutationObserver","observer","_this","registerMutations","onCharData","e","registerMutation","DOMObserver","observe","addEventListener","takeRecords","disconnect","removeEventListener","i","mutation","removedNodes","textContent","getMutationTextContent","DraftOffsetKey","leafKey","o","isHTMLElement","HTMLElement","getContentEditableContainer","editor","editorNode","ReactDOM","findDOMNode","editorContainer","firstChild","getUpdatedSelectionState","arguments","anchorPath","anchorBlockKey","anchorLeaf","getBlockTree","focusPath","focusBlockKey","focusLeaf","anchorLeafStart","focusLeafStart","anchorBlockOffset","focusBlockOffset","anchorLeafEnd","focusLeafEnd","getDraftEditorSelectionWithNodes","root","anchorNode","focusNode","anchorIsTextNode","TEXT_NODE","focusIsTextNode","needsRecovery","anchorPoint","focusPoint","getPointForNonTextNode","nodeName","editorRoot","startNode","childOffset","firstLeaf","getFirstLeaf","nodeBeforeCursor","lastLeaf","lastChild","getLastLeaf","getTextContentLength","dataset","isContentEditable","getDraftEditorSelection","rangeCount","editOnSelect","event","_blockSelectEvents","_latestEditorState","DraftJsDebugLogging","anonymizedDom","extraParams","JSON","stringify","stacktrace","Error","stack","documentSelection","updatedSelectionState","update","notEmptyKey","getEntityKeyForSelection","filterKey","resolved","stillComposing","domObserver","DraftEditorCompositionHandler","onCompositionStart","startDOMObserver","onCompositionEnd","setTimeout","resolveComposition","onSelect","onKeyDown","_onKeyDown","which","Keys","RIGHT","LEFT","preventDefault","onKeyPress","RETURN","stopAndFlushMutations","exitCurrentMode","composedChars","_b","replacementRange","currentStyle","compositionEndSelectionState","restoreEditorDOM","editorStateWithUpdatedSelection","DraftEditorDecoratedLeaves","leafSet","leavesForLeafSet","DecoratorComponent","getComponentForKey","decoratorProps","getPropsForKey","decoratorOffsetKey","decoratedText","dir","UnicodeBidiDirection","getHTMLDirIfDifferent","UnicodeBidi","Component","useNewlineChar","_forceFlag","DraftEditorTextNode","nextProps","_node","shouldBeNewline","elementNode","tagName","isNewline","ref","NEWLINE_A","NEWLINE_B","isHTMLBRElement","getAnonymizedDOM","getNodeLabels","anonymized","anonymizeTextWithin","labels","length_1","createTextNode","clone","cloneNode","setAttribute","appendChild","outerHTML","getAnonymizedEditorDOM","currentNode","hasAttribute","getNodeLength","nodeValue","setDraftEditorSelection","nodeStart","nodeEnd","documentObject","containsNode","extend","tempKey","tempOffset","hasAnchor","removeAllRanges","addPointToSelection","addFocusToSelection","storedFocusNode","storedFocusOffset","activeElement","getActiveElement","nodeWasFocus","n","activeElementName","nodeIsFocus","selectionRangeCount","selectionAnchorNodeName","selectionAnchorOffset","selectionFocusNodeName","selectionFocusOffset","message","getRangeAt","setEnd","addRange","cloneRange","createRange","DraftEffects","setStart","DraftEditorLeaf","isLast","isCustom","leaf","ele","parentElement","setIndepentSelection","targetNode","leafNode","styleSet","_setSelection","custom","endsWith","customStyleMap","customStyleFn","styleObj","styleName","mergedStyles","trim","assign","newStyles","contentEditable","DraftEditorNode","hasSelection","tree","lastLeafSet","Leaves","public/DraftStyleDefault/block","public/DraftStyleDefault/ltr","public/DraftStyleDefault/rtl","isBlockOnSelectionEdge","getDraftRenderConfig","blockRenderMap","configForType","wrapperTemplate","Element","getCustomRenderConfig","blockRendererFn","customRenderer","CustomComponent","customProps","customEditable","getElementPropsConfig","editorKey","blockStyleFn","customConfig","elementProps","data-block","data-editor","data-offset-key","customClass","suppressContentEditableWarning","DraftEditorBlockNode","isContainerNode","blockHasChanged","scrollDelta","scrollParent","Style","getScrollParent","scrollPosition","getScrollPosition","nodePosition","getElementPosition","y","height","getViewportDimensions","scrollTo","x","htmlBlockNode","offsetHeight","offsetTop","Scroll","setTop","getTop","acc","childProps","blockProps","createElement","shouldNotAddWrapperElement","nodes","wrappedSiblings","_i","sibling","childrenIs","cloneElement","applyWrapperElementToSiblings","DraftEditorContentsExperimental","prevEditorState","nextEditorState","nextNativeContent","getNativelyRenderedContent","wasComposing","isInCompositionMode","nowComposing","prevContent","nextContent","prevDecorator","getDecorator","nextDecorator","mustForceSelection","textDirectionality","processedBlocks","nodeBlock","getBlocksAsArray","nextBlockKey","outputBlocks","info","wrapperElement","DraftEditorBlock","commonProps","_renderChildren","getListItemClasses","shouldResetCount","public/DraftStyleDefault/unorderedListItem","public/DraftStyleDefault/orderedListItem","public/DraftStyleDefault/reset","public/DraftStyleDefault/depth0","public/DraftStyleDefault/depth1","public/DraftStyleDefault/depth2","public/DraftStyleDefault/depth3","public/DraftStyleDefault/depth4","public/DraftStyleDefault/listLTR","public/DraftStyleDefault/listRTL","DraftEditorContents","blocksAsArray","currentDepth","lastWrapperTemplate","editable","componentProps","Element_1","getDepth","joinClasses","theExport","TEXT_CLIPPING_REGEX","TEXT_TYPES","text/plain","text/html","text/rtf","getTextContentFromFiles","files","readCount","results","file","global","FileReader","contents","test","reader","onload","result","onerror","readAsText","readFile","isEventHandled","DraftEditorDragHandler","onDragEnd","endDrag","onDrop","DataTransfer","nativeEvent","dataTransfer","dropSelection","eventTargetDocument","currentTarget","caretRangeFromPoint","dropRange","startContainer","rangeParent","rangeOffset","getSelectionForEvent","_dragCount","getFiles","handleDroppedFiles","fileText","insertTextAtSelection","dragType","_internalDrag","handleDrop","newContentState","mouseUpEvent","MouseEvent","view","bubbles","cancelable","dispatchEvent","getCurrentInlineStyle","isFirefox","getFragmentFromSelection","moveSelectionBackward","maxDistance","warning","keyBefore","getKeyBefore","removeTextWithStrategy","anchorBlock","isSelectionAtEndOfContent","anchorBlockSibling","isSelectionAtStartOfContent","keyCommandPlainBackspace","strategyState","charBehind","UnicodeUtils","getUTF16Length","isGecko","isEngine","isOSX","isPlatform","KeyBindingUtil","isCtrlKeyCommand","ctrlKey","altKey","isOptionKeyCommand","usesMacOSHeuristics","hasCommandModifier","metaKey","isSoftNewlineEvent","getModifierState","clipboard","SecondaryClipboard","blockEnd","keyAfter","getKeyAfter","getRangeClientRects","tempRange","clientRects","ancestor","endContainer","atCommonAncestor","commonAncestorContainer","rects","from","getClientRects","setEndBefore","areRectsOnOneLine","lineHeight","minTop","Infinity","minBottom","maxTop","maxBottom","rect","width","min","top","bottom","max","DOCUMENT_TYPE_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","expandRangeToStartOfLine","collapsed","containingElement","computed","getComputedStyle","correctDocument","div","fontSize","position","documentBody","body","getBoundingClientRect","removeChild","getLineHeightPx","bestContainer","bestOffset","setStartBefore","display","currentContainer","maxIndexToConsider","isSurrogatePair","WHITESPACE_AND_PUNCTUATION","TokenizeUtil","getPunctuation","DELETE_REGEX","BACKSPACE_REGEX","getRemovableWord","matches","exec","DraftRemovableWord","moveSelectionForward","isChrome","onKeyCommand","command","redo","charAhead","keyCommandPlainDelete","keyCommandDeleteWord","keyCommandBackspaceWord","keyCommandBackspaceToStartOfLine","keyCommandInsertNewline","finalSelection","afterInsert","newEditorState","keyCommandTransposeCharacters","keyCommandMoveSelectionToStartOfBlock","keyCommandMoveSelectionToEndOfBlock","isOldIE","getSafeBodyFromHTML","html","doc","implementation","createHTMLDocument","innerHTML","getElementsByTagName","isHTMLAnchorElement","isHTMLImageElement","REGEX_CR","REGEX_LF","REGEX_LEADING_LF","REGEX_NBSP","REGEX_CARRIAGE","REGEX_ZWS","boldValues","notBoldValues","anchorAttr","imgAttr","knownListItemDepthClasses","HTMLTagToRawInlineStyleMap","code","del","em","s","strike","strong","u","mark","getListItemDepth","some","depthClass","classList","contains","isValidAnchor","href","protocol","isValidImage","imageNode","getNamedItem","styleFromNodeAttributes","htmlElement","isListNode","blockTypeMap","disambiguate","clear","ContentBlocksBuilder","blockConfigs","currentBlockType","currentEntity","currentText","_toBlockConfigs","_trimCurrentText","_makeBlockConfig","_toContentBlocks","_toFlatContentBlocks","union","subtract","childConfigs","toLowerCase","wasCurrentDepth","wasWrapper","_addImgNode","_addAnchorNode","has","attributesStyle","addStyle","_addBreakNode","_addTextNode","l","begin","trimLeft","trimRight","findEntry","_appendText","image","entityConfig","attr","imageAttribute","anchor","anchorAttribute","url","URI","flatMap","blockConfig","_hoistContainersInBlockConfigs","_extractTextFromBlockConfigs","convertFromHTMLToContentBlocks","DOMBuilder","safeBody","mapKeys","desc","elements","buildBlockTypeMap","tag","addDOMNode","getContentBlocks","DraftPasteProcessor","textBlocks","textLine","blockNodeConfig","prevSiblingIndex","previousBlock","__assign","RichTextEditorUtil","currentBlockContainsLink","getCurrentBlockType","getDataObjectForLinkURL","uri","handleKeyCommand","toggleInlineStyle","toggleCode","onBackspace","onDelete","insertSoftNewline","withoutAtomicBlock","withoutBlockStyle","tryToRemoveBlockStyle","atomicBlockTarget","onTab","maxDepth","shiftKey","withAdjustment","adjustment","adjustBlockDepthForContentState","toggleBlockType","skipWhile","typeToSet","setInlineStyleOverride","toggleLink","withoutLink","NEWLINE_REGEX","splitTextIntoTextBlocks","selectionHandler","DraftEditorEditHandler","onBeforeInput","_pendingStateFromBeforeInput","handleBeforeInput","timeStamp","mustPreventNative","blockTree","isAtStart","leafStart","isSelectionAtLeafStart","_latestCommittedEditorState","oldBlockTree","newBlockTree","oldLeafSet","newLeafSet","oldStart","adjustedStart","oldEnd","adjustedEnd","newStart","newEnd","newDecoratorKey","setImmediate","onBlur","Boolean","preserveSelectionOnBlur","selection_1","currentSelection","setMode","_onCompositionStart","onCopy","setClipboard","onCut","isNode","removeFragment","onDragOver","onDragStart","onFocus","onInput","domSelection","previousSibling","span","domText","modelText","preserveEntity","abs","charDelta","contentWithAdjustedDOMSelection","inputType","onInputType","keyCode","callDeprecatedHandler","handlerName","deprecatedHandler","handleReturn","ESC","TAB","UP","DOWN","SPACE","keyBindingFn","newState","updateFn","undoneState","undo","keyCommandUndo","onPaste","clipboardData","isRichText","defaultFileText_1","handlePastedFiles","withInsertedText","getHTML","handlePastedText","stripPastedStyles","internalClipboard","getClipboard","getEditorKey","types","every","areTextBlocksAndClipboardEqual","htmlFragment","htmlMap","textFragment","textMap","onMouseUp","onKeyUp","DraftEditorPlaceholder","public/DraftEditorPlaceholder/root","public/DraftEditorPlaceholder/hasFocus","id","accessibilityID","whiteSpace","shouldFixFirefoxMovement","shouldRemoveWord","getDefaultKeyBinding","getZCommand","DELETE","getDeleteCommand","BACKSPACE","getBackspaceCommand","isIE","allowSpellCheck","handlerMap","edit","composite","drag","cut","render","didInitODS","UpdateDraftEditorFlags","_update","alreadyHasFocus","focus","blur","mode","editHandler","handler","_handler","setState","contentsKey","_clipboard","onChange","_editorKey","_placeholderAccessibilityID","_onBeforeInput","_buildHandler","_onBlur","_onCharacterData","_onCompositionEnd","_onCopy","_onCut","_onDragEnd","_onDragOver","_onDragStart","_onDrop","_onInput","_onFocus","_onKeyPress","_onKeyUp","_onMouseDown","_onMouseUp","_onPaste","_onSelect","propName","DraftEditor","eventName","flushControlled","unstable_flushControlled","readOnly","method_1","placeholder","hasText","_showPlaceholder","placeHolderProps","textAlignment","log","rootClass","DraftEditor/root","DraftEditor/alignLeft","DraftEditor/alignRight","DraftEditor/alignCenter","ariaRole","role","ariaExpanded","editorContentsProps","DefaultDraftInlineStyle","_renderPlaceholder","ariaActiveDescendantID","ariaAutoComplete","ariaControls","ariaDescribedBy","ariaLabel","ariaLabelledBy","ariaMultiline","ariaOwneeID","autoCapitalize","autoCorrect","notranslate","public/DraftEditor/content","webDriverTestID","onDragEnter","onDragLeave","spellCheck","outline","userSelect","WebkitUserSelect","tabIndex","DraftStringKey","strlen","encodeEntityRanges","storageMap","encoded","Number","isTruthy","EMPTY_ARRAY","encodeInlineStyleRanges","styleList","flatten","toSet","styleToEncode","getEncodedInlinesForType","prototype","apply","createRawBlock","entityStorageMap","inlineStyleRanges","toObject","encodeRawBlocks","rawState","rawBlocks","blockCacheRef","entityCacheRef","entityStorageKey","stringifiedEntityKey","rawBlock","insertRawBlock","isListBlock","DraftTreeAdapter","draftTreeState","transformedBlocks","fn","__spreadArrays","traverseInDepthOrder","addDepthToChildren","draftState","parentStack","isList","treeBlock","lastParent","newParent","DraftTreeInvariants","isValidBlock","prevSiblingKey","isConnectedTree","eligibleFirstNodes","nodesSeen","currentKey","visitedStack","childKeys","firstNode_1","isValidTree","substr","decodeBlockNodeConfig","decodeCharacterList","inlineStyles","entities","characterArray","createCharacterList","styles","decodeInlineStyleRanges","decodeEntityRanges","addKeyIfMissing","updateNodeStack","parentRef","nodesWithParentRef","decodeRawBlocks","isTreeRawBlock","decodeContentBlocks","contentBlockNode","siblings","index_1","children_1","contentBlockNode_1","decodeContentBlockNodes","rawEntityMap","rawEntityKey","decodeRawEntityMap","rawDraftContentState","encodeRawEntityMap","boundingRect","right","left","getRangeBoundingClientRect"],"mappings":"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"}